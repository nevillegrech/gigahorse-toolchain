#include "abstract_tac_transformer.dl"

/**
  Component that performs call-site-level inlining.
  Can be extended with the InlineCandidate relation being overridable
  enabling the creation of custom inline strategies.
  A subset of InlineCandidate will be in FunctionToInline after making 
  sure that our control-flow invariants will not break and that it doesn't 
  contain calls to other inline candidate functions.
*/

.comp FunctionInliner : AbstractTACTransformer {
  /*Inputs and outputs following the parts of the client analysis schema
   that are affected by inlining. */

  /* Will be overriden to specify which functions the specific inliner will want to inline 
     FunctionToInline will contain a subset of this */
  .decl InlineCandidate(fun: Function, reason: symbol) overridable
  
  /* Functions that will be inlined in this instatiation of the component */
  .decl FunctionToInline(fun:Function)

  .decl SafelyInlinableFunction(fun:Function)
  .decl FunHasArgMismatch(fun:Function)
  .decl FunHasRetMismatch(fun:Function)
  .decl FunCalledWithImpreciseControlFlow(fun:Function)
  .decl CGEToInlineCandidate(caller:Function, callee:Function)
  .decl Function_Exit(fun:Function, block: Block)
  .decl FunctionToInline_RetStmt(fun:Function, retStmt:Statement)
  .decl ThrowBlock(block:Block)

  /* Helper predicates associating In -> Out{Blocks,Stmts,Vars} */
  /* For cloned ones the call-site(block) is used as context and for non cloned ones the empty string */
  .decl InBlock_OutBlock(inBlock:Block, callBlock:Block, outBlock:Block)
  .decl InStatement_OutStatement(inStmt:Statement, callBlock:Block, outStmt:Statement)
  .decl InVar_OutVar(inVar:Variable, callBlock:Block, outVar:Variable)


  .decl CallToClonedFunction(cloneBlock:Block, callStmt:Statement, fun:Function)
  .decl ClonedCallArgs(cloneBlock:Block, callStmt:Statement, fun:Function, actualArg:Variable, formalArg:Variable)
  .decl ClonedCallRets(cloneBlock:Block, callStmt:Statement, fun:Function, retStmt:Statement, actualRet:Variable, formalRet:Variable)

  .decl BlockToClone(block:Block, fromFun:Function, callerBlock:Block, callerFun:Function, newBlock:Block)
  .decl StatementToClone(stmt:Statement, fromFun:Function, callerBlock:Block, callerFun:Function, newStmt:Statement)
  .decl VariableToClone(var:Variable, fromFun:Function, callerBlock:Block, callerFun:Function, newVar:Variable)
  
  /* By default tries to inline all private functions */
  InlineCandidate(fun, "NoReason"):-
    In_IsFunction(fun),
    !IsPublicFunction(fun).

  /* at least one actual arg missing at some call-site */
  FunHasArgMismatch(fun):-
    In_CallGraphEdge(callerBlock, fun),
    In_FormalArgs(fun, _, i),
    In_Statement_Block(callStmt, callerBlock),
    In_Statement_Opcode(callStmt, "CALLPRIVATE"),
    !In_Statement_Uses(callStmt, _, i+1).
  
  /* Formal returns don't match with the number of returns inferred */  
  FunHasRetMismatch(fun):-
    In_CallGraphEdge(callerBlock, fun),
    In_Statement_Block(callStmt, callerBlock),
    In_Statement_Opcode(callStmt, "CALLPRIVATE"),
    In_Statement_Defines(callStmt, _, i),
    Function_Exit(fun, retBlock),
    In_Statement_Block(retStmt, retBlock),
    In_Statement_Opcode(retStmt, "RETURNPRIVATE"),
    !In_Statement_Uses(retStmt, _, i + 1).

  /* Case based on an example: when such imprecision exists don't inline */
  FunCalledWithImpreciseControlFlow(fun):-
    In_CallGraphEdge(callerBlock, fun),
    In_LocalBlockEdge(callerBlock, next1),
    In_LocalBlockEdge(callerBlock, next2),
    next1 != next2.

  /*
    Restriction ensures that the inlined functions have either a single return
    or no actual returned variables. Otherwise we'd need to add PHIs.
  */
  .decl FunctionReturnRestriction(fun:Function)
  
  FunctionReturnRestriction(fun):-
    In_IsFunction(fun),
    1 = count: Function_Exit(fun, _).

  // FunctionReturnRestriction(fun):-
  //   In_IsFunction(fun),
  //   1 < count: Function_Exit(fun, _),
  //   !In_FormalReturnArgs(fun, _, 0).

  FunctionReturnRestriction(fun):-
    In_IsFunction(fun),
    1 < count: Function_Exit(fun, _),
    !FunctionMultiReturnRestriction(fun).

  .decl FunctionMultiReturnRestriction(fun:Function)
  FunctionMultiReturnRestriction(fun):-
    In_IsFunction(fun),
    1 < count: Function_Exit(fun, _),
    In_FormalReturnArgs(fun, var1, i),
    In_FormalReturnArgs(fun, var2, i),
    var1 != var2.

  /* We can safely inline functions with only one return
     and matching args and returns at every call-site(as described above) */
  SafelyInlinableFunction(fun):-
    In_IsFunction(fun),
    !IsPublicFunction(fun),
    InFunction(fun_entry_block, fun),
    In_FunctionEntry(fun_entry_block),
    !GlobalEntryBlock(fun_entry_block),
    (FunctionReturnRestriction(fun); FunctionMultiReturnRestriction(fun)),
    !FunHasArgMismatch(fun),
    !FunHasRetMismatch(fun),
    !FunCalledWithImpreciseControlFlow(fun).

  ThrowBlock(block):-
    (In_Statement_Opcode(throw, "THROW"); In_Statement_Opcode(throw, "REVERT")),
    In_Statement_Block(throw, block).

  Function_Exit(fun, block) :-
    In_InFunction(block, fun),
    (In_LocalBlockEdge(_, block);
     In_FunctionEntry(block)),
    !ThrowBlock(block),
    !In_LocalBlockEdge(block, _).

  CGEToInlineCandidate(caller, callee):-
    InlineCandidate(callee, _),
    SafelyInlinableFunction(callee),
    In_CallGraphEdge(callerBlock, callee),
    In_InFunction(callerBlock, caller).

  /* The functions that end up being inlined are the safely inlinable candidates
     that do not contain calls to other inline candidates */
  FunctionToInline(func):-
    InlineCandidate(func, _),
    SafelyInlinableFunction(func),
    In_IsFunction(func),
    !IsPublicFunction(func),
    !FunctionIsInner(func),
    !CGEToInlineCandidate(func, _).

  /*
    Derived fact relations needed to be used by the subcomponents
  */

  .decl In_Statement_Function(s: Statement, f: Function)
  .decl In_ActualArgs(caller: Block, a: Variable, pos: number)
  .decl In_FormalReturnArgs(fn: Function, a: Variable, pos: number)


  In_Statement_Function(s, f) :-
    In_Statement_Block(s, b),
    In_InFunction(b, f).

  In_ActualArgs(caller, a, pos - 1) :-
    In_Statement_Uses(s, a, pos),
    In_Statement_Opcode(s, "CALLPRIVATE"),
    pos >= 1,
    In_Statement_Block(s, caller).

  In_FormalReturnArgs(fn, a, pos - 1) :-
    In_Statement_Uses(s, a, pos),
    In_Statement_Opcode(s, "RETURNPRIVATE"),
    pos >= 1,
    In_Statement_Block(s, b),
    In_InFunction(b, fn).
  
  /* Identifying the blocks and statements to be cloned is trivial after finding FunctionToInline */
  InBlock_OutBlock(block, callerBlock, newBlock),
  BlockToClone(block, calleeFun, callerBlock, callerFun, newBlock):-
    FunctionToInline(calleeFun),
    In_CallGraphEdge(callerBlock, calleeFun),
    In_ValidBlock(callerBlock),
    In_InFunction(callerBlock, callerFun),
    In_InFunction(block, calleeFun),
    newBlock = cat(cat(block, "B"), callerBlock).
  
  InBlock_OutBlock(block, "", block):-
    In_InFunction(block, _),
    In_ValidBlock(block),
    !BlockToClone(block, _, _, _, _).

  InStatement_OutStatement(stmt, callerBlock, newStmt),
  StatementToClone(stmt, func, callerBlock, callerFun, newStmt):-
    BlockToClone(block, func, callerBlock, callerFun, _),
    In_Statement_Block(stmt, block),
    newStmt = cat(cat(stmt, "S"), callerBlock).

  InStatement_OutStatement(stmt, "", stmt):-
    In_Statement_Block(stmt, _),
    !StatementToClone(stmt, _, _, _, _).

  Out_Statement_Block(stmt, block):-
    In_Statement_Block(stmt, block),
    !BlockToClone(block, _, _, _, _).

  Out_Statement_Block(newStmt, newBlock):-
    In_Statement_Block(stmt, block),
    BlockToClone(block, _, callerBlock, _, newBlock),
    StatementToClone(stmt, _, callerBlock, _, newStmt).

  
  Out_InFunction(block, function):-
    In_InFunction(block, function),
    !BlockToClone(block, _, _, _, _).
  
  Out_InFunction(newBlock, callerFun):-
    BlockToClone(block, inlinedFun, _, callerFun, newBlock),
    In_InFunction(block, inlinedFun).
  
  Out_FunctionEntry(block):-
    In_FunctionEntry(block),
    !BlockToClone(block, _, _, _, _).


  Out_FormalArgs(fun, a, pos):-
    In_FormalArgs(fun, a, pos),
    !FunctionToInline(fun).
  
  Out_IsFunction(fun):-
    In_IsFunction(fun),
    !FunctionToInline(fun).

  Out_CallGraphEdge(outBlock, fun):-
    In_CallGraphEdge(inBlock, fun),
    InBlock_OutBlock(inBlock, _, outBlock),
    !FunctionToInline(fun).

  Out_FunctionCallReturn(outBlock, fun, outReturn):-
    In_FunctionCallReturn(inBlock, fun, inReturn),
    InBlock_OutBlock(inBlock, same, outBlock),
    InBlock_OutBlock(inReturn, same, outReturn),
    !FunctionToInline(fun).
  
  Out_Block_Gas(outBlock, gas):-
    In_Block_Gas(inBlock, gas),
    InBlock_OutBlock(inBlock, _, outBlock).

  Out_Block_CodeChunkAccessed(outBlock, chunk):-
    In_Block_CodeChunkAccessed(inBlock, chunk),
    InBlock_OutBlock(inBlock, _, outBlock).

  Out_Statement_OriginalStatement(outStmt, stmt):-
    In_Statement_OriginalStatement(inStmt, stmt),
    InStatement_OutStatement(inStmt, _, outStmt).

  Out_Statement_OriginalStatementList(outStmt, stmtList):-
    In_Statement_OriginalStatementList(inStmt, stmtList),
    InStatement_OutStatement(inStmt, "", outStmt).

  Out_Statement_OriginalStatementList(outStmt, [originalCall, stmtList]):-
    In_Statement_OriginalStatementList(inStmt, stmtList),
    StatementToClone(inStmt, _, callerBlock, _, outStmt),
    In_Statement_Block(callStmt, callerBlock),
    In_Statement_Opcode(callStmt, "CALLPRIVATE"),
    In_Statement_OriginalStatement(callStmt, originalCall).

  Out_Statement_InlineInfo(outStmt, functionList):-
    In_Statement_InlineInfo(inStmt, functionList),
    InStatement_OutStatement(inStmt, "", outStmt).

  Out_Statement_InlineInfo(outStmt, [inlinedFun, functionList]):-
    In_Statement_InlineInfo(inStmt, functionList),
    StatementToClone(inStmt, inlinedFun, _, _, outStmt).

  Out_OriginalStatement_Block(stmt, outBlock):-
    In_OriginalStatement_Block(stmt, inBlock),
    InBlock_OutBlock(inBlock, _, outBlock).

  Out_FallthroughEdge(outFrom, outTo):-
    In_FallthroughEdge(inFrom, inTo),
    InBlock_OutBlock(inFrom, same, outFrom),
    InBlock_OutBlock(inTo, same, outTo).

  .decl In_ValidBlock(block:Block)
  //Hack because the decompiler sometimes gives 'dead' blocks
  In_ValidBlock(block):-
    In_LocalBlockEdge(block, _);
    In_LocalBlockEdge(_, block);
    In_Statement_Block(_, block).

  Out_LocalBlockEdge(outFrom, outTo):-
    In_LocalBlockEdge(inFrom, inTo),
    InBlock_OutBlock(inFrom, same, outFrom),
    InBlock_OutBlock(inTo, same, outTo),
    !BlockToClone(_, _, inFrom, _, _).  // Disregard old LocalBlockEdges from blocks/call-sites to inlined functions.
  
  Out_LocalBlockEdge(outFrom, outTo):-
    FunctionToInline(fun),
    In_FunctionCallReturn(inFrom, fun, _),
    In_ValidBlock(inFrom),
    In_InFunction(inEntry, fun),
    In_FunctionEntry(inEntry),
    InBlock_OutBlock(inFrom, "", outFrom),
    InBlock_OutBlock(inEntry, inFrom, outTo).

  Out_LocalBlockEdge(outExitBlock, outRet):-
    FunctionToInline(fun),
    In_FunctionCallReturn(inFrom, fun, inRet),
    In_ValidBlock(inFrom),
    Function_Exit(fun, exitBlock),
    InBlock_OutBlock(inRet, "", outRet),
    InBlock_OutBlock(exitBlock, inFrom, outExitBlock).


  Out_Statement_Next(outStmt, outNext):-
    In_Statement_Next(inStmt, inNext),
    InStatement_OutStatement(inStmt, same, outStmt),
    InStatement_OutStatement(inNext, same, outNext),
    !ClonedCallArgs(_, inStmt, _, _, _).

  
  /* old next of the call in a cloned call-site is the new next of the return */
  Out_Statement_Next(clonedRet, outNext):-
    ClonedCallRets(callerBlock, callStmt, _, retStmt, _, _),
    In_Statement_Next(callStmt, inNext),
    InStatement_OutStatement(retStmt, callerBlock, clonedRet),
    InStatement_OutStatement(inNext, "", outNext).
  
  /* next of the call in a cloned call-site is the first statement
     of the entry block of the cloned function */
  Out_Statement_Next(outCall, outFirstStmt):-
    ClonedCallArgs(callerBlock, callStmt, callee, _, _),
    In_InFunction(inEntryBlock, callee),
    In_FunctionEntry(inEntryBlock),
    In_Statement_Block(inFirstStmt, inEntryBlock),
    !In_Statement_Next(_, inFirstStmt),
    InStatement_OutStatement(callStmt, "", outCall),
    InStatement_OutStatement(inFirstStmt, callerBlock, outFirstStmt).
  
  /* Keep old opcodes in all but inlined calls/returns */
  Out_Statement_Opcode(outStmt, opcode):-
    In_Statement_Opcode(inStmt, opcode),
    InStatement_OutStatement(inStmt, _, outStmt),
    !CallToClonedFunction(_, inStmt, _),
    !FunctionToInline_RetStmt(_, inStmt).

  Out_Statement_Opcode(outStmt, "JUMP"):-
    InStatement_OutStatement(inStmt, _, outStmt),
    (CallToClonedFunction(_, inStmt, _); FunctionToInline_RetStmt(_, inStmt)).

  Out_IsStatement(outStmt):-
    InStatement_OutStatement(_, _, outStmt).

  CallToClonedFunction(callerBlock, callStmt, callee):-
    FunctionToInline(callee),
    In_CallGraphEdge(callerBlock, callee),
    In_Statement_Block(callStmt, callerBlock),
    In_Statement_Opcode(callStmt, "CALLPRIVATE").

  /* Helper predicate identifying call stmts actual-formal args for cloned calls */
  ClonedCallArgs(callerBlock, callStmt, callee, actualArg, formalArg):-
    CallToClonedFunction(callerBlock, callStmt, callee),
    In_Statement_Uses(callStmt, actualArg, i),
    i > 0,
    In_FormalArgs(callee, formalArg, i-1).

  FunctionToInline_RetStmt(callee, retStmt):-
    FunctionToInline(callee),
    Function_Exit(callee, retBlock),
    In_Statement_Block(retStmt, retBlock),
    In_Statement_Opcode(retStmt, "RETURNPRIVATE").

  /* Helper predicate identifying call and return stmts actual-formal rets for cloned calls */
  ClonedCallRets(callerBlock, callStmt, callee, retStmt, actualRet, formalRet):-
    CallToClonedFunction(callerBlock, callStmt, callee),
    In_Statement_Defines(callStmt, actualRet, i),
    FunctionToInline_RetStmt(callee, retStmt),
    In_Statement_Uses(retStmt, formalRet, i + 1).

  .decl InlinedCallNeedsPHIIntroduced(callerBlock: Block, callStmt: Statement, callee: Function, retStmt: Statement, index: number, actualRet: Variable, formalRet: Variable)
  DEBUG_OUTPUT(InlinedCallNeedsPHIIntroduced)
  InlinedCallNeedsPHIIntroduced(callerBlock, callStmt, callee, retStmt, i, actualRet, formalRet):-
    CallToClonedFunction(callerBlock, callStmt, callee),
    FunctionMultiReturnRestriction(callee),
    In_Statement_Defines(callStmt, actualRet, i),
    FunctionToInline_RetStmt(callee, retStmt),
    In_Statement_Uses(retStmt, formalRet, i + 1).

  .decl NewPHIInfo(callerBlock: Block, callStmt: Statement, actualRet: Variable, phiBlock: Block, stmtId: Statement, defVar: Variable, useVar: Variable)
  DEBUG_OUTPUT(NewPHIInfo)

  NewPHIInfo(callerBlock, callStmt, actualRet, phiBlock, stmtId, defVar, formalRett):-
    InlinedCallNeedsPHIIntroduced(callerBlock, callStmt, _, _, i, actualRet, formalRet),
    In_LocalBlockEdge(callerBlock, phiBlock),
    InVar_OutVar(formalRet, callerBlock, formalRett),
    !ClonedCallArgs(_, _, _, _, formalRet),
    stmtId = cat(cat(cat(cat(callerBlock, "S"), phiBlock), "_"), to_string(i)),
    defVar = cat(cat(cat(cat(actualRet, "V"), phiBlock), "_"), to_string(i)).

  NewPHIInfo(callerBlock, callStmt, actualRet, phiBlock, stmtId, defVar, actualArgg):-
    InlinedCallNeedsPHIIntroduced(callerBlock, callStmt, _, _, i, actualRet, formalRet),
    In_LocalBlockEdge(callerBlock, phiBlock),
    ClonedCallArgs(callerBlock, _, _, actualArg, formalRet), //Formal ret is formal arg
    InVar_OutVar(actualArg, "", actualArgg),
    stmtId = cat(cat(cat(cat(callerBlock, "S"), phiBlock), "_"), to_string(i)),
    defVar = cat(cat(cat(cat(actualRet, "V"), phiBlock), "_"), to_string(i)).

  Out_Statement_Defines(outStmt, outVar, i),
  InVar_OutVar(inVar, callerBlock, outVar),
  VariableToClone(inVar, fromFun, callerBlock, callerFun, outVar):-
    StatementToClone(inStmt, fromFun, callerBlock, callerFun, outStmt),
    In_Statement_Defines(inStmt, inVar, i),
    outVar = cat(cat(inVar, "V"), callerBlock).

  Out_Statement_Defines(inStmt, inVar, i),
  InVar_OutVar(inVar, "", inVar):-
    In_Statement_Defines(inStmt, inVar, i),
    !StatementToClone(inStmt, _, _, _, _),
    !ClonedCallRets(_, inStmt, _, _, _, _).


  InVar_OutVar(formalArg, "", formalArg):-
    In_IsFunction(fun),
    In_FormalArgs(fun, formalArg, _),
    !FunctionToInline(fun).

  InVar_OutVar(formalArg, callerBlock, actualArgExt):-
    ClonedCallArgs(callerBlock, _, _, actualArg, formalArg),
    InVar_OutVar(actualArg, "", actualArgExt).

  InVar_OutVar(actualRet , "", formalRett):-
    ClonedCallRets(callerBlock, _, _, _, actualRet, formalRet),
    InVar_OutVar(formalRet, callerBlock, formalRett),
    !InlinedCallNeedsPHIIntroduced(callerBlock, _, _, _, _, actualRet, formalRet),
    !ClonedCallArgs(_, _, _, _, formalRet).

  InVar_OutVar(actualRet , "", actualArgg):-
    ClonedCallRets(caller, _, _, _, actualRet, formalRet),
    ClonedCallArgs(caller, _, _, actualArg, formalRet), //Formal ret is formal arg
    InVar_OutVar(actualArg, "", actualArgg),
    !InlinedCallNeedsPHIIntroduced(caller, _, _, _, _, actualRet, formalRet).

  Out_Statement_Uses(outStmt, outVar, i):-
    In_Statement_Uses(inStmt, inVar, i),
    InStatement_OutStatement(inStmt, same, outStmt),
    InVar_OutVar(inVar, same, outVar),
    !ClonedCallRets(_, _, _, _, inVar, _),
    !CallToClonedFunction(_, inStmt, _),
    !ClonedCallRets(_, inStmt, _, _, _, _),
    !ClonedCallRets(_, _, _, inStmt, _, _).

  Out_Statement_Uses(outStmt, outVar, 0):-
    CallToClonedFunction(_, inStmt, _),
    In_Statement_Uses(inStmt, inVar, 0),
    InStatement_OutStatement(inStmt, "", outStmt),
    InVar_OutVar(inVar, "", outVar).

  Out_Statement_Uses(outStmt, outVar, i):-
    In_Statement_Uses(inStmt, actualRet, i),
    InStatement_OutStatement(inStmt, "", outStmt),
    ClonedCallRets(callerBlock, _, _, _, actualRet, formalRet),
    InVar_OutVar(formalRet, callerBlock, outVar),
    !InlinedCallNeedsPHIIntroduced(callerBlock, _, _, _, _, actualRet, formalRet),
    !ClonedCallRets(_, inStmt, _, _, _, _).

  Out_Statement_Uses(outStmt, phiVar, i):-
    In_Statement_Uses(inStmt, actualRet, i),
    InStatement_OutStatement(inStmt, "", outStmt),
    ClonedCallRets(callerBlock, _, _, _, actualRet, formalRet),
    InlinedCallNeedsPHIIntroduced(callerBlock, _, _, _, _, actualRet, formalRet),
    NewPHIInfo(callerBlock, _, actualRet, _, _, phiVar, _),
    !ClonedCallRets(_, inStmt, _, _, _, _).

  /* Fixing the uses of cloned calls/returns to restore the JUMP stmts */
  Out_Statement_Uses(outCall, outJumpTargetVar, 0):-
    ClonedCallRets(_, inCall, _, _, _, _),
    In_Statement_Uses(inCall, jumpTargetVar, 0),
    InStatement_OutStatement(inCall, "", outCall),
    InVar_OutVar(jumpTargetVar, "", outJumpTargetVar).

  Out_Statement_Uses(outRetJump, outJumpTargetVar, 0):-
    ClonedCallRets(callerBlock, _, _, retJump, _, _),
    In_Statement_Uses(retJump, jumpTargetVar, 0),
    InStatement_OutStatement(retJump, callerBlock, outRetJump),
    InVar_OutVar(jumpTargetVar, callerBlock, outJumpTargetVar).

  Out_Statement_Opcode(stmtId, "PHI"),
  Out_Statement_Defines(stmtId, defVar, 0),
  Out_Statement_Uses(stmtId, useVar, -1),
  Out_Statement_Block(stmtId, phiBlock):-
    NewPHIInfo(_, _, _, phiBlock, stmtId, defVar, useVar).

  .decl In_VariableHoldsJumpdest(inVar: Variable)
  In_VariableHoldsJumpdest(inVar):-
    In_Statement_Uses(inJump, inVar, 0),
    In_Statement_Opcode(inJump, opcode),
    (opcode = "JUMP" ; opcode = "JUMPI").

  // The last arg to a private call is the return address
  In_VariableHoldsJumpdest(inVar):-
    In_Statement_Uses(inCall, inVar, n),
    In_Statement_Opcode(inCall, "CALLPRIVATE"),
    !In_Statement_Uses(inCall, _, n + 1).

  Out_Variable_BlockValue(outVar, outVal):-
    In_Variable_BlockValue(inVar, inVal),
    In_VariableHoldsJumpdest(inVar),
    InVar_OutVar(inVar, callerBlock, outVar),
    callerBlock != "",
    outVal = cat(cat(inVal, "B"), callerBlock).

  Out_Variable_BlockValue(outVar, inVal):-
    In_Variable_BlockValue(inVar, inVal),
    In_VariableHoldsJumpdest(inVar),
    InVar_OutVar(inVar, "", outVar).
 

  /* Will not be correct in Jumps to cloned blocks but does not matter
     (it is not correct for cloned blocks in the decompiler outputs anyway) */
  Out_Variable_Value(outVar, val):-
    In_Variable_Value(inVar, val),
    InVar_OutVar(inVar, _, outVar).

  Out_ActualReturnArgs(outCaller, outVar, pos):-
    In_ActualReturnArgs(caller, inVar, pos),
    In_CallGraphEdge(caller, calleeFun),
    !FunctionToInline(calleeFun),
    InBlock_OutBlock(caller, same, outCaller),
    InVar_OutVar(inVar, same, outVar).

}
