#pragma once

/**
 Arrays
 **/

.decl IsCallDataArrayVar(var: Variable)
DEBUG_OUTPUT(IsCallDataArrayVar)

.decl IsRegularArrayVar(var: Variable)
DEBUG_OUTPUT(IsRegularArrayVar)

.decl IsRawDataArrayVar(var: Variable)
DEBUG_OUTPUT(IsRawDataArrayVar)

.decl IsABIEncodedArrayVar(var: Variable)
DEBUG_OUTPUT(IsABIEncodedArrayVar)

.decl IsArgCallDataArrayVar(var: Variable, argHex: symbol)
DEBUG_OUTPUT(IsArgCallDataArrayVar)

/**
  `cdl` loads the `cdlArrayVar`'s offset in the calldata 
  `cdl2` loads the array's length in `lenVar`
*/

.decl CallDataLoadArrayLoadingPattern(cdl: Statement, cdl2: Statement, cdlArrayVar: Variable, lenVar: Variable, argHex: symbol)
DEBUG_OUTPUT(CallDataLoadArrayLoadingPattern)

.decl CallDataLoadReadsLength(cdl: Statement, cdlArrayVar: Variable, lenVar: Variable)
DEBUG_OUTPUT(CallDataLoadReadsLength)

// TODO: Change arg order
.decl CallDataCopyArgInfo(callDataCopy: Statement, memArrayTo: Variable, callDataArrayFrom: Variable)
DEBUG_OUTPUT(CallDataCopyArgInfo)

.decl CallDataCopyOfArg(callDataCopy: Statement, memAddrTo: Variable, callDataArrayFrom: Variable, lenVar: Variable, sizeBytes: Variable, elemLen: symbol)
DEBUG_OUTPUT(CallDataCopyOfArg)

.decl Array_ElementLength(array:Variable, elementSize:symbol)
DEBUG_OUTPUT(Array_ElementLength)

.decl ArrayVarLengthVar(array:Variable, arrayLen:Variable)
DEBUG_OUTPUT(ArrayVarLengthVar)

.decl ArrayDataStartVar(array:Variable, arrayDataStart:Variable)
DEBUG_OUTPUT(ArrayDataStartVar)

.decl ArgArrayLenWrittenTo(lenVar:Variable, arrayVar:Variable)
DEBUG_OUTPUT(ArgArrayLenWrittenTo)

.decl ArrayIndexAccess(array:Variable, indexVar:Variable, index:Variable)
DEBUG_OUTPUT(ArrayIndexAccess)

.decl CallDataArrayGet(stmt:Statement, array:Variable, index:Variable, to:Variable)
DEBUG_OUTPUT(CallDataArrayGet)

.decl MemArrayGet(stmt:Statement, array:Variable, index:Variable, to:Variable)
DEBUG_OUTPUT(MemArrayGet)

.decl MemArrayPut(stmt:Statement, array:Variable, index:Variable, from:Variable)
DEBUG_OUTPUT(MemArrayPut)

.decl StatementUsesMemory_UsesArray(stmt:Statement, kind:symbol, array:Variable)
DEBUG_OUTPUT(StatementUsesMemory_UsesArray)

.decl MLOADReadsArrayLength(stmt:Statement)

IsCallDataArrayVar(callDataArrayVar):-
  IsArgCallDataArrayVar(callDataArrayVar, _).

CallDataLoadReadsLength(cdl, callDataArrayVar, lenVar):-
  IsCallDataArrayVar(callDataArrayVar),
  CALLDATALOAD(cdl, callDataArrayVar, lenVar).

IsArgCallDataArrayVar(plusFourVar, argHex),
CallDataLoadArrayLoadingPattern(cdl, cdl2, plusFourVar, lenVar, argHex):-
  CALLDATALOAD(cdl, argIdVar, toVar),
  BasicVariable_Value(argIdVar, argHex),
  ADDFix(_, toVar, fourVar, plusFourVar),
  BasicVariable_Value(fourVar, "0x4"),
  CALLDATALOAD(cdl2, plusFourVar, lenVar),
  // Differentiate between arrays and structs here
  // going for the easiest/most hacky way to do it for now
  !ProbablyUsedAsCallDataStruct(plusFourVar).

/**
  TODO: Use it to capture calldata arrays of structs, encoded differently than
  arrays of structs in calldata
  REVIEW at some point as it may be too loose.
  However we can't do much better right now.
*/
.decl PossibleCallDataArrayElementLength(calldataArray: Variable, elemSize: number)
DEBUG_OUTPUT(PossibleCallDataArrayElementLength)

Array_ElementLength(callDataArrayVar, @number_to_hex(maxElementLength)):-
  IsCallDataArrayVar(callDataArrayVar),
  maxElementLength = max possibleElementSize : {
    PossibleCallDataArrayElementLength(callDataArrayVar, possibleElementSize)
  }.


PossibleCallDataArrayElementLength(callDataArrayVar, @hex_to_number(elemSize)):-
// Array_ElementLength(callDataArrayVar, elemSize):-
  CallDataLoadReadsLength(_, callDataArrayVar, lenVar),
  VarTimesConstantNoIdentity(lenVar, elemSize, _),
  (elemSize = "0x1"; @mod_256(elemSize, "0x20") = "0x0").



Array_ElementLength(array, elementSize):-
  IsCallDataArrayVar(array),1=0,
  ArrayDataStartVar(array, dataStartVar),
  ADDFix(_, dataStartVar, indexTimesCons, cdlIndex),
  VarTimesConstantNoIdentity(indexVar, elementSize, indexTimesCons),
  // Avoid cases like 1*32 or 0*32, favor 32
  !Variable_Value(indexVar, "0x20"),
  CALLDATALOAD(_, cdlIndex, _),
  (elementSize = "0x1"; @mod_256(elementSize, "0x20") = "0x0").


ArrayDataStartVar(array, dataStartVar):-
  CallDataLoadArrayLoadingPattern(cdl, _, array, _, _),
  CALLDATALOAD(cdl, _, to),
  ADDFix(_, to, x24, dataStartVar),
  Variable_NumericValue(x24, 36).

// TODO: use `CallDataCopyOfArg` in the rules below
Array_ElementLength(cdlArrayVar, "0x1"),
CallDataCopyOfArg(callDataCopy, memAddrTo, cdlArrayVar, lenVar, lenVar, "0x1"):-
  CallDataLoadReadsLength(_, cdlArrayVar, lenVar),
  VarPlusThirtyTwo(cdlArrayVar, cdlArrayDataStart),
  CALLDATACOPY(callDataCopy, memAddrTo, cdlArrayDataStart, lenVar).

Array_ElementLength(cdlArrayVar, elemSize),
CallDataCopyOfArg(callDataCopy, memAddrTo, cdlArrayVar, lenVar, lenBytesVar, elemSize):-
  CallDataLoadReadsLength(_, cdlArrayVar, lenVar),
  VarPlusThirtyTwo(cdlArrayVar, cdlArrayDataStart),
  VarTimesConstant(lenVar, elemSize, lenBytesVar),
  CALLDATACOPY(callDataCopy, memAddrTo, cdlArrayDataStart, lenBytesVar).

IsRegularArrayVar(memArrayTo),
Array_ElementLength(memArrayTo, "0x1"),
Array_ElementLength(callDataArrayFrom, "0x1"),
CallDataCopyArgInfo(callDataCopy, memArrayTo, callDataArrayFrom):-
  CallDataLoadReadsLength(_, callDataArrayFrom, lenVar),
  CALLDATACOPY(callDataCopy, arrayDataStart, _, lenVar),
  ArgArrayLenWrittenTo(lenVar, memArrayTo),
  VarPlusThirtyTwo(memArrayTo, arrayDataStart).


IsRegularArrayVar(memArrayTo),
Array_ElementLength(memArrayTo, elemSize),
Array_ElementLength(callDataArrayFrom, elemSize),
CallDataCopyArgInfo(callDataCopy, memArrayTo, callDataArrayFrom):-
  CallDataLoadReadsLength(_, callDataArrayFrom, lenVar),
  VarTimesConstant(lenVar, elemSize, lenBytes),
  CALLDATACOPY(callDataCopy, arrayDataStart, _, lenBytes),
  ArgArrayLenWrittenTo(lenVar, memArrayTo),
  VarPlusThirtyTwo(memArrayTo, arrayDataStart).

CallDataCopyArgInfo(callDataCopy, rawDataArrayTo, callDataArrayFrom):-
  CallDataLoadReadsLength(_, callDataArrayFrom, lenVar),
  VarTimesConstant(lenVar, _, lenBytes),
  CALLDATACOPY(callDataCopy, rawDataArrayTo, _, lenBytes),
  RawDataArrayVar_ClassRep(rawDataArrayTo, _).

// REVIEW: Can make the case for regular arrays more precise by requesting the length
// to be written as well.
ArrayCopy(callDataCopy, as(callDataArrayFrom, ArrayVariable), memArrayToId):-
  CallDataCopyArgInfo(callDataCopy, memArrayTo, callDataArrayFrom),
  (VarIsArray(memArrayTo, memArrayToId) ; RawDataArrayVar_ClassRep(memArrayTo, memArrayToId)).

// IsRegularArrayVar(arrayVar),
// Array_ElementLength(arrayVar, elemSize):-
//CallDataCopyArgInfo(callDataCopy, arrayVar, argHex):-
// For post 0.8.x calldata arrays
ArrayCopy(loop, as(callDataArrayFrom, ArrayVariable), memArrayToId):-
  CallDataLoadReadsLength(_, callDataArrayFrom, lenVar),
  // VarTimesConstant(lenVar, elemSize, lenBytes),
  CallDataCopyLoop(loop, calldataArrayDataStart, memArrayToDataStart),
  ArrayDataStartVar(callDataArrayFrom, calldataArrayDataStart),
  ArgArrayLenWrittenTo(lenVar, memArrayTo),
  ArrayDataStartVar(memArrayTo, memArrayToDataStart),
  VarIsArray(memArrayTo, memArrayToId).

ArgArrayLenWrittenTo(lenVar, arrayVar):-
  CallDataLoadReadsLength(_, _, lenVar),
  MSTORE(_, arrayVar, lenVar).


ArrayDataStartVar(array, arrayStart):-
  IsRegularArrayVar(array),
  VarPlusThirtyTwo(array, arrayStart).

ArrayDataStartVar(array, arrayStart):-
  IsCallDataArrayVar(array),
  VarPlusThirtyTwo(array, arrayStart).

// REVIEW: This generates too many results
ArrayDataStartVar(array, arrayStart):-
  IsRegularArrayVar(array),
  Variable_SymbolicValue(array, arrayVal),
  FreePointerBasedValuesNumDiffNoMemReuse(dataStartVal, arrayVal, 32),
  Variable_SymbolicValue(arrayStart, dataStartVal),
  // Boilerplate but efficient code to ensure statement-level domination
  Statement_Defines(stmt2, arrayStart, _),
  Statement_Block(stmt2, block2),
  Statement_Defines(stmt1, array, _),
  Statement_Block(stmt1, block1),
  (Dominates(block1, block2) ; LocalStatementPathInBlock(stmt1, stmt2)).

/**
  Special case for raw data arrays.
**/

ArrayDataStartVar(array, array):-
  IsRawDataArrayVar(array).

ArrayVarLengthVar(array, arrayLength):-
  IsRegularArrayVar(array),
  MLOAD(_, array, arrayLength).

StatementUsesMemory_UsesArray(stmt, kind, array):-
  StatementUsesMemory_LengthVar(stmt, kind, arrayLength),
  StatementUsesMemory_StartVar(stmt, kind, arrayStart),
  ArrayVarLengthVar(array, arrayLength),
  ArrayDataStartVar(array, arrayStart).

StatementUsesMemory_UsesArray(stmt, kind, array):-
  //StatementUsesMemory_LengthVar(stmt, kind, arrayLength),
  StatementUsesMemory_StartVar(stmt, kind, arrayStart),
  ArrayDataStartVar(array, arrayStart),
  IsRawDataArrayVar(array).

StatementUsesMemory_ActualMemoryArg(stmt, kind, 0, arrVarRep):-
  StatementUsesMemory_UsesArray(stmt, kind, array),
  VarIsArray(array, arrVarRep),
  StatementUsesMemoryReadsRawData(stmt, kind),
  !StatementUsesMemoryOfComputableLength(stmt, _, _).

MemoryStatement_ActualArg(stmt, arrVarRep, 0):-
  StatementUsesMemory_UsesArray(stmt, _, array),
  VarIsArray(array, arrVarRep),
  !StatementUsesMemoryOfComputableLength(stmt, _, _).

MemoryStatement_ActualArg(stmt, actual, index):-
  StatementUsesMemory_ActualArg(stmt, actual, index).

ArrayIndexAccess(array, indexVar, index):-
  Array_ElementLength(array, elementSize),
  ADDFix(_, var, array, indexVar),
  VarPlusThirtyTwo(other, var),
  VarTimesConstant(index, elementSize, other).

ArrayIndexAccess(array, indexVar, index):-
  Array_ElementLength(array, elementSize),
  VarTimesConstant(index, elementSize, other),
  ADDFix(_, other, array, temp),
  VarPlusThirtyTwo(temp, indexVar).

ArrayIndexAccess(array, indexVar, index):-
  Array_ElementLength(array, elementSize),
  VarPlusThirtyTwo(array, arrayStart),
  ADDFix(_, indexTimesSize, arrayStart, indexVar),
  VarTimesConstant(index, elementSize, indexTimesSize).

ArrayIndexAccess(array, indexVar, index):-
  Array_ElementLength(array, elementSize),
  ArrayDataStartVar(array, dataStartVar),
  ADDFix(_, dataStartVar, indexTimesCons, indexVar),
  VarTimesConstant(index, elementSize, indexTimesCons).

// Completeness addition to cover some patterns produced by solc >= 0.8
ArrayIndexAccess(array, newIndexVar, index):-
  ArrayIndexAccess(array, indexVar, index),
  VarPlusConst(indexVar, "0x0", newIndexVar).

/**
  This rule detects the following pattern:
  tmp = ADD index, baseVar // baseVar is equal to array - 0x20
  vd4aa6(0x40) = CONST
  mstoreIndex = ADD vd4aa6(0x40), tmp
  MSTORE mstoreIndex, storedVar

  This can end up being imprecise because:
    1. it doesn't take the elementSize into account
    2. it may produce results in cases where memory can be reused
  Will need to REVIEW at some point.
*/
ArrayIndexAccess(array, indexVar, actualIndexVar):-
  ADDFix(_, baseVar, actualIndexVar, tmp),
  VarPlusConst(tmp, const, indexVar),
  Variable_SymbolicValue(baseVar, baseVal),
  FreePointerBasedValuesNumDiffNoMemReuse(arrayVal, baseVal, @hex_to_number(const) - 32),
  Variable_SymbolicValue(array, arrayVal),
  IsRegularArrayVar(array),
  Array_ElementLength(array, "0x1"),
  // Boilerplate but efficient code to ensure statement-level domination
  Statement_Defines(stmt2, indexVar, _),
  Statement_Block(stmt2, block2),
  Statement_Defines(stmt1, array, _),
  Statement_Block(stmt1, block1),
  (Dominates(block1, block2) ; LocalStatementPathInBlock(stmt1, stmt2)).

MemArrayPut(mstore, array, index, from):-
  ArrayIndexAccess(array, indexVar, index),
  MSTORE(mstore, indexVar, from).


MemArrayGet(mload, array, index, to):-
  ArrayIndexAccess(array, indexVar, index),
  MLOAD(mload, indexVar, to).

ArrayLoadAtIndex(mload, arrVarRep, index, to):-
  MemArrayGet(mload, array, index, to),
  RegularArrayVar_ClassRep(array, arrVarRep).

ArrayStoreAtIndex(mstore, arrVarRep, index, from):-
  MemArrayPut(mstore, array, index, from),
  RegularArrayVar_ClassRep(array, arrVarRep).

CallDataArrayGet(stmt, array, index, to):-
  ArrayIndexAccess(array, indexVar, index),
  CALLDATALOAD(stmt, indexVar, to).

/**
    ArrayLoad
and ArrayStore
**/

DEBUG_OUTPUT(ArrayLoad)
DEBUG_OUTPUT(ArrayStore)
DEBUG_OUTPUT(ArrayLoadAtIndex)
DEBUG_OUTPUT(ArrayStoreAtIndex)

ArrayLoad(mload, arrId, to):-
  MLOAD(mload, indexVar, to),
  LocalFlows(arrayDataStart, indexVar),
  ArrayDataStartVar(array, arrayDataStart),
  VarIsArray(array, arrId),
  !ArrayLoadAtIndex(mload, _, _, _).

ArrayStore(mstore, arrId, from):-
  MSTORE(mstore, indexVar, from),
  LocalFlows(arrayDataStart, indexVar),
  ArrayDataStartVar(array, arrayDataStart),
  VarIsArray(array, arrId),
  !ArrayStoreAtIndex(mstore, _, _, _).

ArrayLoad(mload, arrId, to):-
  MLOAD(mload, indexVar, to),
  LocalFlows(rawDataArray, indexVar),
  RawDataArrayVar_ClassRep(rawDataArray, arrId).
  
ArrayStore(mstore, arrId, from):-
  MSTORE(mstore, indexVar, from),
  LocalFlows(rawDataArray, indexVar),
  RawDataArrayVar_ClassRep(rawDataArray, arrId).

ArrayLengthVar(arrId, lenVar):-
  ArrayVarLengthVar(array, lenVar),
  RegularArrayVar_ClassRep(array, arrId).

ArrayLengthVar(as(callDataArray, ArrayVariable), lenVar):-
  CallDataLoadReadsLength(_, callDataArray, lenVar).

MLOADReadsArrayLength(mload):-
  IsRegularArrayVar(array),
  MLOAD(mload, array, _).

ArrayCopy(mcopy, fromArray, toArray):-
  MCOPY(mcopy, toAddr, fromAddr, len),
  ArrayDataStartVar(fromArrayVar, fromAddr),
  VarIsArray(fromArrayVar, fromArray),
  ArrayDataStartVar(toArrayVar, toAddr),
  VarIsArray(toArrayVar, toArray),
  ArrayLengthVar(fromArray, arrLen),
  Array_ElementLength(fromArrayVar, elemLength),
  VarTimesConstant(arrLen, elemLength, len),
  ArrayLengthVar(fromArray, arrLen2),
  MSTORE(_, toArrayVar2, arrLen2),
  VarIsArray(toArrayVar2, toArray).

/**
  Points somewhere in an array's data 
**/
#ifdef IMPRECISE_ARRAY_FLOW
.decl ArrayDataVar(array:Variable, arrayData:Variable)
DEBUG_OUTPUT(ArrayDataVar)

ArrayDataVar(array, arrayData):-
  IsRegularArrayVar(array),
  ADDFix(_, array, otherPlusThirtyTwo, arrayData),
  VarPlusThirtyTwo(_, otherPlusThirtyTwo).

ArrayLoad(mload, arrId, to):-
  MLOAD(mload, indexVar, to),
  LocalFlows(arrayData, indexVar),
  ArrayDataVar(array, arrayData),
  VarIsArray(array, arrId),
  !ArrayLoadAtIndex(mload, _, _, _).
#endif

.decl ArrayWriteToRelativeIndex(arrayVar:Variable, mstore:Statement, relativeIndex:number)
.output ArrayWriteToRelativeIndex
ArrayWriteToRelativeIndex(arrayVar, mstore, relativeIndex):-
  ArrayDataStartVar(arrayVar, arrayDataStartVar),
  Statement_Defines(stmt1, arrayVar, _),
  Statement_Block(stmt1, block1),
  Variable_SymbolicValue(arrayDataStartVar, arrayDataStartVal),
  FreePointerBasedValuesNumDiff(relIndexWriteVal, arrayDataStartVal, relativeIndex),
  Variable_SymbolicValue(relIndexWriteVar, relIndexWriteVal),
  Statement_Defines(stmt2, relIndexWriteVar, _),
  Statement_Block(stmt2, block2),
  (Dominates(block1, block2) ; LocalStatementPathInBlock(stmt1, stmt2)),
  MSTORE(mstore, relIndexWriteVar, _).

DEBUG_OUTPUT(ArrayHasConstantLength)
ArrayStore(mstore, arrId, from):-
  ArrayHasConstantLength(arrId, length),
  VarIsArray(arrayVar, arrId),
  ArrayWriteToRelativeIndex(arrayVar, mstore, relativeIndex),
  MSTORE(mstore, _, from),
  relativeIndex > 0,
  relativeIndex < length + 32,
  !ArrayStoreAtIndex(mstore, _, _, _).


.decl PossibleArray(array:Variable)
DEBUG_OUTPUT(PossibleArray)

PossibleArray(array):-
  MLOADFreePtr_To(_, array),
  VarPlusThirtyTwo(array, _).

PossibleArray(array):-
  MSIZE(_, array).

PossibleArray(array):-
  PHIStmtTwoUses(_, msizeVar, mloadFreePtrVar, array),
  MSIZE(_, msizeVar),
  Statement_Defines(mload, mloadFreePtrVar, 0),
  MLOADFreePtr(mload).

//More general
//PossibleArray(array):-
//  Variable_SymbolicValue(array, freePointerBasedVal),
//  FreePointerBasedValue(freePointerBasedVal, _, _, _),
//  VarPlusThirtyTwo(array, _).

.decl PossibleArrayLoose(array:Variable)
DEBUG_OUTPUT(PossibleArrayLoose)

PossibleArrayLoose(array):-
  MLOAD(_, array, _),
  VarPlusThirtyTwo(array, _).

PossibleArrayLoose(array):-
  MSTORE(_, array, _),
  VarPlusThirtyTwo(array, _).

PossibleArrayLoose(array):-
  Statement_Opcode(callDataCopy, "CALLDATACOPY"),
  Statement_Uses(callDataCopy, arrayDataStart, 0),
  Variable_SymbolicValue(arrayDataStart, val1),
  FreePointerBasedValuesNumDiff(val1, val2, 32),
  Variable_SymbolicValue(array, val2).

PossibleArrayLoose(array):-
  MSTORE(_, array, _),
  Variable_SymbolicValue(array, val1),
  FreePointerBasedValuesNumDiff(val2, val1, 32),
  Variable_SymbolicValue(_, val2).

PossibleArrayLoose(array):-
  VarPlusThirtyTwo(array, arrayDataStart),
  RETURNDATACOPY(_, arrayDataStart, _, _).

PossibleArrayLoose(array):-
  MSTORE(_, array, var),
  ArrayVarLengthVar(_, var).

.decl ArrayHasConstantLength(arrayVarRep: ArrayVariable, length: number)

ArrayHasConstantLength(arrId, length):-
  ArrayAllocation(arrId, _, arrayLengthVar),
  Variable_Value(arrayLengthVar, arrLenHex),
  length = @hex_to_number(arrLenHex),
  length < 2 ^ 28. //Some very big number that should never be possible.


/**
  Array allocations
  **/

.decl ArrayFromArray(newArray:Variable, oldArray:Variable)
DEBUG_OUTPUT(ArrayFromArray)

.decl ArrayAllocationInternal(mstore:Statement, array:Variable, elemSize:Value, arrayLength:Variable)
DEBUG_OUTPUT(ArrayAllocationInternal)
DEBUG_OUTPUT(ArrayAllocation)

ArrayAllocation(arrId, elementSize, arrayLengthVar):-
  ArrayAllocationInternal(_, arrayVar, elementSize, arrayLengthVar),
  RegularArrayVar_ClassRep(arrayVar, arrId).

ArrayAllocation(arrId, as(elementSize, Value), arrayLengthVar):-
  IsRegularArrayVar(arrayVar),
  MSTORE(_, arrayVar, arrayLengthVar),
  RegularArrayVar_ClassRep(arrayVar, arrId),
  Array_ElementLength(arrayVar, elementSize),
  !ArrayAllocationInternal(_, arrayVar, _, _).

ArrayAllocation(arrId, "??", arrayLengthVar):-
  IsRegularArrayVar(arrayVar),
  MSTORE(_, arrayVar, arrayLengthVar),
  RegularArrayVar_ClassRep(arrayVar, arrId),
  !ArrayAllocationInternal(_, arrayVar, _, _),
  !Array_ElementLength(arrayVar, _).

// Allocations of arrays with unknown types.
// Rule is commented out because we now add facts for `Array_ElementLength`
// So the implicit invariant that No element length means no Allocation doesn't hold
// ArrayAllocationInternal(mstore, array, "??", arrayLengthVar):-
//   IsRegularArrayVar(array),
//   MSTORE(mstore, array, arrayLengthVar),
//   !Array_ElementLength(array, _).

IsRegularArrayVar(array),
ArrayFromArray(array, oldArray):-
  PossibleArray(array),
  MSTORE(_, array, arrayLength),
  ArrayVarLengthVar(oldArray, arrayLength).

ArrayFromArray(array, oldArray):-
  IsRegularArrayVar(array),
  MSTORE(_, array, arrayLength),
  ArrayVarLengthVar(oldArray, arrayLength).

// Can be imprecise
Array_ElementLength(array, elemLength):-
  ArrayFromArray(array, oldArray),
  Array_ElementLength(oldArray, elemLength).

IsRegularArrayVar(array):-
  PossibleArray(array),
  PossibleArrayAlias(array, arrayAlias),
  VarPlusThirtyTwo(arrayAlias, arrayStart),
  StatementUsesMemory_StartVar(stmt, _, arrayStart),
  StatementUsesMemoryReadsRawData(stmt, _),
  !StatementUsesMemoryOfComputableLength(stmt, _, _).

/**
  Maybe not general enough, maybe general enough
**/

IsRawDataArrayVar(array):-
  StatementUsesMemoryReadsRawData(stmt, _),
  StatementUsesMemory_StartVar(stmt, _, array),
  MLOADFreePtr_To(_, array).


IsRegularArrayVar(array),
Array_ElementLength(array, elementSize),
ArrayAllocationInternal(mstore, array, elementSize, arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
  VarPlusThirtyTwo(arraySizeBytes, arraySizeBytesPlusLength),
  ADDFix(_, arraySizeBytesPlusLength, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore),
  (elementSize = "0x1"; elementSize = "0x20").

/**
 Not proven to work so far
 **/
IsRegularArrayVar(array),
Array_ElementLength(array, elementSize),
ArrayAllocationInternal(mstore, array, elementSize, arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarPlusThirtyTwo(array, arrayStart),
  VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
  ADDFix(_, arraySizeBytes, arrayStart, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore),
  (elementSize = "0x1"; elementSize = "0x20").

/**
  Covers patterns produced for calldata arrays copied to memory.
  For solidity versions >= 0.8
*/
IsRegularArrayVar(array),
Array_ElementLength(array, elementSize),
ArrayAllocationInternal(mstore, array, elementSize, arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
  VarPlusThirtyTwo(arraySizeBytes, arrayTotalSizeBytes),
  VarPlusThrirtyOneAndNotThirtyOne(arrayTotalSizeBytes, arrayFinalSizeBytes),
  ADDFix(_, arrayFinalSizeBytes, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore),
  (elementSize = "0x1"; elementSize = "0x20").


/**
  Covers patterns produced for calldata arrays copied to memory.
  For solidity versions >= 0.8
*/
IsRegularArrayVar(array),
Array_ElementLength(array, elementSize),
ArrayAllocationInternal(mstore, array, elementSize, arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
  VarPlusSixtyThreeAndNotThirtyOne(arraySizeBytes, arrayFinalSizeBytes),
  ADDFix(_, arrayFinalSizeBytes, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore),
  (elementSize = "0x1"; elementSize = "0x20").

/**
  bytes or strings
 **/


IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  //VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
   VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar, arraySizeBytes),
  VarPlusThirtyTwo(arraySizeBytes, arraySizeBytesPlusLength),
  ADDFix(_, arraySizeBytesPlusLength, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore).

IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  //VarTimesConstant(arrayLengthVar, elementSize, arraySizeBytes),
  VarPlusThrirtyOneAndNotThirtyOne(arrayLengthVar, arraySizeBytes),
  VarPlusThirtyTwo(arraySizeBytes, arraySizeBytesPlusLength1),
  VarPlusThrirtyOneAndNotThirtyOne(arraySizeBytesPlusLength1, arraySizeBytesPlusLength2),
  ADDFix(_, arraySizeBytesPlusLength2, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore).

IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar, arraySizeBytes),
  VarPlusThirtyTwo(arraySizeBytes, arraySizeBytesPlusLength),
  ADDFix(_, arraySizeBytesPlusLength, array, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore).

IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  VarPlusThrirtyOneDivMulSixtyFour(arrayLengthVar, arraySizeBytes),
  ADDFix(_, arraySizeBytes, array, arrayPlusSizeBytes),
  VarPlusThirtyTwo(arrayPlusSizeBytes, updatedFMP),
  Statement_Uses(mstore, updatedFMP, 1),
  MSTOREFreePtr(mstore).

// REVIEW: This rule is maybe too imprecise and should be removed.
IsRegularArrayVar(array),
Array_ElementLength(array, elemLenVal),
ArrayAllocationInternal(mstore, array, as(elemLenVal, Value), arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  Variable_Value(arrayLengthVar, constantLengthVal),
  ADDFix(_, arraySizeBytes, array, arrayPlusSizeBytes),
  Variable_Value(arraySizeBytes, sizeBytesVal),
  dataSizeVal = @sub_256(sizeBytesVal, "0x20"),
  constantLengthVal != "0x0",
  constantLengthVal != "0x1",
  dataSizeVal != "0x0",
  elemLenVal = @div_256(dataSizeVal, constantLengthVal),
  (elemLenVal = "0x1" ; elemLenVal = "0x20"),
  Statement_Uses(mstore, arrayPlusSizeBytes, 1),
  MSTOREFreePtr(mstore).

/**
  Because of the rounding up of the array size to 32 bytes
  the pattern for constant length arrays with a size of 1 is ambiguous.
  This creates the need to heuristically infer their element width
*/
.decl AmbiguousElemLenConstArrayAllocation(mstore: Statement, array: Variable, arrayLengthVar: Variable)
DEBUG_OUTPUT(AmbiguousElemLenConstArrayAllocation)

// Hack, to resolve the ambiguity of 1 element constant bytes arrays
// Pattern will look like an 1 element constant uint array, but these are
// more rare than 1 element constant bytes arrays
IsRegularArrayVar(array),
AmbiguousElemLenConstArrayAllocation(mstore, array, arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  Variable_Value(arrayLengthVar, "0x1"),
  ADDFix(_, arraySizeBytes, array, arrayPlusSizeBytes),
  Variable_Value(arraySizeBytes, "0x40"),
  Statement_Uses(mstore, arrayPlusSizeBytes, 1),
  MSTOREFreePtr(mstore).

IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  AmbiguousElemLenConstArrayAllocation(mstore, array, arrayLengthVar),
  ArrayWriteToRelativeIndex(array, mstore2, 0),
  MSTOREValueIsProbablyBytes1(mstore2).

IsRegularArrayVar(array),
Array_ElementLength(array, "0x20"),
ArrayAllocationInternal(mstore, array, "0x20", arrayLengthVar):-
  AmbiguousElemLenConstArrayAllocation(mstore, array, arrayLengthVar),
  ArrayWriteToRelativeIndex(array, mstore2, 0),
  MSTORE(mstore2, _, storedVar),
  !MSTOREValueIsProbablyBytes1(mstore2),
  (LowBytesMaskOp(_, storedVar, _);
  (!LowBytesMaskOp(_, storedVar, _), !HighBytesMaskOp(_, storedVar, 1));
   (
    Variable_Value(storedVar, storedVal),
    storedVal = as(@and_256(storedVal, "0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Value)
   )
  ).



IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  PossibleArray(array),
  MSTORE(_, array, arrayLengthVar),
  Variable_Value(arrayLengthVar, constantLengthVal),
  ADDFix(_, arraySizeBytes, array, arrayPlusSizeBytes),
  Variable_Value(arraySizeBytes, sizeBytesVal),
  dataSizeVal = @sub_256(sizeBytesVal, "0x20"),
  constantLengthVal != "0x0",
  dataSizeVal != "0x0",
  elemLenVal = @div_256(dataSizeVal, constantLengthVal),
  elemLenVal != "0x0",
  "0x1" = @lt_256(elemLenVal, "0x20"),
  Statement_Uses(mstore, arrayPlusSizeBytes, 1),
  MSTOREFreePtr(mstore).


/*
  RETURNDATA
*/
.decl ReturnDataByteArray(arrVar:Variable, abiEncArrVar:Variable, call:Statement)
DEBUG_OUTPUT(ReturnDataByteArray)

ReturnDataByteArray(array, arrayStart, call),
IsRegularArrayVar(array),
Array_ElementLength(array, "0x1"),
ArrayAllocationInternal(mstore, array, "0x1", arrayLengthVar):-
  RETURNDATASIZEOfCALL(_, arrayLengthVar, call),
  MSTORE(_, array, arrayLengthVar),
  VarPlusThirtyTwo(array, arrayStart),
  RETURNDATACOPYAllDataOfCALL(_, arrayStart, call),
  RETURNDATASIZEOfCALL(_, arrayLengthVarAlt, call),
  VarPlusSixtyThreeAndNotThirtyOne(arrayLengthVarAlt, arraySizeBytes),
  ADDFix(_, arraySizeBytes, array, arrayPlusSizeBytes),
  Statement_Uses(mstore, arrayPlusSizeBytes, 1),
  MSTOREFreePtr(mstore).


/**
  
**/

MemoryModelingTempStmt(mstore):-
  ArrayAllocationInternal(mstore, _, _, _).

MemoryModelingTempStmt(mstore):-
  IsRegularArrayVar(array),
  MSTORE(mstore, array, _).


.decl WriteAfterArrayContents(mstore: Statement, array: ArrayVariable)
DEBUG_OUTPUT(WriteAfterArrayContents)

WriteAfterArrayContents(mstore, array):-
  VarIsArray(arrayVar, array),
  ArrayDataStartVar(arrayVar, arrayDataStart),
  ArrayLengthVar(arrayVar, arrayLenVar),
  ADDFix(_, arrayDataStart, arrayLenVar, memLoc),
  MSTORE(mstore, memLoc, _).

WriteAfterArrayContents(mstore, array):-
  VarIsArray(arrayVar, array),
  ArrayDataStartVar(arrayVar, arrayDataStart),
  ArrayCopy(_, fromArray, array),
  ArrayLengthVar(fromArray, arrayLenVar),
  ADDFix(_, arrayDataStart, arrayLenVar, memLoc),
  MSTORE(mstore, memLoc, _).

.init writeAfterArrayToMemConsStmt = ReachableBypassingWArg

writeAfterArrayToMemConsStmt.From(mstore, array):-
  WriteAfterArrayContents(mstore, array),
  MemWriteToMemConsStmt(mstore, _).

writeAfterArrayToMemConsStmt.Bypassing(mstore, array):-
  WriteAfterArrayContents(mstore, array),
  MemWriteToMemConsStmt(mstore, _).

writeAfterArrayToMemConsStmt.To(memCons, array):-
  WriteAfterArrayContents(mstore, array),
  MemWriteToMemConsStmt(mstore, memCons).

.decl LastWriteAfterArrayContents(mstore: Statement, memCons: Statement, array: ArrayVariable)
DEBUG_OUTPUT(LastWriteAfterArrayContents)

LastWriteAfterArrayContents(mstore, memCons, array):-
  WriteAfterArrayContents(mstore, array),
  MemWriteToMemConsStmt(mstore, memCons),
  writeAfterArrayToMemConsStmt.ReachableBypassingAny(mstore, memCons, array).


/**
  Flow extensions 
 
**/
.decl DirectMemoryMove(from:Variable, to:Variable)

.decl DirectReadFromArray(arrVarRep:ArrayVariable, to:Variable)
.decl DirectWriteToArray(arrVarRep:ArrayVariable, to:Variable)


DirectMemoryMove(from, to):-
  StatementUsesMemory_ActualMemoryArg(stmt, _, _, from),
  Statement_Defines(stmt, to, _).

DirectMemoryMove(from, to):-
  StatementUsesMemory_UsesArray(stmt, _, arrVarRep),
  DirectWriteToArray(arrVarRep, from),
  Statement_Defines(stmt, to, _).

/* */

DirectReadFromArray(arrVarRep, to):-
  ArrayLoadAtIndex(_, arrVarRep, _, to);
  ArrayLoad(_, arrVarRep, to).

DirectWriteToArray(arrVarRep, from):-
  ArrayStoreAtIndex(_, arrVarRep, _, from);
  ArrayStore(_, arrVarRep, from).

DirectMemoryMove(from, to):-
  DirectWriteToArray(arrVarRep, from),
  DirectReadFromArray(arrVarRep, to).

/*
  Find functions accepting arrays as args or returning them
*/

// kind is "Regular", "RawData", "ABI"
.decl ArrayActualArg(caller:Block, fun:Function, index: number, kind:symbol)

.decl ArrayDataActualArg(caller:Block, fun:Function, index: number, kind:symbol)

.decl ArrayFormalRet(fun:Function, index: number, kind:symbol)

.output ArrayActualArg, ArrayDataActualArg

ArrayActualArg(caller, function, pos, "Regular"):-
  ActualArgs(caller, actual, pos),
  IsRegularArrayVar(actual),
  CallGraphEdge(caller, function),
  FormalArgs(function, _, pos).

ArrayActualArg(caller, function, pos, "CallData"):-
  ActualArgs(caller, actual, pos),
  IsCallDataArrayVar(actual),
  CallGraphEdge(caller, function),
  FormalArgs(function, _, pos).

ArrayDataActualArg(caller, function, pos, "Data"):-
  ActualArgs(caller, actual, pos),
  ArrayDataStartVar(arr, actual),
  IsRegularArrayVar(arr),
  CallGraphEdge(caller, function),
  FormalArgs(function, _, pos).

ArrayFormalRet(fun, index, "Regular"):-
  FormalReturnArgs(fun, formalRet, index),
  IsRegularArrayVar(formalRet).

ArrayFormalRet(fun, index, "CallData"):-
  FormalReturnArgs(fun, formalRet, index),
  IsCallDataArrayVar(formalRet).

IsRegularArrayVar(formal):-
  ArrayActualArg(_, function, pos, "Regular"),
  FormalArgs(function, formal, pos).

IsRegularArrayVar(actual):-
  ArrayFormalRet(fun, index, "Regular"),
  CallGraphEdge(caller, fun),
  ActualReturnArgs(caller, actual, index).

// Disabling this for now to avoid cyclic negation in Element_Length inferences!
// IsCallDataArrayVar(formal):-
//   ArrayActualArg(_, function, pos, "CallData"),
//   FormalArgs(function, formal, pos).

// IsCallDataArrayVar(actual):-
//   ArrayFormalRet(fun, index, "CallData"),
//   CallGraphEdge(caller, fun),
//   ActualReturnArgs(caller, actual, index).

Array_ElementLength(formal, elementSize):-
  ArrayActualArg(caller, function, pos, kind),
  (kind = "Regular" ; kind = "CallData"),
  ActualArgs(caller, actual, pos),
  Array_ElementLength(actual, elementSize),
  FormalArgs(function, formal, pos).

Array_ElementLength(actual, elementSize):-
  ArrayFormalRet(fun, index, kind),
  (kind = "Regular" ; kind = "CallData"),
  FormalReturnArgs(fun, formalRet, index),
  Array_ElementLength(formalRet, elementSize),
  CallGraphEdge(caller, fun),
  ActualReturnArgs(caller, actual, index).

/**
  Constant arrays and their contents. This is mainly useful to find debug messages.
  Note that such bytearrays are right padded.
**/
.decl ConstArray_Contents(arrayRep:ArrayVariable, hex:symbol)

MemoryModelingTempStmt(mstore),
ConstArray_Contents(arrayRep, substr(val, 0, strlen(val) + 2*(length - 32))):-
  ArrayHasConstantLength(arrayRep, length),
  VarIsArray(arrayVar, arrayRep),
  length > 0,
  length <= 32,
  strlen(val) + 2*(length - 32) > 2,
  ArrayWriteToRelativeIndex(arrayVar, mstore, 0),
  MSTORE(mstore, _, storedVar),
  Variable_Value(storedVar, val).


MemoryModelingTempStmt(mstore1),
MemoryModelingTempStmt(mstore2),
ConstArray_Contents(arrayRep, val):-
  ArrayHasConstantLength(arrayRep, length),
  VarIsArray(arrayVar, arrayRep),
  length > 32,
  length <= 64,
  ArrayWriteToRelativeIndex(arrayVar, mstore1, 0),
  MSTORE(mstore1, _, storedVar1),
  Variable_Value(storedVar1, val1),
  ArrayWriteToRelativeIndex(arrayVar, mstore2, 32),
  MSTORE(mstore2, _, storedVar2),
  Variable_Value(storedVar2, val2),
  val = cat(val1 , substr(val2, 2, strlen(val2) - 2 + 2*(length - 64))).

MemoryModelingTempStmt(mstore1),
MemoryModelingTempStmt(mstore2),
MemoryModelingTempStmt(mstore3),
ConstArray_Contents(arrayRep, val):-
  ArrayHasConstantLength(arrayRep, length),
  VarIsArray(arrayVar, arrayRep),
  length > 64,
  length <= 96,
  ArrayWriteToRelativeIndex(arrayVar, mstore1, 0),
  MSTORE(mstore1, _, storedVar1),
  Variable_Value(storedVar1, val1),
  ArrayWriteToRelativeIndex(arrayVar, mstore2, 32),
  MSTORE(mstore2, _, storedVar2),
  Variable_Value(storedVar2, val2),
  ArrayWriteToRelativeIndex(arrayVar, mstore3, 64),
  MSTORE(mstore3, _, storedVar3),
  Variable_Value(storedVar3, val3),
  val = cat(val1 , cat(substr(val2, 2, strlen(val2)-2), substr(val3, 2, strlen(val3) - 2 + 2*(length - 96)))).

MemoryModelingTempStmt(codeCopy),
ConstArray_Contents(arrayRep, const):-
  ArrayHasConstantLength(arrayRep, _),
  VarIsArray(arrayVar, arrayRep),
  ArrayDataStartVar(arrayVar, arrayDataStartVar),
  Statement_Opcode(codeCopy, "CODECOPY"),
  Statement_Uses(codeCopy, arrayDataStartVar, 0),
  Statement_Uses(codeCopy, codeIndex, 1),
  Variable_Value(codeIndex, codeIndexHex),
  codeIndexNum = @hex_to_number(codeIndexHex),
  Statement_Uses(codeCopy, copyLen, 2),
  Variable_Value(copyLen, copyLenHex),
  copyLenNum = @hex_to_number(copyLenHex),
  ByteCodeHex(bytecodeStr),
  const = cat("0x", substr(bytecodeStr, 2*codeIndexNum, 2*copyLenNum)).

/**
  PossibleCopy
  TODO: Replace its usage in data_structures with something more precise
**/

.decl PossibleArrayCopy(store: Statement, load: Statement, toArray: Variable, fromArray: Variable)
DEBUG_OUTPUT(PossibleArrayCopy)

PossibleArrayCopy(store, load, toArray, fromArray):-
  ArrayLoad(load, fromArray, temp),
  ArrayStore(store, toArray, temp).

/**
  Finding array var aliases and using them to get the represenative for the aliasing class
**/

.decl PossibleArrayAlias(arrVar1:Variable, arrVar2:Variable)
DEBUG_OUTPUT(PossibleArrayAlias)

.decl RegularArrayVarsInSameClass(arrVar1:Variable, arrVar2:Variable)
DEBUG_OUTPUT(RegularArrayVarsInSameClass)

.decl RawDataArrayVarsInSameClass(arrVar1:Variable, arrVar2:Variable)
DEBUG_OUTPUT(RawDataArrayVarsInSameClass)

.decl RawDataArrayVar_ClassRep(arrVar:Variable, classRep:ArrayVariable)
DEBUG_OUTPUT(RawDataArrayVar_ClassRep)

.decl RegularArrayVar_ClassRep(arrVar:Variable, classRep:ArrayVariable)
DEBUG_OUTPUT(RegularArrayVar_ClassRep)

.decl ABIEncodedArrayVarsInSameClass(arrVar1:Variable, arrVar2:Variable)
DEBUG_OUTPUT(ABIEncodedArrayVarsInSameClass)

.decl ABIEncodedArrayVar_ClassRep(arrVar:Variable, classRep:ArrayVariable)
DEBUG_OUTPUT(ABIEncodedArrayVar_ClassRep)

PossibleArrayAlias(possibleArray, possibleArray):-
  PossibleArray(possibleArray).

PossibleArrayAlias(possibleArray1, possibleArray2):-
  PossibleArray(possibleArray1),
  Variable_SymbolicValue(possibleArray1, val1),
  FreePointerBasedValuesEqual(val1, val2),
  FreePointerBasedValue(val1, mload1, _ ,_),
  FreePointerBasedValue(val2, mload2, _ ,_),
  MLOADSFreePtrUnchangedNoMemReuse(mload1, mload2),
  Variable_SymbolicValue(possibleArray2, val2).

RegularArrayVarsInSameClass(arrVar1, arrVar1):-
  IsRegularArrayVar(arrVar1).

IsRegularArrayVar(arrVar2),
RegularArrayVarsInSameClass(arrVar1, arrVar2):-
  IsRegularArrayVar(arrVar1),
  Variable_SymbolicValue(arrVar1, arrVal),
  Variable_SymbolicValue(arrVar2, arrVal).

Array_ElementLength(arrayAlias, elementSize):-
  Array_ElementLength(array, elementSize),
  RegularArrayVarsInSameClass(array, arrayAlias).


IsRegularArrayVar(arrVar2),
RegularArrayVarsInSameClass(arrVar1, arrVar2):-
  IsRegularArrayVar(arrVar1),
  Variable_SymbolicValue(arrVar1, val1),
  FreePointerBasedValuesEqual(val1, val2),
  FreePointerBasedValue(val1, mload1, _ ,_),
  FreePointerBasedValue(val2, mload2, _ ,_),
  MLOADSFreePtrUnchangedNoMemReuse(mload1, mload2),
  Variable_SymbolicValue(arrVar2, val2).

RawDataArrayVarsInSameClass(arrVar1, arrVar1):-
  IsRawDataArrayVar(arrVar1).

IsRawDataArrayVar(arrVar2),
RawDataArrayVarsInSameClass(arrVar1, arrVar2):-
  IsRawDataArrayVar(arrVar1),
  Variable_SymbolicValue(arrVar1, val1),
  FreePointerBasedValuesEqual(val1, val2),
  FreePointerBasedValue(val1, mload1, _ ,_),
  FreePointerBasedValue(val2, mload2, _ ,_),
  MLOADSFreePtrUnchangedNoMemReuse(mload1, mload2),
  Variable_SymbolicValue(arrVar2, val2).

ABIEncodedArrayVarsInSameClass(arrVar1, arrVar1):-
  IsABIEncodedArrayVar(arrVar1).

IsABIEncodedArrayVar(arrVar2),
ABIEncodedArrayVarsInSameClass(arrVar1, arrVar2):-
  IsABIEncodedArrayVar(arrVar1),
  Variable_SymbolicValue(arrVar1, val1),
  FreePointerBasedValuesEqual(val1, val2),
  FreePointerBasedValue(val1, mload1, _ ,_),
  FreePointerBasedValue(val2, mload2, _ ,_),
  MLOADSFreePtrUnchangedNoMemReuse(mload1, mload2),
  Variable_SymbolicValue(arrVar2, val2).

ABIEncodedArrayVar_ClassRep(arrVar, as(arrVarRep, ArrayVariable)):-
  IsABIEncodedArrayVar(arrVar),
  maxordy = max ord(arrVar2) : ABIEncodedArrayVarsInSameClass(arrVar, arrVar2),
  ABIEncodedArrayVarsInSameClass(arrVar, arrVarRep),
  maxordy = ord(arrVarRep).

RegularArrayVar_ClassRep(arrVar, as(arrVarRep, ArrayVariable)):-
  arrayClassRep.Var_ClassRep(arrVar, arrVarRep).


.init assertVarIsArray = AssertIsFunction
assertVarIsArray.From(arrVar):-IsRegularArrayVar(arrVar).
assertVarIsArray.FunRelation(arrVar, arrVarRep):-RegularArrayVar_ClassRep(arrVar, arrVarRep).

DEBUG_OUTPUT(VarIsArray)

.init arrayClassRep = DominatorInClass

arrayClassRep.InSameClass(arrVar1, arrVar2):- RegularArrayVarsInSameClass(arrVar1, arrVar2).

.init rawDataArrayClassRep = DominatorInClass
rawDataArrayClassRep.InSameClass(arrVar1, arrVar2):- RawDataArrayVarsInSameClass(arrVar1, arrVar2).

RawDataArrayVar_ClassRep(arrVar, as(classRep, ArrayVariable)):-
  rawDataArrayClassRep.Var_ClassRep(arrVar, classRep).


VarIsArray(array, arrVarRep):-
  RegularArrayVar_ClassRep(array, arrVarRep);
  RawDataArrayVar_ClassRep(array, arrVarRep).


.decl VarPointsToArray(ctx: clientCtx.ClientContext, var: Variable, heapCtx: clientCtx.ClientContext, arrayId: ArrayVariable)
DEBUG_OUTPUT(VarPointsToArray)

.decl InsVarPointsToArray(var: Variable, arrayId: ArrayVariable)
DEBUG_OUTPUT(InsVarPointsToArray)

VarPointsToArray(ctx, arrayVar, ctx, arrayId):-
  clientCtx.ReachableClientContext(ctx, fun),
  Variable_Function(arrayVar, fun),
  VarIsArray(arrayVar, arrayId),
  ArrayAllocation(arrayId, _, _).

VarPointsToArray(newCtx, formal, heapCtx, arrayId):-
  VarPointsToArray(callerCtx, actual, heapCtx, arrayId),
  clientCtx.MergeClientContext(callerCtx, caller, newCtx),
  ActualArgs(caller, actual, pos),
  CallGraphEdge(caller, function),
  FormalArgs(function, formal, pos).

VarPointsToArray(callerCtx, actual, heapCtx, arrayId):-
  VarPointsToArray(calleeCtx, formal, heapCtx, arrayId),
  clientCtx.MergeClientContext(callerCtx, caller, calleeCtx),
  CallGraphEdge(caller, function),
  FormalReturnArgs(function, formal, index),
  ActualReturnArgs(caller, actual, index).

InsVarPointsToArray(var, arrayId):-
  VarPointsToArray(_, var, _, arrayId).

.decl Analytics_PolymorphicArrayVar(arrayVar: Variable, width: symbol)
.output Analytics_PolymorphicArrayVar

Analytics_PolymorphicArrayVar(arrayVar, width1):-
  InsVarPointsToArray(arrayVar, arrayId1),
  InsVarPointsToArray(arrayVar, arrayId2),
  Array_ElementLength(arrayId1, width1),
  Array_ElementLength(arrayId2, width2),
  width1 != width2.

.decl Analytics_PolymorphicArrayVarAlt(arrayVar: Variable, width: symbol)
.output Analytics_PolymorphicArrayVarAlt

Analytics_PolymorphicArrayVarAlt(array, width1):-
  Array_ElementLength(array, width1),
  Array_ElementLength(array, width2),
  width1 != width2.

.decl Analytics_PolymorphicArrayVarSameCtx(arrayVar: Variable, width: symbol)
.output Analytics_PolymorphicArrayVarSameCtx

Analytics_PolymorphicArrayVarSameCtx(arrayVar, width1):-
  VarPointsToArray(ctx, arrayVar, _, arrayId1),
  VarPointsToArray(ctx, arrayVar, _, arrayId2),
  Array_ElementLength(arrayId1, width1),
  Array_ElementLength(arrayId2, width2),
  width1 != width2.

.decl Analytics_ArrayVarHasNoElementSize(arrayVar: Variable)
.output Analytics_ArrayVarHasNoElementSize

Analytics_ArrayVarHasNoElementSize(array):-
  (IsRegularArrayVar(array); IsCallDataArrayVar(array)),
  !Array_ElementLength(array, _).