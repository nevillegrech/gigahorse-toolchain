#pragma once
#include "loops.dl"
#include "flows.dl"

.init inductionVariableFlow = LocalFlowAnalysis

inductionVariableFlow.TransferStmt(stmt):- Statement_Opcode(stmt, "AND"); Statement_Opcode(stmt, "PHI").
inductionVariableFlow.TransferBoundary(block) :- BlockInStructuredLoop(block, _).

// A variable that is steadily changing with each successive iteration in loop
.decl InductionVariable(v:Variable, loop: Block)

// Current definition: a var defined in a loop is an induction variable if:
//   - it is directly added to itself or subtracted from itself
//   - it is def-ed based on a variable that matches the above
//   - it is def-ed by a local function call whose arg depends on the var itself.
InductionVariable(inductionVar, loop) :-
   (ADD(addStmt, v, _, x) ; ADD(addStmt, _, v, x)),
   StatementInStructuredLoop(addStmt, loop),
   inductionVariableFlow.Flows(x, v),
   inductionVariableFlow.Flows(x, inductionVar),
   Statement_Defines(indVarSet, inductionVar, _),
   StatementInStructuredLoop(indVarSet, loop).
   //!VariabledDefinedByNonAddInLoop(v, loop).

InductionVariable(inductionVar, loop) :-
   SUB(subStmt, v, _, x),
   StatementInStructuredLoop(subStmt, loop),
   inductionVariableFlow.Flows(x, v),
   inductionVariableFlow.Flows(x, inductionVar),
   Statement_Defines(indVarSet, inductionVar, _),
   StatementInStructuredLoop(indVarSet, loop).
   //!VariabledDefinedByNonAddInLoop(v, loop).

InductionVariable(x, loop) :-
   CallGraphEdge(caller, _),
   BlockInStructuredLoop(caller, loop),
   ActualReturnArgs(caller, x, _),
   ActualArgs(caller, v, _),
   inductionVariableFlow.Flows(x, v).


//// Most general definition would be:

// .decl Statement_DefUses(stmt: Statement, defVar: Variable, useVar: Variable)
// Statement_DefUses(stmt, defVar, useVar) :-
//    Statement_Defines(stmt, defVar, _),
//    Statement_Uses(stmt, useVar, _).

// InductionVariable(inductionVar, loop) :-
//    StatementInStructuredLoop(stmt, loop),
//    Statement_DefUses(stmt, x, v),
//    inductionVariableFlow.Flows(x, v),
//    inductionVariableFlow.Flows(x, inductionVar),
//    Statement_Defines(indVarSet, inductionVar, _),
//    StatementInStructuredLoop(indVarSet, loop).


.decl VariabledDefinedByNonAddInLoop(v:Variable, loop:Block)
// A variable that is defined by any statement other than ADD
VariabledDefinedByNonAddInLoop(v, loop) :-
   Statement_Defines(stmt, v, _),
   StatementInStructuredLoop(stmt, loop),
   !ADD(stmt, _, _, v),
   !PHI(stmt, _, v),
   !AND(stmt, _, _, v).

VariabledDefinedByNonAddInLoop(v, loop) :-
   VariabledDefinedByNonAddInLoop(v_in, loop),
   PHI(stmt, v_in, v),
   StatementInStructuredLoop(stmt, loop).

.decl GlobalInductionVariableStore(storeVal:Value, loop:Block)

GlobalInductionVariableStore(storeVal, loop) :-
   SLOAD(loadStmt, index, var),
   (ADD(addStmt, var, _, addvar) ; ADD(addStmt, _, var, addvar)),
   SSTORE(storeStmt, index, addvar),
   StatementInStructuredLoop(loadStmt, loop),
   StatementInStructuredLoop(addStmt, loop),
   StatementInStructuredLoop(storeStmt, loop),
   Variable_Value(index, storeVal).

InductionVariable(var, loop) :-
  SLOAD(loadStmt, index, var),
  Variable_Value(index, storeVal),
  GlobalInductionVariableStore(storeVal, loop),
  StatementInStructuredLoop(loadStmt, loop).

/**
  Transitively, the `to` variable is the lhs of a PHI node and can take the
  value of the `from` variable.
*/
.decl PHITrans(from: Variable, to: Variable)

PHITrans(from, to):-
  PHI(_, from, to).

PHITrans(from, to):-
  PHITrans(from, mid),
  PHITrans(mid, to).

.decl PHIStmtTwoUses(phi:Statement, var1:Variable, var2:Variable, def:Variable)
PHIStmtTwoUses(phi, var1, var2, def):-
  PHI(phi, _, _),
  2 = count: Statement_Uses(phi, _, _),
  Statement_Defines(phi, def, 0),
  Statement_Uses(phi, var1, -1),
  Statement_Uses(phi, var2, -1),
  var1 != var2.

.decl PHIStmtOneUse(phi:Statement, var:Variable, def:Variable)
PHIStmtOneUse(phi, var, def):-
  PHI(phi, _, _),
  1 = count: Statement_Uses(phi, _, _),
  Statement_Defines(phi, def, 0),
  Statement_Uses(phi, var, _).

/**
  Simple loop induction variable. Identified by the two variables.
*/
.type SimpleInductionVariable = [beforeLoopVar: Variable, inLoopVar: Variable]

/**
  
*/
.decl WellFormedLoopInductionVariable(loop: Block, inductionPhiVar: Variable, simpleIndVar: SimpleInductionVariable)
.decl InductionVariableIncreasesByConst(loop:Block, simpleIndVar:SimpleInductionVariable, const:number)
.decl InductionVariableDecreasesByConst(loop:Block, simpleIndVar:SimpleInductionVariable, const:number)
.decl InductionVariableStartsAtConst(loop:Block, simpleIndVar:SimpleInductionVariable, const:Value)
.decl InductionVariableLowerBoundVar(loop:Block, indVar:SimpleInductionVariable, bound:Variable)
.decl InductionVariableUpperBoundVar(loop:Block, indVar:SimpleInductionVariable, bound:Variable)
.decl MemoryCopyLoop(loop:Block, memAddrFrom:Variable, memAddrTo:Variable)
.decl MemoryCopyLoopConstLength(loop:Block, memAddrFrom:Variable, memAddrTo:Variable, length:number)

DEBUG_OUTPUT(WellFormedLoopInductionVariable)
DEBUG_OUTPUT(InductionVariable)
DEBUG_OUTPUT(InductionVariableIncreasesByConst)
DEBUG_OUTPUT(InductionVariableDecreasesByConst)
DEBUG_OUTPUT(InductionVariableStartsAtConst)
DEBUG_OUTPUT(InductionVariableLowerBoundVar)
DEBUG_OUTPUT(InductionVariableUpperBoundVar)

WellFormedLoopInductionVariable(loop, phiVar, [beforeLoopVar, inLoopVar]):-
  InductionVariable(phiVar, loop),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  Statement_Defines(beforeStmt, beforeLoopVar, _),
  Statement_Block(beforeStmt, beforeBlock),
  Dominates(beforeBlock, loop),
  Statement_Defines(inLoopStmt, inLoopVar, _),
  StatementInStructuredLoop(inLoopStmt, loop).

InductionVariableIncreasesByConst(loop, [beforeLoopVar, inLoopVar], @hex_to_number(const)):-
  WellFormedLoopInductionVariable(loop, phiVar, [beforeLoopVar, inLoopVar]),
  VarPlusConst(phiVar, const, inLoopVar).

InductionVariableDecreasesByConst(loop, [beforeLoopVar, inLoopVar], @hex_to_number(const)):-
  WellFormedLoopInductionVariable(loop, phiVar, [beforeLoopVar, inLoopVar]),
  VarMinusConst(phiVar, const, inLoopVar).

InductionVariableStartsAtConst(loop, [beforeLoopVar, inLoopVar], const):-
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  BasicVariable_Value(beforeLoopVar, const).

// while (1) { if (i < boundVar)break; ... }
// while (boundVar <= i) {...}
InductionVariableLowerBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateTrue(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  LT(_, phiVar, boundVar, condVar).

// while (1) { if (i <= boundVar)break; ... }
// while (boundVar < i) {...}
InductionVariableLowerBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateFalse(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  GT(_, phiVar, boundVar, condVar).

// while (1) { if (boundVar < i)break; ... }
// while (i <= boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateTrue(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  GT(_, phiVar, boundVar, condVar).

// while (1) { if (boundVar <= i)break; ... }
// while (i < boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateFalse(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  LT(_, phiVar, boundVar, condVar).

// while (1) { if (boundVar <= i)break; ... }
// while (i < boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateTrue(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  LT(_, phiVar, boundVar, ltVar),
  ISZERO(_, ltVar, condVar).

// while (1) { if (boundVar < i)break; ... }
// while (i <= boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateFalse(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  GT(_, phiVar, boundVar, gtVar),
  ISZERO(_, gtVar, condVar).

// while (1) { if (boundVar <= i)break; ... }
// while (i < boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateTrue(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  GT(_, boundVar, phiVar, gtVar),
  ISZERO(_, gtVar, condVar).

// while (1) { if (boundVar < i)break; ... }
// while (i <= boundVar) {...}
InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar):-
  LoopExitCondPredicateFalse(condVar, loop, _),
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  LT(_, boundVar, phiVar, ltVar),
  ISZERO(_, ltVar, condVar).

.decl VariableDefinedInLoopUsedAfter(loop: Block, variable: Variable, useStmt: Statement)
DEBUG_OUTPUT(VariableDefinedInLoopUsedAfter)
VariableDefinedInLoopUsedAfter(loop, var, useStmt):-
  StatementInStructuredLoop(defStmt, loop),
  Statement_Defines(defStmt, var, _),
  Statement_Uses(useStmt, var, _),
  Statement_Block(useStmt, useBlock),
  Dominates(loop, useBlock),
  !PHIStmtTwoUses(useStmt, _, var, _),
  !BlockInStructuredLoop(useBlock, loop).

VariableDefinedInLoopUsedAfter(loop, phiVar, useStmt):-
  WellFormedLoopInductionVariable(loop, _, [beforeLoopVar, inLoopVar]),
  PHIStmtTwoUses(_, beforeLoopVar, inLoopVar, phiVar),
  Statement_Uses(useStmt, phiVar, _),
  Statement_Block(useStmt, useBlock),
  Dominates(loop, useBlock),
  !BlockInStructuredLoop(useBlock, loop).