#include "tac-transformers/abstract_function_inliner.dl"
#include "memory_modeling/memory_modeling.dl"
#include "storage_modeling/storage_modeling.dl"

/**
  Inliner was designed as a component in order to be able to have
  sub-components with different inline candidate criteria and also
  be able to perform multiple rounds of inlining on a single run,
  avoiding redundant IO costs.

  To achieve the latter, the inliners should be self-contained.
  Implementing an AnalysisHelpInliner without using anything from
  the memory modeling would have to be based on weak heuristics so
  I (SL) decided to use them. Perhaps revisit if their use is proved
  to be too costly.
**/

.comp AnalysisHelpInliner : FunctionInliner {

  .override InlineCandidate
  // .output InlineCandidate, FunctionToInline, IsPublicFunction, FunctionIsInner, SafelyInlinableFunction

  .decl HighLevelStatement(stmt: Statement)
  DEBUG_OUTPUT(HighLevelStatement)
  HighLevelStatement(stmt):-
    Statement_Opcode(stmt, op),
    (
      op = "CALLPRIVATE";
      op = "CALL";
      op = "STATICCALL";
      op = "DELEGATECALL";
      op = "REVERT";
      op = "THROW";
      op = "SSTORE";
      op = "CREATE";
      op = "CREATE2"
    ).

  HighLevelStatement(stmt):-
    Analytics_NonModeledMSTORE(stmt);
    LOGStatement(stmt, _);
    StructStore(stmt, _, _, _);
    StructAllocation(stmt, _, _);
    ArrayAllocationInternal(stmt, _, _, _).

  HighLevelStatement(stmt):-
    ArrayStore(stmt, arrRep, _),
    !ConstArray_Contents(arrRep, _).

  HighLevelStatement(ret):-
    In_Statement_Opcode(ret, "RETURNPRIVATE"),
    In_Statement_Uses(ret, _, pos),
    pos >= 1.

  .decl Function_HighLevelStmts(fun: Function, numOfStmts: number)
  DEBUG_OUTPUT(Function_HighLevelStmts)
  Function_HighLevelStmts(fun, numOfStmts):-
    In_CallGraphEdge(_, fun),
    numOfStmts = count : { Statement_Function(stmt, fun), HighLevelStatement(stmt) }.

  InlineCandidate(fun, "VerySmall"):-
    In_CallGraphEdge(_, fun),
    Function_HighLevelStmts(fun, 1).

  // Functions that have a single high-level stmt and no actual returns
  // InlineCandidate(fun):-
  //   In_CallGraphEdge(_, fun),
  //   1 = count : { Statement_Function(stmt, fun), HighLevelStatement(stmt) },
  //   !In_FormalReturnArgs(fun, _, 0).

  /* Inline guards to help our analysis */
  InlineCandidate(fun, "WrapperMethod"):-
    (In_Statement_Opcode(callerOp, "CALLER"); In_Statement_Opcode(callerOp, "ORIGIN")),
    In_Statement_Defines(callerOp, sender, 0),
    LocalFlows(sender, formalRet),
    In_FormalReturnArgs(fun, formalRet, _).

.decl IsUtilFunc(fun: Function)
IsUtilFunc(fun):-
    (prefix = "abi_encode_";
    prefix = "calldata_";
    // prefix = "checked_";
    // don't want to inline checked arithmetic functions
    prefix = "extract_";
    prefix = "getter_";
    prefix = "mapping_index_";
    prefix = "modifier_";
    prefix = "read_from_storage_";
    prefix = "require_helper_";
    prefix = "update_storage_value_";
    prefix = "abi_decode";
    prefix = "increment_";
    prefix = "panic_error_";
    prefix = "revert_error_";
    prefix = "store_literal_"
    ),
    HighLevelFunctionName(fun, funName),
    prefix=substr(funName, 0, strlen(prefix)).

  InlineCandidate(fun, "Util"):-
    In_CallGraphEdge(_, fun),
    IsUtilFunc(fun).


  /* To detect some storage constructs breaking through functions */
  InlineCandidate(fun, "Storage1"):-
    (SHA3(_, _, _, var) ; Variable_Value(var, _)),
    LocalFlows(var, actualArg),
    In_ActualArgs(caller, actualArg, pos),
    In_CallGraphEdge(caller, fun),
    In_FormalArgs(fun, formalArg, pos),
    LocalFlows(formalArg, storeIndex),
    (SLOAD(_, storeIndex, _) ; SSTORE(_, storeIndex, _)).

  InlineCandidate(fun, "Storage2"):-
    (SHA3(_, _, _, var) ; Variable_Value(var, _)),
    LocalFlows(var, actualArg),
    In_ActualArgs(caller, actualArg, pos),
    In_CallGraphEdge(caller, fun),
    In_FormalArgs(fun, formalArg, pos),
    LocalFlows(formalArg, intermIndex),
    (SHA3_2ARG(_, _, intermIndex, def); SHA3_1ARG(_, intermIndex, def)),
    LocalFlows(def, storeIndex),
    (SLOAD(_, storeIndex, _) ; SSTORE(_, storeIndex, _)).

  InlineCandidate(fun, "Storage3"):-
    // (SHA3_2ARG(_, _, _, def); SHA3_1ARG(_, _, def)),
    // LocalFlows(def, intermIndex),
    // using internal storage modeling predicate here
    // to get higher coverage
    Variable_StorageIndex(intermIndex, _),
    In_FormalReturnArgs(fun, intermIndex, pos),
    In_CallGraphEdge(caller, fun),
    In_ActualReturnArgs(caller, intermIndexCaller, pos),
    LocalFlows(intermIndexCaller, storeIndex),
    (SLOAD(_, storeIndex, _) ; SSTORE(_, storeIndex, _)).

  InlineCandidate(fun, "CallData1"):-
    //In_Variable_Value(actualArg, _),
    //In_ActualArgs(caller, actualArg, pos),
    //In_CallGraphEdge(caller, fun),
    In_FormalArgs(fun, formalArg, _),
    LocalFlowsExclPHI(formalArg, calldataIndex),
    CALLDATALOAD(_, calldataIndex, _).

  InlineCandidate(fun, "CallData2"):-
    CALLDATALOAD(cdl, calldataIndex, _),
    In_Variable_Value(calldataIndex, _),
    In_Statement_Function(cdl, fun),
    !IsPublicFunction(fun).

  // Less than 3 blocks
  InlineCandidate(fun, "Small"):-
    In_CallGraphEdge(_, fun),
    In_FormalArgs(fun, _, _),
    numOfBlocks = count : In_InFunction(_, fun),
    numOfBlocks < 3.

  // a function is only called once by a caller that makes a single call
  InlineCandidate(fun, "SingleCall"):-
    In_IsFunction(fun),
    1 = count : In_CallGraphEdge(_, fun),
    In_CallGraphEdge(caller, fun),
    In_InFunction(caller, callerFun),
    1 = count: {In_InFunction(inCaller, callerFun), In_CallGraphEdge(inCaller, _)},
    !IsPublicFunction(fun).

  InlineCandidate(fun, "ConsumeMemNoArgs"):-
    StatementConsumesMemoryNoArgs(memConsStmt),
    In_Statement_Function(memConsStmt, fun),
    Function_HighLevelStmts(fun, numOfStmts),
    numOfStmts < 20.

  InlineCandidate(fun, "Memory1"):-
    In_FormalArgs(fun, formalArg, _),
    LocalFlowsExclPHI(formalArg, loadAddr),
    MLOAD(_, loadAddr, loaded),
    ( LocalFlowsExclPHI(loaded, formalRet);
      LocalFlowsExclPHI(formalArg, formalRet)),
    In_FormalReturnArgs(fun, formalRet, _),
    !Struct_WordWidth(formalArg, _),
    // !Struct_WordWidth(formalRet, _),
    !VarIsArray(formalArg, _).

  // aimed to catch patterns that compute memory allocation bytes inside a function
  InlineCandidate(fun, "Memory2"):-
    In_FormalArgs(fun, formalArg, _),
    In_FormalReturnArgs(fun, formalRet, index),
    LocalFlowsExclPHI(formalArg, formalRet),
    In_CallGraphEdge(caller, fun),
    In_ActualReturnArgs(caller, actualRet, index),
    LocalFlowsExclPHI(actualRet, bumpVar),
    MSTORE(mstore, _, bumpVar),
    MSTOREFreePtr(mstore).

  InlineCandidate(fun, "Memory3"):-
    MLOADFreePtr_To(_, loadedAddr),
    In_FormalReturnArgs(fun, loadedAddr, _),
    !Struct_WordWidth(loadedAddr, _),
    !VarIsArray(loadedAddr, _).

  /**
    If an arg passed to a function is always the free mem pointer and never a high-level
    memory structure, we inline it as it's likely an allocation split in half.
  */
  InlineCandidate(fun, "Memory4"):-
    CallArgIsNonModeledMemObject(_, fun, argNum),
    count: CallArgIsNonModeledMemObject(_, fun, argNum) = count: In_CallGraphEdge(_, fun).

  .decl CallArgIsNonModeledMemObject(caller: Block, callee: Function, argNum: number)
  CallArgIsNonModeledMemObject(caller, fun, argNum):-
    MLOADFreePtr_To(_, loadedAddr),
    In_ActualArgs(caller, loadedAddr, argNum),
    In_CallGraphEdge(caller, fun),
    !Struct_WordWidth(loadedAddr, _),
    !VarIsArray(loadedAddr, _).

  InlineCandidate(fun, "Memory5"):-
    In_FormalArgs(fun, formalArg, _),
    LocalFlowsExclPHI(formalArg, storeAddr),
    MSTORE(_, storeAddr, _),
    !Struct_WordWidth(formalArg, _),
    !VarIsArray(formalArg, _).

  .decl FunctionContainsExternalCall(fun:Function)

  FunctionContainsExternalCall(fun):-
    (In_Statement_Opcode(callStmt, "CALL"); In_Statement_Opcode(callStmt, "STATICCALL"); In_Statement_Opcode(callStmt, "DELEGATECALL")),
    In_Statement_Function(callStmt, fun).

  InlineCandidate(fun, "ReturnDataNoCall"):-
    (In_Statement_Opcode(returnDataStmt, "RETURNDATASIZE"); In_Statement_Opcode(returnDataStmt, "RETURNDATACOPY")),
    In_Statement_Function(returnDataStmt, fun),
    !FunctionContainsExternalCall(fun).

  .decl FunctionContainsMemConsStmt(fun:Function)

  FunctionContainsMemConsStmt(fun):-
    StatementUsesMemory(stmt,_),
    In_Statement_Function(stmt, fun).

  InlineCandidate(fun, "MemoryLoop"):-
    MemoryCopyLoop(memLoop, _, _),
    In_InFunction(memLoop, fun),
    !FunctionContainsMemConsStmt(fun).
}

.init inliner = AnalysisHelpInliner

.decl NeedsMoreInlining(fun:Function)
.output NeedsMoreInlining

NeedsMoreInlining(fun):-
  inliner.InlineCandidate(fun, _),
  inliner.SafelyInlinableFunction(fun),
  !inliner.FunctionToInline(fun),
  !IsPublicFunction(fun).

inliner.In_Statement_Opcode(stmt, op):- Statement_Opcode(stmt, op).
inliner.In_IsStatement(stmt):-IsStatement(stmt).
inliner.In_Statement_Block(stmt, block):-Statement_Block(stmt, block).
inliner.In_Variable_Value(var, value):-Variable_Value(var, value).
inliner.In_Variable_BlockValue(var, value):-Variable_BlockValue(var, value).
inliner.In_LocalBlockEdge(block, nextBlock):-LocalBlockEdge(block, nextBlock).
inliner.In_FallthroughEdge(block, nextBlock):- FallthroughEdge(block, nextBlock).
inliner.In_CallGraphEdge(block, function):- CallGraphEdge(block, function).
inliner.In_FunctionCallReturn(block, function, return):- FunctionCallReturn(block, function, return).
inliner.In_IsFunction(func):- IsFunction(func).
inliner.In_Block_Gas(block, gas):- Block_Gas(block, gas).
inliner.In_Block_CodeChunkAccessed(block, chunk):- Block_CodeChunkAccessed(block, chunk).
inliner.In_Statement_OriginalStatement(stmt, original):- Statement_OriginalStatement(stmt, original).
inliner.In_Statement_OriginalStatementList(stmt, original):- Statement_OriginalStatementList(stmt, original).
inliner.In_Statement_InlineInfo(stmt, funList):- Statement_InlineInfo(stmt, funList).
inliner.In_OriginalStatement_Block(stmt, block):- OriginalStatement_Block(stmt, block).
inliner.In_FormalArgs(fn, a, pos):- FormalArgs(fn, a, pos).
inliner.In_Statement_Uses(stmt, var, i):- Statement_Uses(stmt, var, i).
inliner.In_Statement_Defines(stmt, var, n):- Statement_Defines(stmt, var, n).
inliner.In_Statement_Next(stmt, next):- Statement_Next(stmt, next).
inliner.In_FunctionEntry(block):- FunctionEntry(block).
inliner.In_InFunction(block, function):- InFunction(block, function).
inliner.In_ActualReturnArgs(caller, arg, pos):- ActualReturnArgs(caller, arg, pos).





.output inliner.Out_Statement_Opcode(IO="file", filename = "TAC_Op.csv", delimiter = "\t")
.output inliner.Out_IsStatement(IO="file", filename="TAC_Stmt.csv", delimiter="\t")
.output inliner.Out_Statement_Block(IO="file", filename="TAC_Block.csv", delimiter="\t")
.output inliner.Out_Variable_Value(IO="file", filename="TAC_Variable_Value.csv", delimiter="\t")
.output inliner.Out_Variable_BlockValue(IO="file", filename="TAC_Variable_BlockValue.csv", delimiter="\t")
.output inliner.Out_LocalBlockEdge(IO="file", filename="LocalBlockEdge.csv", delimiter="\t")
.output inliner.Out_FallthroughEdge(IO="file", filename="IRFallthroughEdge.csv", delimiter="\t")
.output inliner.Out_CallGraphEdge(IO="file", filename="IRFunctionCall.csv", delimiter="\t")
.output inliner.Out_FunctionCallReturn(IO="file", filename="IRFunctionCallReturn.csv", delimiter="\t")
.output inliner.Out_IsFunction(IO="file", filename="Function.csv", delimiter="\t")
.output inliner.Out_Block_Gas(IO="file", filename="TAC_Block_Gas.csv", delimiter="\t")
.output inliner.Out_Block_CodeChunkAccessed(IO="file", filename="TAC_Block_CodeChunkAccessed.csv", delimiter="\t")
.output inliner.Out_Statement_OriginalStatement(IO="file", filename="TAC_Statement_OriginalStatement.csv", delimiter="\t")
.output inliner.Out_Statement_OriginalStatementList(IO="file", filename="TAC_Statement_OriginalStatementList.csv", delimiter="\t")
.output inliner.Out_Statement_InlineInfo(IO="file", filename="TAC_Statement_InlineInfo.csv", delimiter="\t")
.output inliner.Out_OriginalStatement_Block(IO="file", filename="TAC_OriginalStatement_Block.csv", delimiter="\t")
.output inliner.Out_FormalArgs(IO="file", filename="FormalArgs.csv", delimiter="\t")
.output inliner.Out_Statement_Uses(IO="file", filename="TAC_Use.csv", delimiter="\t")
.output inliner.Out_Statement_Defines(IO="file", filename="TAC_Def.csv", delimiter="\t")
.output inliner.Out_Statement_Next(IO="file", filename="TAC_Statement_Next.csv", delimiter="\t")
.output inliner.Out_FunctionEntry(IO="file", filename="IRFunctionEntry.csv", delimiter="\t")
.output inliner.Out_InFunction(IO="file", filename="InFunction.csv", delimiter="\t")
.output inliner.Out_ActualReturnArgs(IO="file", filename="ActualReturnArgs.csv", delimiter="\t")
