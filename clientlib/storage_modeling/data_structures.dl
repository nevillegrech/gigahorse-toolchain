
/***
 New Storage Model
 Aims to support arbituary nested data structures
***/

/**
  `StorageIndex` contains information on the data structure used as well as the variables
  used to index/access it, representing the actual low-level index flowing to `SSTORE`/`SLOAD` stmts.
*/
.type StorageIndex = ConstantIndex {value: Value}
                    | ArrayAccessIndex {parIndex: StorageIndex, indexVar: Variable}
                    | ArrayDataStartIndex {parIndex: StorageIndex}
                    | MappingAccessIndex {parIndex: StorageIndex, keyVar: Variable}
                    | OffsetIndex {parIndex: StorageIndex, offset: number}

/**
  `StorageConstruct` contains the information of `StorageIndex`, stripped of indexing/access vars
*/
.type StorageConstruct = Constant {value: Value}
                        | Array {parConstruct: StorageConstruct}
                        | Mapping {parConstruct: StorageConstruct}
                        | Offset {parConstruct: StorageConstruct, offset: number}
                        | Variable {construct: StorageConstruct}
                        | TightlyPackedVariable {construct: StorageConstruct, byteLow: number, byteHigh: number}

/**
  Syntactic translation of `StorageIndex` to `StorageConstruct`
*/
.decl StorageIndex_StorageConstruct(index: StorageIndex, construct: StorageConstruct) //btree_delete

/**
  Contais all __possible__ storage indexes.
*/
.decl Variable_StorageIndex(var: Variable, construct: StorageIndex)

// Storage indexes that end up flowing to `SSTORE`/`SLOAD` op
.decl ActualStorageIndex(index: StorageIndex)

.decl StorageIndex_ParentIndex(index: StorageIndex, parIndex: StorageIndex)

// Same as `StorageIndex_ParentIndex` but doesn't contain results where the child `index` is an `OffsetIndex`
.decl StorageIndex_ParentIndexExclOffset(index: StorageIndex, parIndex: StorageIndex)

// Transitive closure over the `StorageIndex_ParentIndex` relation
.decl StorageIndexPredecesor(index: StorageIndex, predIndex: StorageIndex)

// "Final" storage index: used in an `SSTORE`/`SLOAD` op and not to construct a more complex index
// Indexes in this relation can only be used directly to construct offset indexes
.decl LikelyVariableLoadingStorageIndex(index: StorageIndex)

// Construct is not used as a variable (i.e. is used as an array or mapping)
// Used to find the ones that are end-level variables
.decl NonVariableConstruct(cons: StorageConstruct)

.decl StorageIndex_HighLevelUses(index: StorageIndex, accessVar: Variable, offset: number, i: number, nestedness: number)

.decl IsStorageConstruct(cons: StorageConstruct)

// StorageConstruct is array or mapping
.decl IsDataStructureConstruct(cons: StorageConstruct)

// Number of elements the value of a data structure construct (Array or Mapping) has
.decl DataStructure_ElemNum(cons: StorageConstruct, elemNum: number)

// Data structure construct has a value (Mappings) or element (Arrays) that is a struct
.decl DataStructureValueIsStruct(cons: StorageConstruct, structID: symbol, elemNum: number)

// value type for mapping or element type for arrays
.decl DataStructure_ValueOrElementType(cons: StorageConstruct, type: symbol)

// Map `structID` to solidity-like struct definition `stringStruct`
.decl StructToString(structID: symbol, stringStruct: symbol)
.decl StructToStringUpTo(structID: symbol, stringStruct: symbol, upTo: number)

// Map tightly packed field in storage struct to solidity-like def used by `StructToString`
.decl PackedStructWordToString(structID: symbol, offset: number, stringRep: symbol)
.decl PackedStructWordToStringUpTo(structID: symbol, offset: number, stringRep: symbol, upToByte: number, upToIndex: number)

// Note: Can probably be unified with `StorageVariable_Type`
.decl DataStructure_Type(cons: StorageConstruct, type: symbol)
// Note: Can probably be unified with `DataStructure_Type`
.decl StorageVariable_Type(cons: StorageConstruct, type: symbol)

// Doesn't contain TightlyPackedVariable, maybe revisit
.decl StorageConstruct_ParentAndOffset(cons: StorageConstruct, parentCons: StorageConstruct, offset: number)

/**
  Maps `SSTORE` and `SLOAD` statements to the high-level information:
  - `kind` can be "ACCESS", "LENGTH", "GETDATASTART"
  - `index` can be used to get the high-level uses of the composite storage data structure accesses and writes
  - `construct` is the data structure that is being accessed/written to
*/
.decl StorageStmtToIndexAndConstruct(stmt: Statement, kind: symbol, index: StorageIndex, construct: StorageConstruct)

// Same as `StorageStmtToIndexAndConstruct`, populated before the tight packing component
.decl InitialStorageStmtToIndexAndConstruct(stmt: Statement, kind: symbol, index: StorageIndex, construct: StorageConstruct)

/**
  Information is containted in the previous relation (`StorageStmtToIndexAndConstruct`).
  Maybe we don't need it, maybe we need more of these?
*/
.decl ArrayLengthStatement(stmt: Statement, index: StorageIndex, cons: StorageConstruct)


DEBUG_OUTPUT(StorageIndex_StorageConstruct)
DEBUG_OUTPUT(ActualStorageIndex)
DEBUG_OUTPUT(LikelyVariableLoadingStorageIndex)
DEBUG_OUTPUT(NonVariableConstruct)
DEBUG_OUTPUT(Variable_StorageIndex)
DEBUG_OUTPUT(IsStorageConstruct)
DEBUG_OUTPUT(StorageConstruct_ParentAndOffset)
DEBUG_OUTPUT(DataStructure_ElemNum)
DEBUG_OUTPUT(DataStructureValueIsStruct)
DEBUG_OUTPUT(DataStructure_Type)
DEBUG_OUTPUT(DataStructure_ValueOrElementType)
DEBUG_OUTPUT(StorageVariable_Type)
DEBUG_OUTPUT(StorageIndex_HighLevelUses)
DEBUG_OUTPUT(StorageIndex_ParentIndex)
DEBUG_OUTPUT(StorageStmtToIndexAndConstruct)
DEBUG_OUTPUT(InitialStorageStmtToIndexAndConstruct)
DEBUG_OUTPUT(ArrayLengthStatement)
DEBUG_OUTPUT(StructToStringUpTo)
DEBUG_OUTPUT(PackedStructWordToStringUpTo)

Variable_StorageIndex(var, $ConstantIndex(val)):-
  Variable_Value(var, val),
  !StorageConstantToHash(_, _, val). // May become restrictive in very rare cases, will reconsider

// If its the hash of a constant used in an SSTORE/SLOAD operation, its an array access
Variable_StorageIndex(var, $ArrayDataStartIndex($ConstantIndex(val))):-
  Variable_Value(var, hash),
  StorageConstantToHash(val, _, hash).

// REVIEW: Addition does not handle ArrayDataStartIndex
Variable_StorageIndex(def, $OffsetIndex(index, @hex_to_number(const))):-
  Variable_StorageIndex(var, index),
  (index = $ArrayAccessIndex(parentIndex, indexVar); index = $MappingAccessIndex(parentIndex, indexVar)),
  parentIndex = parentIndex, indexVar = indexVar, // suppress warning
  ADDFix(_, var, constVar, def),
  Variable_Value(constVar, const),
  // ensure its a small integer
  "0x1" = @lt_256(const, "0xffff").

Variable_StorageIndex(def, $OffsetIndex(parentIndex, @hex_to_number(const) + oldOffset)):-
  Variable_StorageIndex(var, $OffsetIndex(parentIndex, oldOffset)),
  ADDFix(_, var, constVar, def),
  Variable_Value(constVar, const),
  // ensure its a small integer
  "0x1" = @lt_256(const, "0xffff").

Variable_StorageIndex(def, $MappingAccessIndex(parentIndex, arg1)):-
  Variable_StorageIndex(arg2, parentIndex),
  SHA3_2ARG(_, arg1, arg2, def).

Variable_StorageIndex(def, $MappingAccessIndex(parentIndex, as(arg1, Variable))):-
  Variable_StorageIndex(arg2, parentIndex),
  SHA3_2ARGWithArray(_, arg1, arg2, def).

Variable_StorageIndex(shaDef, $ArrayDataStartIndex(parentIndex)):-
  Variable_StorageIndex(arg, parentIndex),
  SHA3_1ARG(_, arg, shaDef).

Variable_StorageIndex(def, $ArrayAccessIndex(parentIndex, indexVar)):-
  Variable_StorageIndex(var, $ArrayDataStartIndex(parentIndex)),
  ADDFix(_, var, indexTimesConst, def),
  VarTimesConstantNoIdentity(indexVar, _, indexTimesConst).

Variable_StorageIndex(def, $ArrayAccessIndex(parentIndex, indexVar)):-
  Variable_StorageIndex(var, $ArrayDataStartIndex(parentIndex)),
  ADDFix(_, var, indexVar, def),
  !VarTimesConstantNoIdentity(_, _, indexVar).

/**
  Hacky way to model optimize .pop() pattern:
  indexVar will point to the array length although I don't enforce it currently
  `arrayAccess[index] + uint.max` ==== `arrayAccess[index + uint.max]`
  if `index + uint.max` is already computed
*/
Variable_StorageIndex(def, $ArrayAccessIndex(parentIndex, newIndexVar)):-
  Variable_StorageIndex(preAdd, $ArrayAccessIndex(parentIndex, indexVar)),
  ADDFix(_, preAdd, minusOneConstVar1, def),
  Variable_Value(minusOneConstVar1, "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),
  ADDFix(_, indexVar, minusOneConstVar2, newIndexVar),
  Variable_Value(minusOneConstVar2, "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff").


StorageIndex_StorageConstruct($ConstantIndex(val), $Constant(val)):-
  ActualStorageIndex($ConstantIndex(val)).

StorageIndex_StorageConstruct($ArrayAccessIndex(parentIndex, highLevelIndex), $Array(parentCons)):-
  ActualStorageIndex($ArrayAccessIndex(parentIndex, highLevelIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($ArrayDataStartIndex(parentIndex), $Array(parentCons)):-
  ActualStorageIndex($ArrayDataStartIndex(parentIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($MappingAccessIndex(parentIndex, highLevelIndex), $Mapping(parentCons)):-
  ActualStorageIndex($MappingAccessIndex(parentIndex, highLevelIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($OffsetIndex(parentIndex, offset), $Offset(parentCons, offset)):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)), offset != 0,
  StorageIndex_StorageConstruct(parentIndex, parentCons).

/**
  We're treating 0 differently to avoid ambiguity between cons+0 and cons
  Otherwise we'd have to normalize the results after all created constructs are created.
*/
StorageIndex_StorageConstruct($OffsetIndex(parentIndex, 0), parentCons):-
  ActualStorageIndex($OffsetIndex(parentIndex, 0)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

ActualStorageIndex(index):-
  Variable_StorageIndex(var, index),
  StorageAccessOp(_, var).

ActualStorageIndex(index):-
  PHITrans(var, phiVar),
  Variable_StorageIndex(var, index),
  StorageAccessOp(_, phiVar).

StorageIndex_ParentIndex(index, parentIndex):-
  ActualStorageIndex(index),
  (
    (index = $ArrayAccessIndex(parentIndex, indexVar), indexVar = indexVar); // suppress warning
    (index = $ArrayDataStartIndex(parentIndex));
    (index = $MappingAccessIndex(parentIndex, indexVar), indexVar = indexVar); // suppress warning
    (index = $OffsetIndex(parentIndex, offset), offset = offset) // suppress warning
  ).

StorageIndex_ParentIndexExclOffset(index, parentIndex):-
  ActualStorageIndex(index),
  (
    (index = $ArrayAccessIndex(parentIndex, indexVar), indexVar = indexVar); // suppress warning
    (index = $ArrayDataStartIndex(parentIndex));
    (index = $MappingAccessIndex(parentIndex, indexVar), indexVar = indexVar) // suppress warning
    // commenting this out for now, helps some cases but is not right
    // ;(index = $OffsetIndex(parentIndex, offset), offset > 0) // suppress warning
  ).


StorageIndexPredecesor(index, index):-
  StorageIndex_ParentIndex(index, _);
  StorageIndex_ParentIndex(_, index).

StorageIndexPredecesor(index, predIndex):-
  StorageIndex_ParentIndex(index, predIndex).

StorageIndexPredecesor(index, predIndex):-
  StorageIndex_ParentIndex(index, parentIndex),
  StorageIndexPredecesor(parentIndex, predIndex).

// Ensure an index is not used as a parent for anything other than an offset
// REVISIT
LikelyVariableLoadingStorageIndex(index):-
  ActualStorageIndex(index),
  !StorageIndex_ParentIndexExclOffset(_, index).

// Goes against our logic, allows conflicts due to bad decompilation
// LikelyVariableLoadingStorageIndex(index):-
//   ActualStorageIndex(index),
//   StorageIndex_ParentIndexExclOffset($MappingAccessIndex(index, _), index).

ActualStorageIndex(parentIndex):-
  ActualStorageIndex(index),
  StorageIndex_ParentIndex(index, parentIndex).

StorageIndex_HighLevelUses(index, accessVar, 0, 0, 1):-
  ActualStorageIndex(index),
  (index = $ArrayAccessIndex($ConstantIndex(const), accessVar); index = $MappingAccessIndex($ConstantIndex(const), accessVar)),
  const = const.

StorageIndex_HighLevelUses(index, otherVar, prevOffset, i, prevNestedness + 1),
StorageIndex_HighLevelUses(index, accessVar, 0, prevNestedness, prevNestedness + 1):-
  ActualStorageIndex(index),
  (index = $ArrayAccessIndex(parIndex, accessVar); index = $MappingAccessIndex(parIndex, accessVar)),
  StorageIndex_HighLevelUses(parIndex, otherVar, prevOffset, i, prevNestedness).

StorageIndex_HighLevelUses($OffsetIndex(parentIndex, offset), accessVar, prevOffset, i, prevNestedness):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, prevOffset, i, prevNestedness),
  i < prevNestedness - 1.

StorageIndex_HighLevelUses($OffsetIndex(parentIndex, offset), accessVar, offset, nestedness - 1, nestedness):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, 0, nestedness - 1, nestedness).

// Don't think we need anything else here. May be wrong.
StorageIndex_HighLevelUses($ArrayDataStartIndex(parentIndex), accessVar, prevOffset, i, prevNestedness):-
  ActualStorageIndex($ArrayDataStartIndex(parentIndex)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, prevOffset, i, prevNestedness).

// StorageIndex_HighLevelUses(index, accessVar, i, prevNestedness + 1):-
//   ActualStorageIndex(index),
//   StorageIndex_ParentIndex(index, parentIndex),
//   StorageIndex_HighLevelUses(parentIndex, accessVar, i, prevNestedness).

NonVariableConstruct(parentCons):-
  ActualStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons)).

IsStorageConstruct($Variable(cons)):-
  LikelyVariableLoadingStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  !NonVariableConstruct(cons).

IsStorageConstruct(cons),
IsDataStructureConstruct(cons):-
  ActualStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons)), // filter intermediate constructs
  parentCons = parentCons. // suppress warning

StorageConstruct_ParentAndOffset(cons, paparentCons, offset):-
  IsStorageConstruct(cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons); cons = $Variable(parentCons)),
  parentCons = $Offset(paparentCons, offset),
  offset = offset. // suppress warning

StorageConstruct_ParentAndOffset(cons, parentCons, 0):-
  IsStorageConstruct(cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons); cons = $Variable(parentCons)),
  (parentCons = $Array(paparentCons) ; parentCons = $Mapping(paparentCons); parentCons = $Variable(paparentCons)),
  paparentCons = paparentCons. // suppress warning

DataStructure_ElemNum(cons, elemNum):-
  IsDataStructureConstruct(cons),
  elemNum = count : StorageConstruct_ParentAndOffset(_, cons, _).

DataStructureValueIsStruct(cons, cat("struct_", to_string(ord(cons))), elemNum):-
  DataStructure_ElemNum(cons, elemNum),
  elemNum > 1.

DataStructureValueIsStruct(cons, cat("struct_", to_string(ord(cons))), 1):-
  DataStructure_ElemNum(cons, 1),
  StorageVariablePacksNVars($Variable(cons), _).

StructToStringUpTo(structID, cat("struct ", cat(structID, cat(" { ", decl))), 0):-
  DataStructureValueIsStruct(cons, structID, _),
  StorageConstruct_ParentAndOffset(child, cons, 0),
  (
    (
      (StorageVariable_Type(child, type); DataStructure_Type(child, type)),
      decl = cat(type, " field0;")
    )
  ;
  PackedStructWordToString(structID, 0, decl)).

StructToStringUpTo(structID, cat(prev, cat(" ", decl)), i + 1):-
  DataStructureValueIsStruct(cons, structID, _),
  StructToStringUpTo(structID, prev, i),
  StorageConstruct_ParentAndOffset(child, cons, i + 1),
  (
    (
      (StorageVariable_Type(child, type); DataStructure_Type(child, type)),
      name = SIMPLE_FIELD(i + 1),
      decl = cat(type, cat(" ", cat(name, ";")))
    )
  ;
  PackedStructWordToString(structID, i + 1, decl)).

StructToString(structID, cat(prev, " }")):-
  DataStructureValueIsStruct(_, structID, elemNum),
  StructToStringUpTo(structID, prev, elemNum - 1).

PackedStructWordToStringUpTo(structID, offset, cat(type, cat(" ", cat(varName, ";"))), byteHigh, 0):-
  DataStructureValueIsStruct(cons, structID, _),
  StorageConstruct_ParentAndOffset(child, cons, offset),
  StorageVariablePacksNVars(child, _),
  ProcessedStorageVariable(child, $TightlyPackedVariable(para, 0, byteHigh)),
  StorageVariable_Type($TightlyPackedVariable(para, 0, byteHigh), type),
  varName = PACKED_FIELD(offset, 0, byteHigh).

PackedStructWordToStringUpTo(structID, offset, cat(prevStr, cat(" ", decl)), byteHigh, i + 1):-
  DataStructureValueIsStruct(cons, structID, _),
  StorageConstruct_ParentAndOffset(child, cons, offset),
  PackedStructWordToStringUpTo(structID, offset, prevStr, prevByteHigh, i),
  StorageVariablePacksNVars(child, _),
  ProcessedStorageVariable(child, $TightlyPackedVariable(para, prevByteHigh + 1, byteHigh)),
  StorageVariable_Type($TightlyPackedVariable(para, prevByteHigh + 1, byteHigh), type),
  varName = PACKED_FIELD(offset, prevByteHigh + 1, byteHigh),
  decl = cat(type, cat(" ", cat(varName, ";"))).

PackedStructWordToString(structID, offset, stringRep):-
  DataStructureValueIsStruct(cons, structID, _),
  StorageConstruct_ParentAndOffset(child, cons, offset),
  StorageVariablePacksNVars(child, n),
  PackedStructWordToStringUpTo(structID, offset, stringRep, _, n - 1).

// Simple value type
DataStructure_ValueOrElementType(cons, type):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset($Variable(cons), cons, 0),
  StorageVariable_Type($Variable(cons), type).

// Not sure if needed, will experiment
// DataStructure_ValueOrElementType(cons, varType):-
//   DataStructure_ElemNum(cons, 1),
//   StorageConstruct_ParentAndOffset($Variable(cons1), cons, 0), cons1 = cons1,
//   StorageVariable_Type($Variable(cons1), varType).

// Struct (single word (packed) or multi word)
DataStructure_ValueOrElementType(cons, structID):-
  DataStructureValueIsStruct(cons, structID, _).

// Nested case (mapping of mappings, 2d array, etc)
DataStructure_ValueOrElementType(cons, type):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset(child, cons, 0),
  DataStructure_Type(child, type).

DataStructure_Type($Mapping(parentCons), cat("mapping (uint256 => ", cat(type, ")"))):-
  DataStructure_ValueOrElementType($Mapping(parentCons), type).

DataStructure_Type($Array(parentCons), cat(type, "[]")):-
  DataStructure_ValueOrElementType($Array(parentCons), type).

StorageVariable_Type(var, "uint256"):-
  IsStorageConstruct(var),
  var = $Variable(cons), cons = cons,
  ProcessedStorageVariable(var, var).

StorageVariable_Type($TightlyPackedVariable(cons, byteLow, byteHigh), type):-
  ProcessedStorageVariable(_, $TightlyPackedVariable(cons, byteLow, byteHigh)),
  !SpecialStorageVariableType($TightlyPackedVariable(cons, byteLow, byteHigh), _),
  widthBytes = 1 + byteHigh - byteLow,
  type = cat("uint", to_string(widthBytes * 8)).

StorageVariable_Type($TightlyPackedVariable(cons, byteLow, byteHigh), type):-
  ProcessedStorageVariable(_, $TightlyPackedVariable(cons, byteLow, byteHigh)),
  SpecialStorageVariableType($TightlyPackedVariable(cons, byteLow, byteHigh), type).

StorageVariable_Type(var, type):-
  StorageVariable_Type(packedVar, type),
  ProcessedStorageVariable(var, packedVar),
  IsStorageConstruct(var),
  1 = count: ProcessedStorageVariable(var, _).


// // Disable general rule for now
// StorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $Variable(cons)):-
//   LikelyVariableLoadingStorageIndex(index),
//   StorageIndex_StorageConstruct(index, cons),
//   PHITrans(var, phiVar),
//   Variable_StorageIndex(var, index),
//   StorageAccessOp(stmt, phiVar).

InitialStorageStmtToIndexAndConstruct(stmt, "GETDATASTART", $ArrayDataStartIndex(parIndex), cons):-
  LikelyVariableLoadingStorageIndex($ArrayDataStartIndex(parIndex)),
  StorageIndex_StorageConstruct($ArrayDataStartIndex(parIndex), cons),
  Variable_StorageIndex(var, $ArrayDataStartIndex(parIndex)),
  PHITrans(var, phiVar),
  StorageAccessOp(_, phiVar),
  Statement_Defines(stmt, var, _).

InitialStorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $Variable(cons)):-
  LikelyVariableLoadingStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  Variable_StorageIndex(var, index),
  StorageAccessOp(stmt, var).

InitialStorageStmtToIndexAndConstruct(stmt, "LENGTH", index, $Array(cons)),
ArrayLengthStatement(stmt, index, $Array(cons)):-
  StorageAccessOp(stmt, var),
  Variable_StorageIndex(var, index),
  ActualStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  IsStorageConstruct($Array(cons)).

// Compute `StorageStmtToIndexAndConstruct` after we infer packed variables

StorageStmtToIndexAndConstruct(stmt, "GETDATASTART", $ArrayDataStartIndex(parIndex), cons):-
  InitialStorageStmtToIndexAndConstruct(stmt, "GETDATASTART", $ArrayDataStartIndex(parIndex), cons).

StorageStmtToIndexAndConstruct(stmt, "LENGTH", index, $Array(cons)):-
  InitialStorageStmtToIndexAndConstruct(stmt, "LENGTH", index, $Array(cons)).

StorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $Variable(cons)):-
  LikelyVariableLoadingStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  Variable_StorageIndex(var, index),
  StorageAccessOp(stmt, var),
  ProcessedStorageVariable($Variable(cons), $Variable(cons)).

StorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $TightlyPackedVariable(cons, low, high)):-
  LikelyVariableLoadingStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  Variable_StorageIndex(indexVar, index),
  StorageAccessOp(srcLoad, indexVar),
  VarHoldsBytesOfStorVarFinal(_, _, $Variable(cons), low, high),
  VarHoldsBytesOfStorVar(var, srcLoad, $Variable(cons), low, high),
  Statement_Defines(stmt, var, _),
  ProcessedStorageVariable($Variable(cons), $TightlyPackedVariable(cons, low, high)).

StorageStmtToIndexAndConstruct(store, "ACCESS", index, $TightlyPackedVariable(cons, low, high)):-
  LikelyVariableLoadingStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  Variable_StorageIndex(indexVar, index),
  StorageAccessOp(store, indexVar),
  (VarWrittenToBytesOfStorVarFinal(_, store, $Variable(cons), low, high); ConstWrittenToBytesOfStorVar(_, _, store, _, $Variable(cons), low, high)),
  ProcessedStorageVariable($Variable(cons), $TightlyPackedVariable(cons, low, high)).

.decl StorageOffset_Type(offset: Value, type: symbol)

StorageOffset_Type(offset, type):-
  DataStructure_Type(cons, type),
  (cons = $Array(parentCons); cons = $Mapping(parentCons)),
  parentCons = $Constant(offset).


.decl BytesOrStringLength(storVar:symbol, lenVar:Variable)

BytesOrStringLength(storVar, lenVar):-
  VarHoldsBytesOfStorVar(storLoad, _, $Variable($Constant(storVar)), 0, 31),
  (AND(_, storLoad, oneVar, lastBitVar) ; AND(_, oneVar, storLoad, lastBitVar)),
  Variable_Value(oneVar, "0x1"),
  ISZERO(_, lastBitVar, notLastBitVar),
  LShiftBytes(notLastBitVar, shifted, 1),
  SUB(_, shifted, otherOneVar, minOne),
  Variable_Value(otherOneVar, "0x1"),
  (AND(_, minOne, storLoad, almost) ; AND(_, storLoad, minOne, almost)),
  DIV(_, almost, twoVar, lenVar),
  Variable_Value(twoVar, "0x2").

/**
  A constant that flows to storage (possibly an array) to the result of its keccak256 hash.
  This is needed to model optimized array patterns produced by the `--via-ir` pipeline.
*/
.decl StorageConstantToHash(const: Value, zeroPaded: symbol, hash: Value)
DEBUG_OUTPUT(StorageConstantToHash)

StorageConstantToHash(const, zeroPaded, as(@hex_keccak_256(zeroPaded), Value)):-
  StorageAccessOp(_, var),
  BasicVariable_Value(var, const),
  cut = substr(const, 2, strlen(const) - 2),
  Helper_Zeros(zeros, 64 - strlen(cut)),
  zeroPaded = cat("0x", cat(zeros, cut)).

/**
  An `array` is deleted by setting its length to zero in `sstore` and then erasing all its contents in a following `loop`. 
*/
.decl ArrayDeleteOp(sstore: Statement, loop: Block, array: StorageConstruct)
DEBUG_OUTPUT(ArrayDeleteOp)

ArrayDeleteOp(sstore, loop, array):-
  SSTORE(sstore, _, zeroVar),
  Variable_Value(zeroVar, "0x0"),
  StorageStmtToIndexAndConstruct(sstore, "LENGTH", _, array),
  Statement_Block(sstore, block),
  ArrayDeleteLoop(loop, _, array),
  Dominates(block, loop).

/**
  `loop` goes over `array`, setting all its storage fields to zero via the `sstore` statement.
*/
.decl ArrayDeleteLoop(loop: Block, sstore: Statement, array: StorageConstruct)
DEBUG_OUTPUT(ArrayDeleteLoop)

ArrayDeleteLoop(loop, sstore, array):-
  WellFormedLoopInductionVariable(loop, phiVar, [beforeLoopVar, inLoopVar]),
  InductionVariableIncreasesByConst(loop, [beforeLoopVar, inLoopVar], 1),
  // iterator variable starts with value `array.datastart`
  Variable_StorageIndex(beforeLoopVar, $ArrayDataStartIndex(parIndex)),
  StorageIndex_StorageConstruct($ArrayDataStartIndex(parIndex), array),
  // bound by a var containing array.datastart + array.length
  InductionVariableUpperBoundVar(loop, [beforeLoopVar, inLoopVar], boundVar),
  ADDFix(_, arrayLenVar, arrayDataStartVar, boundVar),
  Variable_StorageIndex(arrayDataStartVar, $ArrayDataStartIndex(parIndex2)),
  StorageIndex_StorageConstruct($ArrayDataStartIndex(parIndex2), array),
  Statement_Defines(lenDefStmt, arrayLenVar, 0),
  StorageStmtToIndexAndConstruct(lenDefStmt, "LENGTH", _, array),
  SSTORE(sstore, phiVar, zeroVar),
  Variable_Value(zeroVar, "0x0").
