// Sadly, this cannot just inherit TransactionalContext, or PublicComponentContextSensitivity,
// or even VariableDepthContextSensitivity, because it needs to subtly change important
// aspects of each one! So it just replicates code. The changes are marked with "HERE"

.comp FinitePreciseContext <LocalAnalysis> : AbstractContextSensitivity <LocalAnalysis> {

  //
  // Much like VariableDepthContextSensitivity but need very different default depth
  // 
  .decl MaxContextDepth(sigHash: symbol, d: number)

  .decl InputMaxContextDepth(d: number)
  .input InputMaxContextDepth(filename="MaxContextDepth.csv")

  MaxContextDepth(sigHash, d) :-
    (local.PublicFunction(_, sigHash, _);
     sigHash = FUNCTION_SELECTOR_SIGHASH),
    InputMaxContextDepth(d).

  // HERE: much deeper
  MaxContextDepth(sigHash, 27) :-
    (local.PublicFunction(_, sigHash, _);
     sigHash = FUNCTION_SELECTOR_SIGHASH),
    !InputMaxContextDepth(_).


  //
  // Much like PublicComponentContextSensitivity but need to change truncation logic
  //
  .type PrivateContext = [block: Block, rest: PrivateContext]
  .type Context = [publicFun:symbol, pri: PrivateContext]

  .decl InitialPrivateContext(ctx: PrivateContext)
  // PrivateContextDepth replaces/enhances IsPrivateContext 
  .decl PrivateContextDepth(ctx: PrivateContext, depth: number)
  .decl DecomposePrivateContext(priCtx: PrivateContext, block: Block, rest: PrivateContext)
  .decl DropLast(ctx: PrivateContext, newCtx: PrivateContext)
  .output DropLast
  .decl TruncateContextIfNeeded(publicFun:symbol, ctx: PrivateContext, newCtx: PrivateContext)
  .decl DecomposeContext(ctx: Context, publicFun: symbol, private: PrivateContext)

  InitialPrivateContext(nil).

  InitialContext([FUNCTION_SELECTOR_SIGHASH, initialPrivateContext]) :-
    InitialPrivateContext(initialPrivateContext).

  DecomposeContext(ctx, publicFun, private):-
    ReachableContext(ctx, _), ctx = [publicFun, private].

  // Include in consideration all new contexts produced (and found reachable) by Merging, in the analysis logic
  DecomposeContext(ctx, publicFun, private):-
    ReachableContext(ctx, _), ctx = [publicFun, private].

  DecomposePrivateContext(private, block, rest):-
    DecomposeContext(_, _, private),
    private = [block, rest].

  // Also include all the sub-contexts we derive by dropping the last element
  DecomposePrivateContext(newCtx, block, rest):-
    DropLast(_, newCtx),
    newCtx = [block, rest].

  /// Useful as building blocks, for experimentation
  // .decl PrivateContextContainsElementNTimes(ctx: PrivateContext, block: Block, n: number)
  // PrivateContextContainsElementNTimes(nil, block, 0) :-
  //   local.PrivateFunctionCallOrReturn(block).
  // PrivateContextContainsElementNTimes(ctx, block, n) :-
  //   PrivateContextContainsElementNTimes(rest, block, n),
  //   DecomposePrivateContext(ctx, head, rest),
  //   head != block.
  //  .plan 1:(2,1)
  // PrivateContextContainsElementNTimes(ctx, block, n+1) :-
  //   PrivateContextContainsElementNTimes(rest, block, n),
  //   DecomposePrivateContext(ctx, block, rest),
  //   n < MAX_REPETITIONS_FOR_CONTEXT_ELEMENT.
  //  .plan 1:(2,1)

  // .decl NotPrivateContextContainsElement(ctx: PrivateContext, block: Block)
  // NotPrivateContextContainsElement(nil, block) :-
  //   Statement_Block(_, block).
  // NotPrivateContextContainsElement(ctx, block) :-
  //   NotPrivateContextContainsElement(rest, block),
  //   DecomposePrivateContext(ctx, head, rest),
  //   head != block.
  //  .plan 1:(2,1)

  // .decl PrivateContextContainsElement(ctx: PrivateContext, block: Block)
  // PrivateContextContainsElement(ctx, head) :-
  //   DecomposePrivateContext(ctx, head, _).
  // PrivateContextContainsElement(ctx, block) :-
  //   PrivateContextContainsElement(rest, block),
  //   DecomposePrivateContext(ctx, _, rest).
  //  .plan 1:(2,1)

  DropLast(ctx, nil):-
    DecomposePrivateContext(ctx, _, nil).

  DropLast(ctx, newCtx):-
    DecomposePrivateContext(ctx, block, rest),
    DropLast(rest, newRest),
    newCtx = [ block, newRest ].
    .plan 1:(2,1) 

  PrivateContextDepth(init, 0):-
    InitialPrivateContext(init).

  PrivateContextDepth(ctx, depth + 1):-
    DecomposePrivateContext(ctx, _, rest),
    PrivateContextDepth(rest, depth).
    .plan 1:(2,1)

  //// HERE: This is the key of the finite context: when it reaches the limit, does not go on
  // TruncateContextIfNeeded(pubFun, ctx, newCtx):-
  //   DecomposeContext(_, pubFun, ctx),
  //   PrivateContextDepth(ctx, maxDepth),
  //   MaxContextDepth(pubFun, maxDepth),
  //   DropLast(ctx, newCtx).
  //   .plan 1:(4,1,2,3)

  TruncateContextIfNeeded(pubFun, ctx, ctx):-
    DecomposeContext(_, pubFun, ctx),
    PrivateContextDepth(ctx, depth),
    MaxContextDepth(pubFun, maxDepth),
    depth < maxDepth.

  Context_PublicFunction(ctx, pubFun):-
    ReachableContext(ctx, _),
    ctx = [pubFun, callCtx],
    callCtx = callCtx.

  /**
    Public function jump case for MergeContext
  */

  #ifndef NO_PUBLIC_CONTEXT
  MergeContext(ctx, caller, ctx) :-
    ReachableContext(ctx, caller),
    local.PublicFunction(caller, sigHash, _),
    !MaxContextDepth(sigHash, -1),
    DecomposeContext(ctx, prevSigHash, _),
    prevSigHash != FUNCTION_SELECTOR_SIGHASH.
  .plan 1:(3,1,2)
  MergeContext(ctx, caller, newContext):-
    ReachableContext(ctx, caller),
    local.PublicFunction(caller, sigHash, _),
    !MaxContextDepth(sigHash, -1),
    DecomposeContext(ctx, prevSigHash, pri),
    prevSigHash = FUNCTION_SELECTOR_SIGHASH,
    newContext = [sigHash, pri].
  .plan 1:(3,1,2)
  #endif


  //
  // Much like TransactionalContext, only does not inherit from the same super-components,
  // instead redefines them as above.
  //
  

  // Trivial control flow case for when there is no function call
  // OR max context depth is zero
  // Split into two rules to add plan.
  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _, _),
    #endif
    !local.PrivateFunctionCallOrReturn(caller).

  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _, _),
    #endif
    DecomposeContext(ctx, pub, _),
    MaxContextDepth(pub, 0).
    .plan 1:(2,3,1)

  // Complex control flow case
  //// Default variant
  MergeContext(ctx, caller, [pub, newPrivateContext]):-
    ReachableContext(ctx, caller),
    local.PrivateFunctionCallOrReturn(caller),
    DecomposeContext(ctx, pub, pri),
    TruncateContextIfNeeded(pub, pri, cutDownPri),
    #ifndef NO_PUBLIC_CONTEXT
    !local.PublicFunction(caller, _, _),
    #endif
    newPrivateContext = [caller, cutDownPri].
    .plan 1:(3,1,2,4), 2:(4,3,1,2)

  // // Complex control flow case
  // //// Variant that distinguishes whether the context contains the block
  // //// If it doesn't:
  // MergeContext(ctx, caller, [pub, newPrivateContext]):-
  //   ReachableContext(ctx, caller),
  //   local.PrivateFunctionCallOrReturn(caller),
  //   DecomposeContext(ctx, pub, pri),
  //   TruncateContextIfNeeded(pub, pri, cutDownPri),
  //   #ifndef NO_PUBLIC_CONTEXT
  //   !local.PublicFunction(caller, _),
  //   #endif
  //   NotPrivateContextContainsElement(cutDownPri, caller),
  //   newPrivateContext = [caller, cutDownPri].
  //   .plan 1:(3,1,2,4,5), 2:(4,3,1,2,5)

  // //// If it does:
  // MergeContext(ctx, caller, ctx):-
  //   ReachableContext(ctx, caller),
  //   local.PrivateFunctionCallOrReturn(caller),
  //   DecomposeContext(ctx, pub, pri),
  //   TruncateContextIfNeeded(pub, pri, cutDownPri),
  //   #ifndef NO_PUBLIC_CONTEXT
  //   !local.PublicFunction(caller, _),
  //   #endif
  //   PrivateContextContainsElement(cutDownPri, caller).
  //   .plan 1:(3,1,2,4,5), 2:(4,3,1,2,5)

  // Helpers
  .decl PrivateContextContainsBlock(ctx: PrivateContext, blk: Block, index: number)
  .decl ContextContainsBlock(ctx: Context, blk: Block, index: number)
  .decl ContextContainsBlockTimes(ctx: Context, blk: Block, times: number)

  PrivateContextContainsBlock(priCtx, blk, 0):-
    DecomposePrivateContext(priCtx, blk, _).

  PrivateContextContainsBlock(priCtx, blk, i + 1):-
    DecomposePrivateContext(priCtx, _, rest),
    PrivateContextContainsBlock(rest, blk, i).

  ContextContainsBlock(ctx, blk, i):-
    DecomposeContext(ctx, _, priCtx),
    PrivateContextContainsBlock(priCtx, blk, i).

  ContextContainsBlockTimes(ctx, blk, times):-
    ContextContainsBlock(ctx, blk, _),
    times = count : ContextContainsBlock(ctx, blk, _).


}