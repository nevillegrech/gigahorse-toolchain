.comp TransactionalWithShrinkingContext <LocalAnalysis> : PublicComponentContextSensitivity <LocalAnalysis> {

  // Trivial control flow case for when there is no function call
  // OR max context depth is zero
  // Split into two rules to add plan.
  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    !local.PublicFunction(caller, _),
    !local.PrivateFunctionCallOrReturn(caller).

  MergeContext(ctx, caller, ctx):-
    ReachableContext(ctx, caller),
    !local.PublicFunction(caller, _),
    DecomposeContext(ctx, pub, _),
    MaxContextDepth(pub, 0).
    .plan 1:(2,3,1)


  .decl DecomposeAndTruncateIfNeeded(ctx: Context, publicFun: symbol, cutDownPri: PrivateContext)
  DecomposeAndTruncateIfNeeded(ctx, pub, cutDownAtEndPri) :-
    DecomposeContext(ctx, pub, pri),
    TruncateContextIfNeeded(pub, pri, cutDownAtEndPri).
   .plan 1:(2,1)


  // Complex control flow cases
  /// If a call -> append self (truncating end if needed)
  MergeContext(ctx, caller, [pub, newPrivateContext]):-
    ReachableContext(ctx, caller),
    local.PrivateFunctionCall(caller, _, _, _),
    DecomposeAndTruncateIfNeeded(ctx, pub, cutDownAtEndPri),
    !local.PublicFunction(caller, _),
    newPrivateContext = [caller, cutDownAtEndPri].
    .plan 1:(3,1,2)


  /// "NEW" variant
  // For a matching context element, the call needs to have pushed deepest in the stack
  // the continuation we are returning to, without also pushing the same continuation later.
  .decl CutToCaller(priCtx: PrivateContext, continuation: Block, newPriCtx: PrivateContext) overridable
  CutToCaller(priCtx, cont, newPriCtx) :-
    DecomposePrivateContext(priCtx, head, newPriCtx),
    local.PrivateFunctionCall(head, _, cont, cont).

  CutToCaller(priCtx, cont, newPriCtx) :-
    CutToCaller(nextPriCtx, cont, newPriCtx),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    !local.PrivateFunctionCall(head, _, cont, _).
    .plan 1:(2,1)

  .decl PossibleContinuationFromReturn(continuation: Block)
  PossibleContinuationFromReturn(continuation) :-
    MergeContextRequest(_, retBlock, continuation),
    PrivateFunctionReturn(retBlock).
    
  .decl NoCutToCaller(priCtx: PrivateContext, continuation: Block) overridable
  NoCutToCaller(initPriCtx, cont) :-
    PossibleContinuationFromReturn(cont),
    InitialPrivateContext(initPriCtx).

  NoCutToCaller(priCtx, cont) :-
    NoCutToCaller(nextPriCtx, cont),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    !local.PrivateFunctionCall(head, _, cont, cont).
    .plan 1:(2,1)

  NoCutToCaller(priCtx, cont) :-
    CutToCaller(nextPriCtx, cont, _),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    local.PrivateFunctionCall(head, _, cont, firstCont),
    cont != firstCont.
    .plan 1:(2,1,3)



  // if return, matching call exists -> drop stack head elements until matching call found, drop that too
  MergeContextResponse(ctx, block, cont, [pub, cutPri]):-
    MergeContextRequest(ctx, block, cont),
    PrivateFunctionReturn(block),
    DecomposeContext(ctx, pub, priCtx),
    !local.PublicFunction(block, _),
    CutToCaller(priCtx, cont, cutPri).
    .plan 1:(3,1,2,4), 2:(4,3,1,2)

  // if return and matching call doesn't exist -> push return
  MergeContextResponse(ctx, block, cont, [pub, newPrivateContext]):-
    MergeContextRequest(ctx, block, cont),
    PrivateFunctionReturn(block),
    DecomposeContext(ctx, pub, priCtx),
    DecomposeAndTruncateIfNeeded(ctx, pub, cutDownAtEndPri),
    NoCutToCaller(priCtx, cont),
    !local.PublicFunction(block, _),
    newPrivateContext = [block, cutDownAtEndPri].
    .plan 1:(3,1,2,4,5), 2:(4,3,1,2,5), 3:(5,3,1,2,4)


}

.comp AltTransactionalWithShrinkingContext <LocalAnalysis> : TransactionalWithShrinkingContext <LocalAnalysis> {

    /// "ORIGINAL" variant

  // For a matching context element, the call needs to have pushed the continuation
  // we are returning to, and no other continuation at all!
  .override CutToCaller

  CutToCaller(priCtx, cont, newPriCtx) :-
    DecomposePrivateContext(priCtx, head, newPriCtx),
    local.PrivateFunctionCall(head, _, cont, _),
    !local.MultiplePrivateFunctionCall(head).

  CutToCaller(priCtx, cont, newPriCtx) :-
    CutToCaller(nextPriCtx, cont, newPriCtx),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    !local.PrivateFunctionCall(head, _, cont, _).
    .plan 1:(2,1)
  
  .override NoCutToCaller
  
  NoCutToCaller(initPriCtx, cont) :-
    PossibleContinuationFromReturn(cont),
    InitialPrivateContext(initPriCtx).

  NoCutToCaller(priCtx, cont) :-
    NoCutToCaller(nextPriCtx, cont),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    !local.PrivateFunctionCall(head, _, cont, _).
    .plan 1:(2,1)

  NoCutToCaller(priCtx, cont) :-
    NoCutToCaller(nextPriCtx, cont),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    local.MultiplePrivateFunctionCall(head).
    .plan 1:(2,1,3)

  NoCutToCaller(priCtx, cont) :-
    CutToCaller(nextPriCtx, cont, _),
    DecomposePrivateContext(priCtx, head, nextPriCtx),
    local.PrivateFunctionCall(head, _, cont, _),
    local.MultiplePrivateFunctionCall(head).
    .plan 1:(2,1,3,4)


}