#pragma once

/**
  Component to perform an anscending sort of an input set.
*/
.comp AbstractAscendingSorter <Type> {
  .decl Input(id:Type)

  .decl InputToNumber(id:Type, idNum:number) overridable

  .decl IsLessThan(id1:Type, id2:Type)
  .decl IsLessThanNotNext(id1:Type, id2:Type)

  .decl Input_Next(prev:Type, next:Type)

  IsLessThan(id1, id2):-
    InputToNumber(id1, num1),
    InputToNumber(id2, num2),
    num1 < num2.

  IsLessThanNotNext(id1, id2):-
    IsLessThan(id1, id2),
    IsLessThan(id1, other),
    IsLessThan(other, id2).

  Input_Next(prev, next):-
    IsLessThan(prev, next),
    !IsLessThanNotNext(prev, next).
}

/**
  Sort using souffle's internal ordinal number.
  Useful when we just want to get any order.
*/
.comp OrdAscendingSorter <Type> : AbstractAscendingSorter <Type> {

  .override InputToNumber
  InputToNumber(id, ord(id)):-
    Input(id).
}

/**
  Component to perform an anscending sort of multiple input sets/domains.
*/
.comp AbstractAscendingMultiSorter <DomainType, Type> {
  .decl Input(domain: DomainType, id:Type)

  .decl InputToNumber(domain: DomainType, id:Type, idNum:number) overridable

  .decl IsLessThan(domain: DomainType, id1:Type, id2:Type)
  .decl IsLessThanNotNext(domain: DomainType, id1:Type, id2:Type)

  .decl Input_Next(domain: DomainType, prev:Type, next:Type)

  IsLessThan(dom, id1, id2):-
    InputToNumber(dom, id1, num1),
    InputToNumber(dom, id2, num2),
    num1 < num2.

  IsLessThanNotNext(dom, id1, id2):-
    IsLessThan(dom, id1, id2),
    IsLessThan(dom, id1, other),
    IsLessThan(dom, other, id2).

  Input_Next(dom, prev, next):-
    IsLessThan(dom, prev, next),
    !IsLessThanNotNext(dom, prev, next).
}

/**
  Sort using souffle's internal ordinal number.
  Useful when we just want to get any order.
*/
.comp OrdAscendingMultiSorter <DomainType, Type> : AbstractAscendingMultiSorter <DomainType, Type> {

  .override InputToNumber
  InputToNumber(dom, id, ord(id)):-
    Input(dom, id).
}