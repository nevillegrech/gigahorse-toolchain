// Fact loader. This file was generated by bin/generatefacts, do not edit

.decl STOP(stmt: Statement)
STOP(stmt) :- Statement_Opcode(stmt, "STOP").

.decl ADD(stmt: Statement)
ADD(stmt) :- Statement_Opcode(stmt, "ADD").

.decl MUL(stmt: Statement)
MUL(stmt) :- Statement_Opcode(stmt, "MUL").

.decl SUB(stmt: Statement)
SUB(stmt) :- Statement_Opcode(stmt, "SUB").

.decl DIV(stmt: Statement)
DIV(stmt) :- Statement_Opcode(stmt, "DIV").

.decl SDIV(stmt: Statement)
SDIV(stmt) :- Statement_Opcode(stmt, "SDIV").

.decl MOD(stmt: Statement)
MOD(stmt) :- Statement_Opcode(stmt, "MOD").

.decl SMOD(stmt: Statement)
SMOD(stmt) :- Statement_Opcode(stmt, "SMOD").

.decl ADDMOD(stmt: Statement)
ADDMOD(stmt) :- Statement_Opcode(stmt, "ADDMOD").

.decl MULMOD(stmt: Statement)
MULMOD(stmt) :- Statement_Opcode(stmt, "MULMOD").

.decl EXP(stmt: Statement)
EXP(stmt) :- Statement_Opcode(stmt, "EXP").

.decl SIGNEXTEND(stmt: Statement)
SIGNEXTEND(stmt) :- Statement_Opcode(stmt, "SIGNEXTEND").

.decl LT(stmt: Statement)
LT(stmt) :- Statement_Opcode(stmt, "LT").

.decl GT(stmt: Statement)
GT(stmt) :- Statement_Opcode(stmt, "GT").

.decl SLT(stmt: Statement)
SLT(stmt) :- Statement_Opcode(stmt, "SLT").

.decl SGT(stmt: Statement)
SGT(stmt) :- Statement_Opcode(stmt, "SGT").

.decl EQ(stmt: Statement)
EQ(stmt) :- Statement_Opcode(stmt, "EQ").

.decl ISZERO(stmt: Statement)
ISZERO(stmt) :- Statement_Opcode(stmt, "ISZERO").

.decl AND(stmt: Statement)
AND(stmt) :- Statement_Opcode(stmt, "AND").

.decl OR(stmt: Statement)
OR(stmt) :- Statement_Opcode(stmt, "OR").

.decl XOR(stmt: Statement)
XOR(stmt) :- Statement_Opcode(stmt, "XOR").

.decl NOT(stmt: Statement)
NOT(stmt) :- Statement_Opcode(stmt, "NOT").

.decl BYTE(stmt: Statement)
BYTE(stmt) :- Statement_Opcode(stmt, "BYTE").

.decl SHL(stmt: Statement)
SHL(stmt) :- Statement_Opcode(stmt, "SHL").

.decl SHR(stmt: Statement)
SHR(stmt) :- Statement_Opcode(stmt, "SHR").

.decl SAR(stmt: Statement)
SAR(stmt) :- Statement_Opcode(stmt, "SAR").

.decl SHA3(stmt: Statement)
SHA3(stmt) :- Statement_Opcode(stmt, "SHA3").

.decl ADDRESS(stmt: Statement)
ADDRESS(stmt) :- Statement_Opcode(stmt, "ADDRESS").

.decl BALANCE(stmt: Statement)
BALANCE(stmt) :- Statement_Opcode(stmt, "BALANCE").

.decl ORIGIN(stmt: Statement)
ORIGIN(stmt) :- Statement_Opcode(stmt, "ORIGIN").

.decl CALLER(stmt: Statement)
CALLER(stmt) :- Statement_Opcode(stmt, "CALLER").

.decl CALLVALUE(stmt: Statement)
CALLVALUE(stmt) :- Statement_Opcode(stmt, "CALLVALUE").

.decl CALLDATALOAD(stmt: Statement)
CALLDATALOAD(stmt) :- Statement_Opcode(stmt, "CALLDATALOAD").

.decl CALLDATASIZE(stmt: Statement)
CALLDATASIZE(stmt) :- Statement_Opcode(stmt, "CALLDATASIZE").

.decl CALLDATACOPY(stmt: Statement)
CALLDATACOPY(stmt) :- Statement_Opcode(stmt, "CALLDATACOPY").

.decl CODESIZE(stmt: Statement)
CODESIZE(stmt) :- Statement_Opcode(stmt, "CODESIZE").

.decl CODECOPY(stmt: Statement)
CODECOPY(stmt) :- Statement_Opcode(stmt, "CODECOPY").

.decl GASPRICE(stmt: Statement)
GASPRICE(stmt) :- Statement_Opcode(stmt, "GASPRICE").

.decl EXTCODESIZE(stmt: Statement)
EXTCODESIZE(stmt) :- Statement_Opcode(stmt, "EXTCODESIZE").

.decl EXTCODECOPY(stmt: Statement)
EXTCODECOPY(stmt) :- Statement_Opcode(stmt, "EXTCODECOPY").

.decl BLOCKHASH(stmt: Statement)
BLOCKHASH(stmt) :- Statement_Opcode(stmt, "BLOCKHASH").

.decl COINBASE(stmt: Statement)
COINBASE(stmt) :- Statement_Opcode(stmt, "COINBASE").

.decl TIMESTAMP(stmt: Statement)
TIMESTAMP(stmt) :- Statement_Opcode(stmt, "TIMESTAMP").

.decl NUMBER(stmt: Statement)
NUMBER(stmt) :- Statement_Opcode(stmt, "NUMBER").

.decl DIFFICULTY(stmt: Statement)
DIFFICULTY(stmt) :- Statement_Opcode(stmt, "DIFFICULTY").

.decl GASLIMIT(stmt: Statement)
GASLIMIT(stmt) :- Statement_Opcode(stmt, "GASLIMIT").

.decl BASEFEE(stmt: Statement)
BASEFEE(stmt) :- Statement_Opcode(stmt, "BASEFEE").

.decl BLOBHASH(stmt: Statement)
BLOBHASH(stmt) :- Statement_Opcode(stmt, "BLOBHASH").

.decl BLOBBASEFEE(stmt: Statement)
BLOBBASEFEE(stmt) :- Statement_Opcode(stmt, "BLOBBASEFEE").

.decl POP(stmt: Statement)
POP(stmt) :- Statement_Opcode(stmt, "POP").

.decl MLOAD(stmt: Statement)
MLOAD(stmt) :- Statement_Opcode(stmt, "MLOAD").

.decl MSTORE(stmt: Statement)
MSTORE(stmt) :- Statement_Opcode(stmt, "MSTORE").

.decl MSTORE8(stmt: Statement)
MSTORE8(stmt) :- Statement_Opcode(stmt, "MSTORE8").

.decl SLOAD(stmt: Statement)
SLOAD(stmt) :- Statement_Opcode(stmt, "SLOAD").

.decl SSTORE(stmt: Statement)
SSTORE(stmt) :- Statement_Opcode(stmt, "SSTORE").

.decl JUMP(stmt: Statement)
JUMP(stmt) :- Statement_Opcode(stmt, "JUMP").

.decl JUMPI(stmt: Statement)
JUMPI(stmt) :- Statement_Opcode(stmt, "JUMPI").

.decl PC(stmt: Statement)
PC(stmt) :- Statement_Opcode(stmt, "PC").

.decl MSIZE(stmt: Statement)
MSIZE(stmt) :- Statement_Opcode(stmt, "MSIZE").

.decl GAS(stmt: Statement)
GAS(stmt) :- Statement_Opcode(stmt, "GAS").

.decl JUMPDEST(stmt: Statement)
JUMPDEST(stmt) :- Statement_Opcode(stmt, "JUMPDEST").

.decl TLOAD(stmt: Statement)
TLOAD(stmt) :- Statement_Opcode(stmt, "TLOAD").

.decl TSTORE(stmt: Statement)
TSTORE(stmt) :- Statement_Opcode(stmt, "TSTORE").

.decl MCOPY(stmt: Statement)
MCOPY(stmt) :- Statement_Opcode(stmt, "MCOPY").

.decl PUSH0(stmt: Statement)
PUSH0(stmt) :- Statement_Opcode(stmt, "PUSH0").

.decl PUSH1(stmt: Statement, value: Value)
PUSH1(stmt, value) :- Statement_Opcode(stmt, "PUSH1"), PushValue(stmt, value).

.decl PUSH2(stmt: Statement, value: Value)
PUSH2(stmt, value) :- Statement_Opcode(stmt, "PUSH2"), PushValue(stmt, value).

.decl PUSH3(stmt: Statement, value: Value)
PUSH3(stmt, value) :- Statement_Opcode(stmt, "PUSH3"), PushValue(stmt, value).

.decl PUSH4(stmt: Statement, value: Value)
PUSH4(stmt, value) :- Statement_Opcode(stmt, "PUSH4"), PushValue(stmt, value).

.decl PUSH5(stmt: Statement, value: Value)
PUSH5(stmt, value) :- Statement_Opcode(stmt, "PUSH5"), PushValue(stmt, value).

.decl PUSH6(stmt: Statement, value: Value)
PUSH6(stmt, value) :- Statement_Opcode(stmt, "PUSH6"), PushValue(stmt, value).

.decl PUSH7(stmt: Statement, value: Value)
PUSH7(stmt, value) :- Statement_Opcode(stmt, "PUSH7"), PushValue(stmt, value).

.decl PUSH8(stmt: Statement, value: Value)
PUSH8(stmt, value) :- Statement_Opcode(stmt, "PUSH8"), PushValue(stmt, value).

.decl PUSH9(stmt: Statement, value: Value)
PUSH9(stmt, value) :- Statement_Opcode(stmt, "PUSH9"), PushValue(stmt, value).

.decl PUSH10(stmt: Statement, value: Value)
PUSH10(stmt, value) :- Statement_Opcode(stmt, "PUSH10"), PushValue(stmt, value).

.decl PUSH11(stmt: Statement, value: Value)
PUSH11(stmt, value) :- Statement_Opcode(stmt, "PUSH11"), PushValue(stmt, value).

.decl PUSH12(stmt: Statement, value: Value)
PUSH12(stmt, value) :- Statement_Opcode(stmt, "PUSH12"), PushValue(stmt, value).

.decl PUSH13(stmt: Statement, value: Value)
PUSH13(stmt, value) :- Statement_Opcode(stmt, "PUSH13"), PushValue(stmt, value).

.decl PUSH14(stmt: Statement, value: Value)
PUSH14(stmt, value) :- Statement_Opcode(stmt, "PUSH14"), PushValue(stmt, value).

.decl PUSH15(stmt: Statement, value: Value)
PUSH15(stmt, value) :- Statement_Opcode(stmt, "PUSH15"), PushValue(stmt, value).

.decl PUSH16(stmt: Statement, value: Value)
PUSH16(stmt, value) :- Statement_Opcode(stmt, "PUSH16"), PushValue(stmt, value).

.decl PUSH17(stmt: Statement, value: Value)
PUSH17(stmt, value) :- Statement_Opcode(stmt, "PUSH17"), PushValue(stmt, value).

.decl PUSH18(stmt: Statement, value: Value)
PUSH18(stmt, value) :- Statement_Opcode(stmt, "PUSH18"), PushValue(stmt, value).

.decl PUSH19(stmt: Statement, value: Value)
PUSH19(stmt, value) :- Statement_Opcode(stmt, "PUSH19"), PushValue(stmt, value).

.decl PUSH20(stmt: Statement, value: Value)
PUSH20(stmt, value) :- Statement_Opcode(stmt, "PUSH20"), PushValue(stmt, value).

.decl PUSH21(stmt: Statement, value: Value)
PUSH21(stmt, value) :- Statement_Opcode(stmt, "PUSH21"), PushValue(stmt, value).

.decl PUSH22(stmt: Statement, value: Value)
PUSH22(stmt, value) :- Statement_Opcode(stmt, "PUSH22"), PushValue(stmt, value).

.decl PUSH23(stmt: Statement, value: Value)
PUSH23(stmt, value) :- Statement_Opcode(stmt, "PUSH23"), PushValue(stmt, value).

.decl PUSH24(stmt: Statement, value: Value)
PUSH24(stmt, value) :- Statement_Opcode(stmt, "PUSH24"), PushValue(stmt, value).

.decl PUSH25(stmt: Statement, value: Value)
PUSH25(stmt, value) :- Statement_Opcode(stmt, "PUSH25"), PushValue(stmt, value).

.decl PUSH26(stmt: Statement, value: Value)
PUSH26(stmt, value) :- Statement_Opcode(stmt, "PUSH26"), PushValue(stmt, value).

.decl PUSH27(stmt: Statement, value: Value)
PUSH27(stmt, value) :- Statement_Opcode(stmt, "PUSH27"), PushValue(stmt, value).

.decl PUSH28(stmt: Statement, value: Value)
PUSH28(stmt, value) :- Statement_Opcode(stmt, "PUSH28"), PushValue(stmt, value).

.decl PUSH29(stmt: Statement, value: Value)
PUSH29(stmt, value) :- Statement_Opcode(stmt, "PUSH29"), PushValue(stmt, value).

.decl PUSH30(stmt: Statement, value: Value)
PUSH30(stmt, value) :- Statement_Opcode(stmt, "PUSH30"), PushValue(stmt, value).

.decl PUSH31(stmt: Statement, value: Value)
PUSH31(stmt, value) :- Statement_Opcode(stmt, "PUSH31"), PushValue(stmt, value).

.decl PUSH32(stmt: Statement, value: Value)
PUSH32(stmt, value) :- Statement_Opcode(stmt, "PUSH32"), PushValue(stmt, value).

.decl DUP1(stmt: Statement)
DUP1(stmt) :- Statement_Opcode(stmt, "DUP1").

.decl DUP2(stmt: Statement)
DUP2(stmt) :- Statement_Opcode(stmt, "DUP2").

.decl DUP3(stmt: Statement)
DUP3(stmt) :- Statement_Opcode(stmt, "DUP3").

.decl DUP4(stmt: Statement)
DUP4(stmt) :- Statement_Opcode(stmt, "DUP4").

.decl DUP5(stmt: Statement)
DUP5(stmt) :- Statement_Opcode(stmt, "DUP5").

.decl DUP6(stmt: Statement)
DUP6(stmt) :- Statement_Opcode(stmt, "DUP6").

.decl DUP7(stmt: Statement)
DUP7(stmt) :- Statement_Opcode(stmt, "DUP7").

.decl DUP8(stmt: Statement)
DUP8(stmt) :- Statement_Opcode(stmt, "DUP8").

.decl DUP9(stmt: Statement)
DUP9(stmt) :- Statement_Opcode(stmt, "DUP9").

.decl DUP10(stmt: Statement)
DUP10(stmt) :- Statement_Opcode(stmt, "DUP10").

.decl DUP11(stmt: Statement)
DUP11(stmt) :- Statement_Opcode(stmt, "DUP11").

.decl DUP12(stmt: Statement)
DUP12(stmt) :- Statement_Opcode(stmt, "DUP12").

.decl DUP13(stmt: Statement)
DUP13(stmt) :- Statement_Opcode(stmt, "DUP13").

.decl DUP14(stmt: Statement)
DUP14(stmt) :- Statement_Opcode(stmt, "DUP14").

.decl DUP15(stmt: Statement)
DUP15(stmt) :- Statement_Opcode(stmt, "DUP15").

.decl DUP16(stmt: Statement)
DUP16(stmt) :- Statement_Opcode(stmt, "DUP16").

.decl SWAP1(stmt: Statement)
SWAP1(stmt) :- Statement_Opcode(stmt, "SWAP1").

.decl SWAP2(stmt: Statement)
SWAP2(stmt) :- Statement_Opcode(stmt, "SWAP2").

.decl SWAP3(stmt: Statement)
SWAP3(stmt) :- Statement_Opcode(stmt, "SWAP3").

.decl SWAP4(stmt: Statement)
SWAP4(stmt) :- Statement_Opcode(stmt, "SWAP4").

.decl SWAP5(stmt: Statement)
SWAP5(stmt) :- Statement_Opcode(stmt, "SWAP5").

.decl SWAP6(stmt: Statement)
SWAP6(stmt) :- Statement_Opcode(stmt, "SWAP6").

.decl SWAP7(stmt: Statement)
SWAP7(stmt) :- Statement_Opcode(stmt, "SWAP7").

.decl SWAP8(stmt: Statement)
SWAP8(stmt) :- Statement_Opcode(stmt, "SWAP8").

.decl SWAP9(stmt: Statement)
SWAP9(stmt) :- Statement_Opcode(stmt, "SWAP9").

.decl SWAP10(stmt: Statement)
SWAP10(stmt) :- Statement_Opcode(stmt, "SWAP10").

.decl SWAP11(stmt: Statement)
SWAP11(stmt) :- Statement_Opcode(stmt, "SWAP11").

.decl SWAP12(stmt: Statement)
SWAP12(stmt) :- Statement_Opcode(stmt, "SWAP12").

.decl SWAP13(stmt: Statement)
SWAP13(stmt) :- Statement_Opcode(stmt, "SWAP13").

.decl SWAP14(stmt: Statement)
SWAP14(stmt) :- Statement_Opcode(stmt, "SWAP14").

.decl SWAP15(stmt: Statement)
SWAP15(stmt) :- Statement_Opcode(stmt, "SWAP15").

.decl SWAP16(stmt: Statement)
SWAP16(stmt) :- Statement_Opcode(stmt, "SWAP16").

.decl LOG0(stmt: Statement)
LOG0(stmt) :- Statement_Opcode(stmt, "LOG0").

.decl LOG1(stmt: Statement)
LOG1(stmt) :- Statement_Opcode(stmt, "LOG1").

.decl LOG2(stmt: Statement)
LOG2(stmt) :- Statement_Opcode(stmt, "LOG2").

.decl LOG3(stmt: Statement)
LOG3(stmt) :- Statement_Opcode(stmt, "LOG3").

.decl LOG4(stmt: Statement)
LOG4(stmt) :- Statement_Opcode(stmt, "LOG4").

.decl CREATE(stmt: Statement)
CREATE(stmt) :- Statement_Opcode(stmt, "CREATE").

.decl CALL(stmt: Statement)
CALL(stmt) :- Statement_Opcode(stmt, "CALL").

.decl CALLCODE(stmt: Statement)
CALLCODE(stmt) :- Statement_Opcode(stmt, "CALLCODE").

.decl RETURN(stmt: Statement)
RETURN(stmt) :- Statement_Opcode(stmt, "RETURN").

.decl DELEGATECALL(stmt: Statement)
DELEGATECALL(stmt) :- Statement_Opcode(stmt, "DELEGATECALL").

.decl CREATE2(stmt: Statement)
CREATE2(stmt) :- Statement_Opcode(stmt, "CREATE2").

.decl INVALID(stmt: Statement)
INVALID(stmt) :- Statement_Opcode(stmt, "INVALID").

.decl SELFDESTRUCT(stmt: Statement)
SELFDESTRUCT(stmt) :- Statement_Opcode(stmt, "SELFDESTRUCT").

.decl REVERT(stmt: Statement)
REVERT(stmt) :- Statement_Opcode(stmt, "REVERT").

.decl RETURNDATASIZE(stmt: Statement)
RETURNDATASIZE(stmt) :- Statement_Opcode(stmt, "RETURNDATASIZE").

.decl RETURNDATACOPY(stmt: Statement)
RETURNDATACOPY(stmt) :- Statement_Opcode(stmt, "RETURNDATACOPY").

.decl STATICCALL(stmt: Statement)
STATICCALL(stmt) :- Statement_Opcode(stmt, "STATICCALL").

.decl EXTCODEHASH(stmt: Statement)
EXTCODEHASH(stmt) :- Statement_Opcode(stmt, "EXTCODEHASH").

.decl CHAINID(stmt: Statement)
CHAINID(stmt) :- Statement_Opcode(stmt, "CHAINID").

.decl SELFBALANCE(stmt: Statement)
SELFBALANCE(stmt) :- Statement_Opcode(stmt, "SELFBALANCE").

.decl TXGASPRICE(stmt: Statement)
TXGASPRICE(stmt) :- Statement_Opcode(stmt, "TXGASPRICE").

