// VERY IMPORTANT: IF YOU CHANGE ANY OUTPUT RELATION IN THIS FILE,
// PLEASE ALSO CHANGE clientlib/decompiler_imports.dl
// Also clientlib/function_inliner.dl

.type TACVariable <: symbol

.output ByteCodeHex(IO="file", filename="bytecode.hex")

.decl DecompilerConfig(config: symbol) btree_delete
.output DecompilerConfig

DecompilerConfig("default").

DecompilerConfig(default) <= DecompilerConfig(other):-
  default = "default",
  other != default.

.decl GlobalEntryBlock(block: IRBlock)
.output GlobalEntryBlock

GlobalEntryBlock("0x0").

.decl FunctionalBlock_Uses_Local(block: IRBlock, stackIndex: StackIndex)

FunctionalBlock_Uses_Local(block, as(stackIndex, StackIndex)) :-
  IRStatement_Block(stmt, block),
  FunctionalStatement_Uses_Local(stmt, stackIndex, _),
  CheckIsStackIndex(stackIndex).

.decl PolymorphicStackIndex(block: IRBlock, stackIndex: StackIndex)

PolymorphicStackIndex(block, stackIndex) :-
  FunctionalBlock_Uses_Local(block, stackIndex),
  FunctionalBlockInputContents(block, stackIndex, var1),
  FunctionalBlockInputContents(block, stackIndex, var2),
  var1 != var2.

/**
  Find all polymorphic stackIndexes
  These need phi instructions introduced at the dominance frontier
*/
.decl PHILocation(block: IRBlock, stackIndex: StackIndex, newVarSymbol: IRStatement)
PHILocation(block, stackIndex, cat(cat(block, "_"), stackIndexHex)) :-
   PolymorphicStackIndex(block, stackIndex),
   stackIndexHex = @number_to_hex(stackIndex).


// Final decompiler outputs
.decl TAC_Op(stmt:IRStatement, op:Opcode)
.output TAC_Op
.decl TAC_Stmt(stmt:IRStatement)
.output TAC_Stmt
.decl TAC_Use(stmt: IRStatement, var: TACVariable, i: number)
.output TAC_Use
.decl TAC_Def(stmt: IRStatement, var: TACVariable, n: number)
.output TAC_Def
.decl TAC_Var(var: TACVariable)
.output TAC_Var
.decl TAC_Block(stmt: IRStatement, block: IRBlock)
.output TAC_Block
.decl TAC_Block_Head(block: IRBlock, stmt: IRStatement)
.output TAC_Block_Head
.decl TAC_Variable_Value(var: TACVariable, value: symbol)
.output TAC_Variable_Value
.decl TAC_Variable_BlockValue(var: TACVariable, value: symbol)
.output TAC_Variable_BlockValue


// Storage snapshot relations
// These are always empty, unless filled by decompile_address in gigahorse-clients
// We only output them empty here to avoid nonexistent file errors in clients

.decl StorageContents(addr: symbol, contents: symbol)
StorageContents(a, b) :- StorageContents(a, b).
.output StorageContents

.decl SHA3Decompositions(addr: symbol, base1: symbol, base2: symbol, offset: symbol)
SHA3Decompositions(a, b, c, d) :- SHA3Decompositions(a, b, c, d).
.output SHA3Decompositions


/// Heuristically change the values of all constants that match cloned
/// basic block labels! Don't up

TAC_Variable_BlockValue(as(tacvar,TACVariable), irvalue) :-
  FunctionalStatement_Defines(stmt, var, _),
  Variable_Stmt_String(var, stmt, tacvar),
  postTrans.Variable_Value(var, value),
  StatementAndBlockInSameFunction(stmt, as(value, symbol), irvalue),
   // value matches address of block
   STARTSWITH(value, "0x").

.decl StatementAndBlockInSameFunction(stmt: IRStatement, block: Block, irblock: IRBlock)
StatementAndBlockInSameFunction(stmt, block, irblock) :-
  Statement_IRStatement(_, func, stmt),
  Block_IRBlock(block, func, irblock).


// Normal variable
TAC_Variable_Value(as(tacvar, TACVariable), value) :-
   FunctionalStatement_Defines(stmt, var, _),
   Variable_Stmt_String(var, stmt, tacvar),
   postTrans.Variable_Value(var, value),
   STARTSWITH(value, "0x").

/**
  __HACK__ to get around the patterns produced by the new `--via-ir` compilation pipeline.
  These patterns will pass arguments to public functions (in the function selector code) the same way
  they are passed to private functions. These are often constants used all over the place.
*/
.decl PublicFunctionFormalIsConstant(irFunc: IRFunction, formal: TACVariable, value: symbol)

PublicFunctionFormalIsConstant(publicFunc, formalArg, value):-
  IRPublicFunction(publicFunc, _),
  FormalArgs(publicFunc, formalArg, n),
  IRFunctionCall(fromIrBlock, publicFunc),
  IRBasicBlock_Tail(fromIrBlock, callStmt),
  TAC_Use(callStmt, actualArg, n + 1),
  TAC_Variable_Value(actualArg, value),
  1 = count : IRFunctionCall(_, publicFunc).

TAC_Variable_Value(formalArg, value):-
  PublicFunctionFormalIsConstant(_, formalArg, value).

// New Instructions
// *returnArgs = CALLPRIVATE(stmt, function, *args)
// RETURNPRIVATE(stmt, *args)

// Non-nop instructions
TAC_Stmt(irstmt) :-
  Statement_IRStatement(stmt, _, irstmt),
  postTrans.ValidStatement(stmt),
  !DeadStmt(irstmt),
  !IRTACNOP(irstmt).

TAC_Op(irstmt, op) :-
   IRStatement_Opcode(irstmt, op),
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.ValidStatement(stmt),
   !DeadStmt(irstmt),
   !IRTACNOP(irstmt),
   !postTrans.PushValue(stmt, _),
   !postTrans.PC(stmt),
   !postTrans.PUSH0(stmt),
   !postTrans.INVALID(stmt).

TAC_Op(irstmt, "CONST") :-
   Statement_IRStatement(stmt, _, irstmt),
   (
    postTrans.PushValue(stmt, _);
    postTrans.PC(stmt);
    postTrans.PUSH0(stmt)
  ).

TAC_Op(irstmt, "THROW") :-
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.INVALID(stmt).

// Phi instructions
TAC_Var(var),
TAC_Def(stmt, var, 0),
TAC_Stmt(stmt),
TAC_Op(stmt, "PHI") :-
   PHILocation(_, _, stmt),
   var = as(stmt, TACVariable).

// Non-phi, non-call variable id same as stmt it is defined in
TAC_Var(tac_var),
TAC_Def(stmt, tac_var, n) :-
   FunctionalStatement_Defines(stmt, var, n),
   Variable_Stmt_String(var, stmt, var_rep),
   tac_var = as(var_rep, TACVariable).

// Case 1: Uses locally defined variable
TAC_Use(stmt, as(var_rep, TACVariable), n) :-
  FunctionalStatement_Uses_Local(stmt, var, n),
  CheckIsVariable(var),
  Variable_Stmt_String(var, stmt, var_rep).

// Case 2: Uses monomorphic global var
// Using the block in which the var is defined,
// Fixes cases where a stmt in a cloned block is using
// a variable defined in a non cloned block
TAC_Use(stmt, as(var_rep, TACVariable), n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  IRInFunction(block, fun),
  !PHILocation(block, stackIndex, _),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionalStatement_Defines(defstmt, var, _),
  IRStatement_Block(defstmt, defBlock),
  IRInFunction(defBlock, fun),
  Variable_Block_String(var, defBlock, var_rep).

//Case 2.1: Uses arg(like the above case, but not defined)
TAC_Use(stmt, as(var_rep, TACVariable), n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  !PHILocation(block, stackIndex, _),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionArgument(_, _, var),
  Variable_String(var, var_rep).


// Case 3: Is a PHI statement
TAC_Use(phiStmt, as(var_rep, TACVariable), -1) :-
  PHILocation(block, stackIndex, phiStmt),
  FunctionalBlockInputContents(block, stackIndex, var),
  IRInFunction(block, fun),
  FunctionalStatement_Defines(defstmt, var, _),
  IRStatement_Block(defstmt, defBlock),
  IRInFunction(defBlock, fun),
  Variable_Block_String(var, defBlock, var_rep).

// Case 3.1: Phis using args
TAC_Use(phiStmt, as(var_rep, TACVariable), -1) :-
  PHILocation(block, stackIndex, phiStmt),
  FunctionalBlockInputContents(block, stackIndex, var),
  FunctionArgument(_, _, var),
  Variable_String(var, var_rep).


// Case 4: Uses polymorphic variable
TAC_Use(stmt, as(phiStmt, TACVariable), n) :-
  FunctionalStatement_Uses_Local(stmt, stackIndex, n),
  CheckIsStackIndex(stackIndex),
  IRStatement_Block(stmt, block),
  PHILocation(block, stackIndex, phiStmt).

TAC_Block(stmt, block) :-
  IRStatement_Block(stmt, block),
  !DeadBlock(block),
  !IRTACNOP(stmt).


TAC_Block(phiStmt, block) :-
  PHILocation(block, _, phiStmt),
  !DeadBlock(block).


// Fresh call statements
//TAC_Block(callStmt, block) :-
//   BasicBlock_CALL(block, callStmt).


/***********
 *  Function-discovery outputs to visualization scripts
 ***********/
// The following contain "Dead" results
.output IRFunctionCall
.output IRFunctionCallReturn
.output IRFunction_Return
.output IRFunctionEntry
.output HighLevelFunctionName
.output IRPublicFunction(IO="file", filename = "PublicFunction.csv", delimiter = "\t")
.output IsFunctionEntry(IO="file", filename="Function.csv", delimiter="\t")

.decl FormalArgs(func:IRFunction, var:TACVariable, n:number)
.output FormalArgs

FormalArgs(func, as(var_rep, TACVariable), n) :-
   FunctionArgument(func, n, var),
   Variable_String(var, var_rep).

.decl ActualReturnArgs(caller:IRBlock, var_rep:symbol, n:number)
.output ActualReturnArgs

ActualReturnArgs(caller, var_rep, n) :-
   FunctionCallReturnArgument(caller, n, var),
   Variable_Block_String(var, caller, var_rep).

.output LocalBlockEdge
.output IRFallthroughEdge

.decl IRInFunctionFiltered(block: IRBlock, func: IRFunction)

IRInFunctionFiltered(block, func):-
  IRInFunction(block, func),
  ReachableFromFunHead(block).

.output Mask_Length
.output IRInFunctionFiltered(IO="file", filename="InFunction.csv", delimiter="\t")

.decl FunctionIsInner(func: IRFunction)
.output FunctionIsInner(IO="file", filename="FunctionIsInner.csv", delimiter="\t")

/*****
 *  Statement Ordering
 *****/
.decl PRE_TAC_Statement_Next(stmt: Statement, next: Statement)

PRE_TAC_Statement_Next(stmt, next) :-
   postTrans.Statement_Next(stmt, next).

PRE_TAC_Statement_Next(stmt, nextnext) :-
  PRE_TAC_Statement_Next(stmt, next),
  PRE_TAC_Statement_Next(next, nextnext),
  postTrans.TACNOP(next).


/// WARNING: This only works intra-procedurally after the Functional IR conversion.
.decl TAC_Statement_Next(stmt: IRStatement, next: IRStatement)
.output TAC_Statement_Next

TAC_Statement_Next(irstmt, irnext) :-
   PRE_TAC_Statement_Next(stmt, next),
   Statement_IRStatement(stmt, func, irstmt),
   Statement_IRStatement(next, func, irnext),
   TAC_Block(irstmt, _), TAC_Block(irnext, _).

// TODO for statement ordering
// a) phi functions
// b) fresh call statements (if reintroduced)

TAC_Block_Head(block, irstmt) :-
   TAC_Block(irstmt, block),
   Statement_IRStatement(stmt, _, irstmt),
   postTrans.IsBasicBlockHead(stmt).

// TODO: Account for cloning. Shouldn't matter as it's all low-level stuff
.decl TAC_Statement_OriginalStatement(irstmt: IRStatement, stmt: Statement)

.type StatementList = [stmt: Statement, rest: StatementList]

.decl TAC_Statement_OriginalStatementList(irstmt: IRStatement, stmtList: StatementList)


// unmodified statements

TAC_Statement_OriginalStatementList(irstmt, [ogStmt, nil]),
TAC_Statement_OriginalStatement(irstmt, ogStmt) :-
  Statement_IRStatement(stmt, _, irstmt),
  preTrans.Statement_Block(stmt, _),
  PreTransStatement_OriginalStatement(stmt, ogStmt). //this predicate takes care of block cloning as well


// Inserted statements that didn't exist before
// recover the insertion in the original bytecode (regardless of whether the original statement had been removed )
TAC_Statement_OriginalStatementList(irstmt, [ogStmt, nil]),
TAC_Statement_OriginalStatement(irstmt, ogStmt) :-
  Statement_IRStatement(stmt, _, irstmt),
  !preTrans.Statement_Block(stmt, _), // didn't exist
  insertor.InsertedOpNewStatement(insertionBasisStmt, _, stmt),
  PreTransStatement_OriginalStatement(insertionBasisStmt,ogStmt). //edge case: the insertion basis might have been cloned

.output TAC_Statement_OriginalStatement, TAC_Statement_OriginalStatementList

.type FunctionList = [function: Block, rest: FunctionList]

.decl TAC_Statement_InlineInfo(irStmt: IRStatement, funList: FunctionList)
.output TAC_Statement_InlineInfo

TAC_Statement_InlineInfo(irStmt, nil):-
  TAC_Stmt(irStmt).

.decl TAC_OriginalStatement_Block(original_stmt: Statement, irblock: IRBlock)
.output TAC_OriginalStatement_Block

// unmodified statements
TAC_OriginalStatement_Block(stmt, irblock) :-
  postTrans.Statement_Block(_, block),
  preTrans.Statement_Block(stmt, block),
  Block_IRBlock(block, _, irblock).


// tracks statements that have been placed into generated blocks
TAC_OriginalStatement_Block(stmt, irblock) :-
  postTrans.Statement_Block(stmt, block),
  !preTrans.Statement_Block(_, block),
  preTrans.Statement_Block(stmt, _),
  Block_IRBlock(block, _, irblock).

// tracks deleted statements where their old block was also changed
TAC_OriginalStatement_Block(stmt, irblock) :-
  preTrans.Statement_Block(stmt, block),
  !postTrans.Statement_Block(stmt, _),
  !postTrans.Statement_Block(_, block),
  preTrans.Statement_Block(otherStmt, block),
  postTrans.Statement_Block(otherStmt, genBlock),
  Block_IRBlock(genBlock, _, irblock).

.decl TAC_Block_CodeChunkAccessed(irblock: IRBlock, chunk_id: Chunk)
.output TAC_Block_CodeChunkAccessed

TAC_Block_CodeChunkAccessed(irblock, chunk_id) :-
  Statement_CodeChunkAccessed(stmt, chunk_id),
  TAC_OriginalStatement_Block(stmt, irblock).                   

.decl IRBlock_PartialGas(block: IRBlock, stmt: Statement, gas: number)
IRBlock_PartialGas(irblock, stmt, gas) :-
  TAC_OriginalStatement_Block(stmt, irblock),
  preTrans.Statement_Gas(stmt, gas).
  
.decl TAC_Block_Gas(block: IRBlock, gas: number)
.output TAC_Block_Gas

TAC_Block_Gas(block, totalgas) :-
   IRStatement_Block(_, block),
   totalgas = sum gas : IRBlock_PartialGas(block, _, gas).


// SL: Not sure what this is meant to be, outputting it as it is needed
.decl UnmappedStatements(stmt: Statement)
.output UnmappedStatements
UnmappedStatements(stmt) :-
  preTrans.Statement_Block(stmt, _),
  !TAC_OriginalStatement_Block(stmt, _).

/******
 * Event signatures
 *****/

.decl EventSignature(hex_signature: Value, text_signature: symbol)
.input EventSignature

.decl EventSignatureInContract(hex_signature: Value, text_signature: symbol)
.output EventSignatureInContract

.decl LOGStmt_SigHash(log:IRStatement, sigHash:symbol)


LOGStmt_SigHash(stmt, sigHash):-
  (TAC_Op(stmt, "LOG0");
  TAC_Op(stmt, "LOG1");
  TAC_Op(stmt, "LOG2");
  TAC_Op(stmt, "LOG3");
  TAC_Op(stmt, "LOG4")),
  TAC_Use(stmt, logSigHashVar, 2),
  TAC_Variable_Value(logSigHashVar, sigHash).

EventSignatureInContract(sigHash, sigText):-
  LOGStmt_SigHash(_, sigHash),
  EventSignature(sigHash, sigText).

.decl Helper_Zeros(str:symbol, len:number)
DEBUG_OUTPUT(Helper_Zeros)

Helper_Zeros("", 0).

Helper_Zeros(cat("0",old), i +1):-
  Helper_Zeros(old, i),
  i < 10.

.decl ErrorSignature(hex_signature: symbol, text_signature: symbol)
.input ErrorSignature

.decl PublicFunctionLikeSignature(hex_signature: symbol, text_signature: symbol)

PublicFunctionLikeSignature(sigHash, sig):-
  PublicFunctionSignature(sigHash, sig);
  ErrorSignature(sigHash, sig).

.decl ConstantPossibleSigHash(constSigHash:symbol, canonicalSigHash:symbol, name:symbol)
.output ConstantPossibleSigHash


// Covers both small and big numbers
ConstantPossibleSigHash(sigHash, sigHashForm, name):-
  TAC_Variable_Value(_, sigHash),
  len = strlen(sigHash),
  temp = min(10, len),
  Helper_Zeros(zeroz, 10 - temp),
  sigHashForm = cat("0x",cat(zeroz, substr(sigHash, 2, temp - 2))),
  PublicFunctionLikeSignature(sigHashForm, name).

// REVIEW (YS): I don't fully understand the above. Why truncate the
// first two digits of the constant and prepend "0x"? If the two digits
// were not relevant, they were "0x" to begin with. Anyway, I'm leaving
// as-is to be safe, and adding more cases below.
ConstantPossibleSigHash(sigHash, sigHashForm, name):-
  TAC_Variable_Value(_, sigHash),
  len = strlen(sigHash),
  ((len >= 9, sigHashForm = cat("0x0", substr(sigHash, 2, 7)));
   (len >= 8, sigHashForm = cat("0x00", substr(sigHash, 2, 6)))),
  PublicFunctionLikeSignature(sigHashForm, name).
