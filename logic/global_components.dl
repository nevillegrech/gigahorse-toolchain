#pragma once

#include "local_components.dl"
#include "context-sensitivity/context_sensitivity.dl"

#define LIMITSIZE_BLOCK_OUTPUT_CONTENTS 1000000
#define LIMITSIZE_BIG_BLOCK_OUTPUT_CONTENTS 2000000

.comp GlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> : LocalAnalysis {
  /*
  ***********
  * Key dataflow definitions
  ***********
  */

  .init sens = AbstractContextSensitivity<LocalAnalysis>

  sens.local.PushValue(push, val):- PushValue(push, val).
  sens.local.Statement_Opcode(stmt, op):- Statement_Opcode(stmt, op).
  sens.local.Statement_Next(stmt, stmtNext):- Statement_Next(stmt, stmtNext).
  sens.local.PublicFunction(block, hex, selector):- PublicFunction(block, hex, selector).
  sens.local.PublicFunctionJump(block, hex, selector):- PublicFunctionJump(block, hex, selector).

  // `block` is reachable under `context`
  .decl ReachableContext(context: sens.Context, block: Block)

  // Stack contents at end of a `block`, given its calling `context`.
  .decl BlockOutputContents(context: sens.Context, block: Block, index: StackIndex, var: Variable)
  DEBUG_OUTPUT(BlockOutputContents)

  /**
    Stack contents at start of a `block`, given its calling `context`.
    Added overridable flag to override it in the optimized variant of the component
  */
  .decl BlockInputContents(context: sens.Context, block: Block, index: StackIndex, var: Variable) overridable

  // `var` holds the (target block) address a `block` jumps to, under `context`.
  .decl BlockJumpTarget(context: sens.Context, block: Block, var: Variable)

  /**
    Under `ctx`, the `block` will jump to the value of `var`, which
    is equal to the label of the `target` block.
  */
  .decl BlockJumpValidTarget(ctx: sens.Context, block: Block, var: Variable, target: Block)

  /**
    Under `ctx`, `next` can follow the execution of `block`.
    Includes both fallthrough edges and jumps.
  */
  .decl BlockValidNext(ctx: sens.Context, block: Block, next: Block)

  /**
    When `block` is analyzed under `callerCtx`, there will be a CFG edge
    from `block` to `callee`, causing it to be reachable under `calleeCtx`
  */
  .decl BlockEdge(callerCtx: sens.Context, caller: Block, calleeCtx: sens.Context, callee: Block)

  /**
    Variable or stack index `variable` has `value` under `ctx`.
  */
  .decl GlobalVariable_Value(ctx: sens.Context, variable: VariableOrStackIndex, value: Value)
  DEBUG_OUTPUT(GlobalVariable_Value)

  /**
    Global-level value flow and creation of new constant values via an instantiation of the `ConstantFolding` component
    is limited by the fact that new values are not propagated to following contexts/blocks.
    This would not model a case where a block reads a value from a previous block and produces a jumpdest,
    pushing it to the stack for a following block to read/jump to.
    Haven't seen such patterns in practice so I'm keeping it like that.
  */
  .init globalVariableValueConstantOps = ConstantFolding

  GlobalVariable_Value(ctx, variable, value):-
    ReachableContext(ctx, block),
    Statement_Block(statement, block),
    Statement_Defines(statement, variable),
    Variable_Value(variable, value).

  // global case, highlights limitation
  GlobalVariable_Value(ctx, stackIndex, value):-
    BlockInputContents(ctx, block, stackIndex, variable),
    Statement_Block(statement, block),
    Statement_Uses_Local(statement, stackIndex, _),
    CheckIsStackIndex(stackIndex),
    Variable_Value(variable, value).


  /**
    The set of variables for which we need to recover their values via global-level analysis.
  */
  .decl VariableWithoutValueUsedInJumpTargetComputation(variable: Variable)

  VariableWithoutValueUsedInJumpTargetComputation(var):-
    ImmediateBlockJumpTarget(_, var),
    !Variable_Value(var, _).

  VariableWithoutValueUsedInJumpTargetComputation(as(use, Variable)):-
    VariableWithoutValueUsedInJumpTargetComputation(def),
    Statement_Defines(stmt, def),
    Statement_Uses_Local(stmt, use, _),
    CheckIsVariable(use),
    !Variable_Value(use, _).

  // Helper to produce all constant operation requests
  .decl GlobalBinopStatementOpAndConstantArgValues(ctx: sens.Context, stmt: Statement, op: Opcode, a_val: Value, b_val: Value)
  GlobalBinopStatementOpAndConstantArgValues(ctx, stmt, op, aval, bval) :-
    VariableWithoutValueUsedInJumpTargetComputation(targetVar),
    Statement_Defines(stmt, targetVar),
    Statement_Opcode(stmt, op),
    Statement_Uses_Local(stmt, a, 0),
    Statement_Uses_Local(stmt, b, 1),
    GlobalVariable_Value(ctx, a, aval),
    GlobalVariable_Value(ctx, b, bval).
   .plan 0:(6,4,5,7,3,2,1),1:(7,5,4,6,3,2,1)

  globalVariableValueConstantOps.RequestConstantFold2(op, a_val, b_val) :-
    GlobalBinopStatementOpAndConstantArgValues(_, _, op, a_val, b_val).

  GlobalVariable_Value(ctx, to, result) :-
    globalVariableValueConstantOps.ConstantFoldResult2(op, a_val, b_val, result),
    GlobalBinopStatementOpAndConstantArgValues(ctx, stmt, op, a_val, b_val),
    Statement_Defines(stmt, to).
    .plan 1:(2,1,3)

  /*
  ***********
  * Define block's behavior based on constituents
  ***********
  */

  BlockInputContents(calleeCtx, callee, index, variable) :-
    BlockOutputContents(callerCtx, caller, index, variable),
    BlockEdge(callerCtx, caller, calleeCtx, callee).
    .plan 1:(2,1)
    
  // Copy the stack variables untouched by the callee basic block
  BlockOutputContents(calleeCtx, callee, index+delta, variable) :-
    BlockInputContents(calleeCtx, callee, index, variable),
    BlockPopDelta(callee, calleePopLen),
    BlockStackDelta(callee, delta),
    index >= calleePopLen,
    index+delta <= MAX_STACK_HEIGHT.

  // Handle the proper variables pushed by this basic block
  BlockOutputContents(ctx, block, index, as(var, Variable)) :-
    ReachableContext(ctx, block),
    BasicBlock_Tail(block, stmt),
    LocalStackContents(stmt, index, var),
    CheckIsVariable(var).


  // Handle the stackIndexes pushed by this basic block
  BlockOutputContents(ctx, block, index, as(realVariable, Variable)) :-
    BlockInputContents(ctx, block, stackIndex, realVariable),
    CheckIsStackIndex(stackIndex),
    BasicBlock_Tail(block, stmt),
    LocalStackContents(stmt, index, stackIndex).



  BlockJumpTarget(ctx, block, var) :-
    ReachableContext(ctx, block),
    ImmediateBlockJumpTarget(block, var).

  BlockJumpTarget(ctx, block, realVariable) :-
    BlockInputContents(ctx, block, stackIndex, realVariable),
    CheckIsStackIndex(stackIndex),
    BasicBlock_Tail(block, stmt),
    IsJump(stmt),
    BeforeLocalStackContents(stmt, 0, stackIndex).

  BlockJumpValidTarget(ctx, block, targetVar, as(targetValue, Block)) :-
    BlockJumpTarget(ctx, block, targetVar),
    Variable_Value(targetVar, targetValue),
    JUMPDEST(as(targetValue, symbol)).

  BlockJumpValidTarget(ctx, block, targetVar, as(targetValue, Block)) :-
    BlockJumpTarget(ctx, block, targetVar),
    GlobalVariable_Value(ctx, targetVar, targetValue),
    JUMPDEST(as(targetValue, symbol)).
   .plan 1:(2,1,3)


  /*
  ***********
  * CFG edges and reachable contexts
  ***********
  */

  ReachableContext(calleeCtx, callee) :-
    BlockEdge(_, _, calleeCtx, callee).

  ReachableContext(initCtx, FUNCTION_SELECTOR) :-
    sens.InitialContext(initCtx).

  BlockValidNext(ctx, block, next):-
    BlockJumpValidTarget(ctx, block, _, next).

  BlockValidNext(ctx, block, fallthrough):-
    ReachableContext(ctx, block),
    FallthroughEdge(block, fallthrough).

  // BlockEdge(callerCtx, caller, calleeCtx, fallthrough) :-
  //   sens.MergeContext(callerCtx, caller, calleeCtx),  // implies reachable
  //   FallthroughEdge(caller, fallthrough).

  // There may be an unconditional context computed by the algorithm. Use it.
  BlockEdge(callerCtx, caller, calleeCtx, callee) :-
    // BlockJumpValidTarget(callerCtx, caller, _, callee),
    BlockValidNext(callerCtx, caller, callee),
    sens.MergeContext(callerCtx, caller, calleeCtx).
    .plan 1:(2,1)

  // Also check if there is a conditional (on-request) context for this case
  sens.MergeContextRequest(callerCtx, block, next) :-
    BlockValidNext(callerCtx, block, next).

  BlockEdge(callerCtx, caller, calleeCtx, callee) :-
    BlockValidNext(callerCtx, caller, callee),
    sens.MergeContextResponse(callerCtx, caller, callee, calleeCtx).
    .plan 1:(2,1)

  // Note: It's under __any__ ctx. To be used with caution.
  .decl Statement_Uses(stmt: Statement, var: Variable, n: StackIndex)

  // Case: variable originates locally
  Statement_Uses(stmt, as(var, Variable), n) :-
    Statement_Uses_Local(stmt, var, n),
    CheckIsVariable(var).

  // Case: variable originates elsewhere
  Statement_Uses(stmt, var, n) :-
    Statement_Uses_Local(stmt, stackIndex, n),
    CheckIsStackIndex(stackIndex),
    Statement_Block(stmt, block),
    BlockInputContents(_, block, stackIndex, var).

  .decl VariableContainsJumpTarget(var: Variable)
  VariableContainsJumpTarget(var) :-
    Variable_Value(var, value),
    JUMPDEST(as(value, symbol)).

  .decl VariableUsedInOperation(var: Variable)

  VariableUsedInOperation(var):-
    Statement_Uses(stmt, var, _),
    Statement_Opcode(stmt, op),
    op != "JUMP",
    op != "JUMPI".

  .decl VariableUsedInAsJumpdest(var: Variable)

  VariableUsedInAsJumpdest(var):-
    Statement_Uses(stmt, var, 0),
    Statement_Opcode(stmt, op),
    (op = "JUMP"; op = "JUMPI").


  VariableUsedInOperation(var):-
    Statement_Uses(stmt, var, 1),
    Statement_Opcode(stmt, "JUMPI").

  .decl VariableAlwaysUsedAsJumpTarget(var: Variable)

  VariableAlwaysUsedAsJumpTarget(var):-
    VariableContainsJumpTarget(var),
    !VariableUsedInOperation(var).

  /**
    Used to verify which variables/stack indexes that seem to be used as selectors, are actually selectors
  */
  .decl ValidSelector(selector: OptionalSelector)

  ValidSelector($NoSelector()).

  ValidSelector($SelectorVariable(selectorVariable)):-
    IsOptionalSelector($SelectorVariable(selectorVariable)),
    FunctionSelectorVariable(selectorVariable).

  ValidSelector($SelectorStackIndex(block, selectorStackIndex)):-
    IsOptionalSelector($SelectorStackIndex(block, selectorStackIndex)),
    BlockInputContents(_, block, selectorStackIndex, selectorVariable),
    FunctionSelectorVariable(selectorVariable).


  .decl ImpreciseBlockInputContentsIndex(ctx: sens.Context, block: Block, index: StackIndex)
  DEBUG_OUTPUT(ImpreciseBlockInputContentsIndex)
  .decl ImpreciseBlockOutputContentsIndex(ctx: sens.Context, block: Block, index: StackIndex)
  DEBUG_OUTPUT(ImpreciseBlockOutputContentsIndex)
  .decl ImpreciseBlockInputContentsIndexFromPrev(ctx: sens.Context, block: Block, index: StackIndex)
  DEBUG_OUTPUT(ImpreciseBlockInputContentsIndexFromPrev)
  .decl ImprecisionIntroducedAtEdge(fromCtx: sens.Context, fromBlock: Block, toCtx: sens.Context, to: Block, index: StackIndex)
  DEBUG_OUTPUT(ImprecisionIntroducedAtEdge)


  /**
    __Note__: Plans are commented out, they were needed at some point so I added them.
    Right now adding them breaks souffle 2.4 so I removed them. Didn't make a difference
  */
  ImpreciseBlockInputContentsIndex(ctx, block, index):-
    BlockInputContents(ctx, block, index, var1),
    BlockInputContents(ctx, block, index, var2),
    var1 != var2.
  //  .plan 1:(2,1)

  ImpreciseBlockOutputContentsIndex(ctx, block, index):-
    BlockOutputContents(ctx, block, index, var1),
    BlockOutputContents(ctx, block, index, var2),
    var1 != var2.
  //  .plan 1:(2,1)

  ImpreciseBlockInputContentsIndexFromPrev(ctx, block, index):-
    ImpreciseBlockInputContentsIndex(ctx, block, index),
    BlockEdge(prevCtx, prevBlock, ctx, block),
    ImpreciseBlockOutputContentsIndex(prevCtx, prevBlock, index).
    // .plan 1:(2,1,3), 2:(3,2,1)

  ImprecisionIntroducedAtEdge(fromCtx, fromBlock, toCtx, to, index):-
    BlockEdge(fromCtx, fromBlock, toCtx, to),
    ImpreciseBlockInputContentsIndex(toCtx, to, index),
    !ImpreciseBlockInputContentsIndexFromPrev(toCtx, to, index),
    !ImpreciseBlockOutputContentsIndex(fromCtx, fromBlock, index).
  //  .plan 1:(2,1)

  .decl NeedToAddCtxAtEdge(fromBlock: Block, toBlock: Block)
  DEBUG_OUTPUT(NeedToAddCtxAtEdge)
  NeedToAddCtxAtEdge(fromBlock, toBlock):-
    ImprecisionIntroducedAtEdge(ctx, fromBlock, ctx, toBlock, _).
}

/**
  A global analysis component optimized by only modeling the stack locations containing jump targets
*/
.comp OptimizedGlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> : GlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> {

  .override BlockInputContents

  .decl VariableToModel(var: Variable)
  VariableToModel(var):-
    VariableContainsJumpTarget(var); FunctionSelectorVariable(var).

  .decl BlockOutputContentsJumpTarget(context:sens.Context, block:Block, index:StackIndex, var:Variable)
  BlockOutputContentsJumpTarget(context, block, index, var):-
    AuxBlockOutputContentsJumpTarget(context, block, index, var),
    VariableUsedInAsJumpdest(var).

  /**
    Cut down `BlockOutputContents`, only containing jump targets (and the function selector var).
    Stack contents at end of a `block`, given its calling `context`.
  */
  .decl AuxBlockOutputContentsJumpTarget(context:sens.Context, block:Block, index:StackIndex, var:Variable)
  AuxBlockOutputContentsJumpTarget(context, block, index, var) :-
    BlockOutputContents(context, block, index, var),
    VariableToModel(var).

  BlockInputContents(calleeCtx, callee, index, variable) :-
    AuxBlockOutputContentsJumpTarget(callerCtx, caller, index, variable),
    BlockEdge(callerCtx, caller, calleeCtx, callee).
    .plan 1:(2,1)
}


/**
  Used whenever a best effort is good enough
*/
.comp IncompleteOptimizedGlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> : OptimizedGlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> {
  .limitsize BlockOutputContents(n=LIMITSIZE_BLOCK_OUTPUT_CONTENTS)

  /**
    The context, caller pair to be used in our computation of the last continuation.
    We pick only one for scalability.
  */
  .decl PrivateFunctionContextToModel(callCtx: sens.Context, caller: Block) choice-domain(caller)
  PrivateFunctionContextToModel(callCtx, caller):-
    PrivateFunctionCall(caller, _, _, _),
    ReachableContext(callCtx, caller).

  /**
    `continuation` pushed by `caller`, not visited by `currBlock` under `currCtx`
  */
  .decl ContinuationNotVisited(callCtx: sens.Context, caller: Block, currCtx: sens.Context, currBlock: Block, continuation: Block)

  ContinuationNotVisited(callCtx, caller, newCtx, next, cont):-
    PrivateFunctionContextToModel(callCtx, caller),
    PrivateFunctionCall(caller, next, cont, _),
    BlockEdge(callCtx, caller, newCtx, next).

  ContinuationNotVisited(callCtx, caller, newCtx, next, cont):-
    ContinuationNotVisited(callCtx, caller, prevCtx, prev, cont),
    BlockEdge(prevCtx, prev, newCtx, next),
    !PrivateFunctionReturn(prev).

  ContinuationNotVisited(callCtx, caller, newCtx, next, cont):-
    ContinuationNotVisited(callCtx, caller, prevCtx, prev, cont),
    BlockEdge(prevCtx, prev, newCtx, next),
    PrivateFunctionReturn(prev), next != cont.


  .decl LastContinuation(caller: Block, lastCont: Block)
  DEBUG_OUTPUT(LastContinuation)
  LastContinuation(caller, lastCont):-
    ContinuationNotVisited(callCtx, caller, prevCtx, prev, lastCont),
    BlockEdge(prevCtx, prev, newCtx, lastCont),
    !ContinuationNotVisited(callCtx, caller, newCtx, _, _).
}

/**
  Used for the main global analysis. Only has a limitsize if the `--enable_limitsize` flag is set.
*/
.comp CompleteOptimizedGlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> : OptimizedGlobalAnalysis <AbstractContextSensitivity, LocalAnalysis> {
  #ifdef ENABLE_LIMITSIZE
  .limitsize BlockOutputContents(n=LIMITSIZE_BIG_BLOCK_OUTPUT_CONTENTS)
  #endif
}

// copying of PublicFunction from postTrans causes issues. Need to filter imprecision of the local function inference.
// Perhaps post incomplete would be the best place to do that.
.comp ExperimentalCompleteOptimizedGlobalAnalysis <AbstractContextSensitivity> : CompleteOptimizedGlobalAnalysis <AbstractContextSensitivity, PostIncompleteGlobalLocalAnalysis> {

  .decl StatementPushesUsedLabel(stmt: Statement)
  // .output sens.local.BlockPushesLabel, StatementPushesUsedLabel, sens.local.PrivateFunctionCall
  // .output BlockPushesLabel
  ExtBlockPushesLabel(block, val),
  sens.local.ExtBlockPushesLabel(block, val):-
    JUMPDEST(as(val, symbol)),
    Variable_Value(var, val),
    Statement_Defines(stmt, var),
    StatementPushesUsedLabel(stmt),
    Statement_Block(stmt, block),
    BasicBlock_Tail(block, call),
    LocalStackContents(call, _, var),
    !BlockUsesLocal(block, var). 
}

/**
  Declared just so it can be used as a parameter in another component.
  Used by the SafeBlockCloner so it uses `PreTransLocalAnalysis`
*/
.comp DefaultIncompleteOptimizedGlobalAnalysis : IncompleteOptimizedGlobalAnalysis <TransactionalWithShrinkingContext, PreTransLocalAnalysis> {

}