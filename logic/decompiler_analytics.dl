// Outputs for Analytics purposes go here
// Every relation needs to start with 'Analytics_'
// in order to be considered by our scripts

.decl Analytics_Functions(func: IRFunction)
.output Analytics_Functions

Analytics_Functions(func) :-
  IRFunctionEntry(func).

.decl Analytics_Jumps(block: Block)
.output Analytics_Jumps

Analytics_Jumps(block) :-
  postTrans.BasicBlock_Tail(block, tail),
  postTrans.IsJump(tail).


/**
  Main reachability metrics
  The following relations report reachability on original blocks.
  This is to have consistent reporting across different configs for statement/block insertion and cloning. 
*/
.decl Analytics_ReachableBlocks(block: Block)
.output Analytics_ReachableBlocks

.decl Analytics_UnreachableBlock(block: Block)
.output Analytics_UnreachableBlock

.decl Analytics_ReachableBlocksInTAC(block: Block)
.output Analytics_ReachableBlocksInTAC

// `originalBlock` is reachable because `postTransformBlock` CFG block is
.decl ReachableBlocksHelper(originalBlock: Block, postTransformBlock: Block)
// Incompleteness metric: this can happen due to our precision-favoring heuristics
// or incompleteness due to the use of limitsize for scalability
.decl Analytics_BlockHasNoTACBlock(block: Block)
.output Analytics_BlockHasNoTACBlock

// Blocks that are data
.decl BlockIsData(block: Block)

// Blocks with MISSING opcode are data
BlockIsData(block):-
  revertCloner.analysis.Statement_Block(stmt, block),
  revertCloner.analysis.Statement_Opcode(stmt, "MISSING").

BlockIsData(block):-
  revertCloner.analysis.CODECOPYStatement(_, codeOffsetNumHex, smallNumHex),
  revertCloner.analysis.Statement_Block(_, block),
  @lt_256(codeOffsetNumHex, block) = "0x1",
  @lt_256(block, @add_256(codeOffsetNumHex, smallNumHex)) = "0x1".

.decl Analytics_JUMPDESTNeverPushed(block: Block)
.output Analytics_JUMPDESTNeverPushed

Analytics_JUMPDESTNeverPushed(block):-
  revertCloner.analysis.Statement_Opcode(stmt, "JUMPDEST"),
  revertCloner.analysis.Statement_Block(stmt, block),
  !revertCloner.BlockPushedToStack(_, _, block),
  !BlockIsData(block).

#ifdef BLOCK_CLONING

ReachableBlocksHelper(originalBlock, block):-
  global.ReachableContext(_, block),
  postTrans.Statement_Block(_, block),
  blockCloner.Block_OriginalBlock(block, originalBlock).

ReachableBlocksHelper(originalBlock, block):-
  blockCloner.Block_OriginalBlock(transformedBlock, originalBlock),
  postTrans.Statement_Block(as(transformedBlock, Statement), block),
  global.ReachableContext(_, block).


Analytics_UnreachableBlock(originalBlock):-
  postTrans.Statement_Block(_, block),
  blockCloner.Block_OriginalBlock(block, originalBlock),
  !BlockIsData(originalBlock),
  !Analytics_ReachableBlocks(originalBlock).

#else

ReachableBlocksHelper(originalBlock, block):-
  global.ReachableContext(_, block),
  postTrans.Statement_Block(_, block),
  revertCloner.Block_OriginalBlock(block, originalBlock).

ReachableBlocksHelper(originalBlock, block):-
  revertCloner.Block_OriginalBlock(transformedBlock, originalBlock),
  postTrans.Statement_Block(as(transformedBlock, Statement), block),
  global.ReachableContext(_, block).

Analytics_UnreachableBlock(originalBlock):-
  postTrans.Statement_Block(_, block),
  revertCloner.Block_OriginalBlock(block, originalBlock),
  !BlockIsData(originalBlock),
  !Analytics_ReachableBlocks(originalBlock).

#endif

Analytics_ReachableBlocks(originalBlock):-
  ReachableBlocksHelper(originalBlock, _).

Analytics_ReachableBlocksInTAC(originalBlock):-
  ReachableBlocksHelper(originalBlock, block),
  Block_IRBlock(block, _, irblock),
  (
    LocalBlockEdge(irblock, _);
    LocalBlockEdge(_, irblock);
    TAC_Block(_, irblock)
  ).

Analytics_BlockHasNoTACBlock(block):-
  Analytics_ReachableBlocks(block),
  !Analytics_ReachableBlocksInTAC(block).

/**
  Metrics that give more insights on the global CFG analysis
*/
.decl Analytics_Contexts(ctx: global.sens.Context)
.output Analytics_Contexts

Analytics_Contexts(ctx):-
  global.ReachableContext(ctx, _).

.decl GloballyReachableBlocks(ctx: Block)

GloballyReachableBlocks(block):-
  global.ReachableContext(_, block).

.decl Analytics_ReachableUnderContext(ctx: global.sens.Context, block: Block)
.output Analytics_ReachableUnderContext

Analytics_ReachableUnderContext(ctx, block):-
  global.ReachableContext(ctx, block).

.decl Analytics_Block_NumberOfContexts(block: Block, ctxNum: number)
.output Analytics_Block_NumberOfContexts

Analytics_Block_NumberOfContexts(block, ctxNum):-
  GloballyReachableBlocks(block),
  ctxNum = count : { global.ReachableContext(_, block) }.

.decl Analytics_Block_NumberOfContextsJump(block: Block, ctxNum: number, prev: Block, prevNum: number)
.output Analytics_Block_NumberOfContextsJump

Analytics_Block_NumberOfContextsJump(block, ctxNum, prev, maxPrev):-
  Analytics_Block_NumberOfContexts(block, ctxNum),
  maxPrev = max prevCtxNum : { global.BlockEdge(_, prevB, _, block), Analytics_Block_NumberOfContexts(prevB, prevCtxNum)},
  global.BlockEdge(_, prev, _, block),
  Analytics_Block_NumberOfContexts(prev, maxPrev),
  ctxNum > maxPrev * 2.

.decl Analytics_Block_TimesInContexts(block: Block, ctxNum: number)
.output Analytics_Block_TimesInContexts

Analytics_Block_TimesInContexts(block, timesInContext):-
  GloballyReachableBlocks(block),
  timesInContext = count : { global.sens.ContextContainsBlock(_, block, _) }.

.decl Analytics_PublicFunction_Contexts(pubFun: symbol, contexts: number)
.output Analytics_PublicFunction_Contexts

.decl AuxPublicFunction(pubFun: symbol)
AuxPublicFunction(pubFun) :-
  global.sens.Context_PublicFunction(_, pubFun).
  
Analytics_PublicFunction_Contexts(pubFun, contexts):-
  AuxPublicFunction(pubFun),
  contexts = count: global.sens.Context_PublicFunction(_, pubFun).

.decl Verbatim_BlocksReachabilityMetric(blocks: number, totalReach: number, avg: float)
.output Verbatim_BlocksReachabilityMetric

Verbatim_BlocksReachabilityMetric(blocks, totalReach, avg):-
  blocks = count: GloballyReachableBlocks(_),
  totalReach = sum ctxNum : Analytics_Block_NumberOfContexts(_, ctxNum),
  avg = as(totalReach, float) / as(blocks, float).


.decl Analytics_Blocks(block: IRBlock)
.output Analytics_Blocks

Analytics_Blocks(block) :-
  IRInFunction(block, _).

// This is a special metric
// Dead blocks are "declared dead" because they are most likely
// artifacts of imprecision but in cases they can also be a sign of incompleteness,
// given that we sometimes choose precision over completeness when going from Block to IRBlock
.decl Analytics_DeadBlocks(block: IRBlock)
.output Analytics_DeadBlocks

Analytics_DeadBlocks(irblk) :-
  DeadBlock(irblk).

// Sanity checking and analytics

.decl Analytics_MissingImplementation(stmt: Statement, opcode: Opcode)
.output Analytics_MissingImplementation

Analytics_MissingImplementation(stmt, opcode) :-
   postTrans.ValidStatement(stmt),
   postTrans.Statement_Opcode(stmt, opcode),
   OpcodePushWords(opcode, n), n>0,
   !postTrans.LocalStackContents(stmt, 0, _),
   !OpcodePossiblyHalts(opcode).

// Except return statements
.decl Analytics_PolymorphicTarget(block: Block)
.output Analytics_PolymorphicTarget

.decl AuxBlockJumpValidTarget(block: Block, target: Block)
AuxBlockJumpValidTarget(block, target) :-
  global.BlockJumpValidTarget(_, block, _, target).
  
// Excludes function return blocks
// SL: This gives little insight, should probably remove
Analytics_PolymorphicTarget(block) :-
  Analytics_Jumps(block),                                                          
  AuxBlockJumpValidTarget(block, target1),
  AuxBlockJumpValidTarget(block, target2),
  !IsReturn(_, block, _),
  target1 != target2.

// SL: The main imprecision metric of our global analysis
.decl Analytics_PolymorphicTargetSameCtx(block: Block)
.output Analytics_PolymorphicTargetSameCtx

Analytics_PolymorphicTargetSameCtx(block) :-
  Analytics_Jumps(block),
  global.BlockJumpValidTarget(ctx, block, _, target1),
  global.BlockJumpValidTarget(ctx, block, _, target2),
  target1 != target2.

.decl Analytics_MissingJumpTargetAnyCtx(block: Block)
.output Analytics_MissingJumpTargetAnyCtx

Analytics_MissingJumpTargetAnyCtx(block):-
  Analytics_Jumps(block),
  global.ReachableContext(_, block),
  !global.BlockJumpValidTarget(_, block, _, _),
  postTrans.JUMPDEST(_). // if there are not valid jumpdests then don't flag

.decl Analytics_MissingJumpTargetSomeCtx(block: Block)
.output Analytics_MissingJumpTargetSomeCtx

Analytics_MissingJumpTargetSomeCtx(block):-
  Analytics_Jumps(block),
  global.ReachableContext(ctx, block),
  !global.BlockJumpValidTarget(ctx, block, _, _),
  postTrans.JUMPDEST(_). // if there are not valid jumpdests then don't flag


// Sanity checking for functions
.decl Analytics_InexactFunctionArguments(func: IRFunction)
.decl Analytics_InexactFunctionReturnArguments(func: IRFunction)
.decl Analytics_InexactFunctionCallArguments(call: IRStatement)

.output Analytics_InexactFunctionArguments
.output Analytics_InexactFunctionReturnArguments
.output Analytics_InexactFunctionCallArguments

Analytics_InexactFunctionArguments(func) :-
   NumberOfFunctionArguments(func, delta),
   NumberOfFunctionArguments(func, delta2),
   delta != delta2.

Analytics_InexactFunctionReturnArguments(func) :-
   NumberOfFunctionReturnArguments(func, delta),
   NumberOfFunctionReturnArguments(func, delta2),
   delta != delta2.

Analytics_InexactFunctionCallArguments(call):-
  IRFunctionCall(callblock, func),
  NumberOfFunctionArguments(func, n_args),
  TAC_Block(call, callblock),
  TAC_Op(call, "CALLPRIVATE"),
  IsStackIndexLessThan(n_arg, n_args),
  !TAC_Use(call, _, n_arg).


.decl Analytics_FunctionCall(block: IRBlock)
.output Analytics_FunctionCall

Analytics_FunctionCall(block) :-
   IRFunctionCall(block, _).

.decl Analytics_FunctionCallWithReturn(block: IRBlock)
.output Analytics_FunctionCallWithReturn

Analytics_FunctionCallWithReturn(block) :-
   IRFunctionCallReturn(block, _, _).

// functions with multiple return blocks
.decl Analytics_FunctionWithMultipleReturns(func: IRFunction)
.output Analytics_FunctionWithMultipleReturns

Analytics_FunctionWithMultipleReturns(func) :-
   IRFunction_Return(func, retBlock),
   IRFunction_Return(func, retBlock2),
   retBlock != retBlock2.

.decl Analytics_PublicFunction(func: IRFunction)
.output Analytics_PublicFunction

Analytics_PublicFunction(func) :-
   IRPublicFunction(func, _).

.decl Analytics_PublicFunctionNameResolved(func: IRFunction)
.output Analytics_PublicFunctionNameResolved

Analytics_PublicFunctionNameResolved(func) :-
   IRPublicFunction(func, sigHash),
   PublicFunctionSignature(sigHash, _).

.decl Analytics_PrivateFunctionMatchesMetadata(func: Block)
.output Analytics_PrivateFunctionMatchesMetadata

Analytics_PrivateFunctionMatchesMetadata(func):-
  IRFunctionEntry(irFunc),
  Function_IRFunction(func, irFunc),
  func != "0x0",
  HighLevelFunctionInfo(_, func, _, _),
  !IRPublicFunction(irFunc, _).

.decl Analytics_PrivateFunctionMatchesMetadataIncorrectArgs(func: Block)
.output Analytics_PrivateFunctionMatchesMetadataIncorrectArgs

Analytics_PrivateFunctionMatchesMetadataIncorrectArgs(func):-
  Analytics_PrivateFunctionMatchesMetadata(func),
  Function_IRFunction(func, irFunc),
  NumberOfFunctionArguments(irFunc, inferredArgs),
  numArgs != inferredArgs - 1,
  HighLevelFunctionInfo(_, func, numArgs, _).

.decl Analytics_PrivateFunctionMatchesMetadataIncorrectReturnArgs(func: Block)
.output Analytics_PrivateFunctionMatchesMetadataIncorrectReturnArgs

Analytics_PrivateFunctionMatchesMetadataIncorrectReturnArgs(func):-
  Analytics_PrivateFunctionMatchesMetadata(func),
  Function_IRFunction(func, irFunc),
  NumberOfFunctionReturnArguments(irFunc, inferredArgs),
  numArgs != inferredArgs,
  HighLevelFunctionInfo(_, func, _, numArgs).

/**
  JUMP TO MANY
  Our main imprecision metric for our decompilation output
  lower is better
*/

.decl Analytics_JumpToMany(blk:IRBlock)
.output Analytics_JumpToMany

.decl JumpToMany_ImprecisionSource(reportBlock:IRBlock, sourceBlock:Block)
.output JumpToMany_ImprecisionSource

.decl Analytics_JumpToManyNonPopBlock(blk:IRBlock)
.output Analytics_JumpToManyNonPopBlock

.decl Analytics_JumpToManyWithoutGlobalImprecision(blk:IRBlock)
.output Analytics_JumpToManyWithoutGlobalImprecision

Analytics_JumpToMany(blk):-
  (TAC_Op(jump, "JUMP") ; TAC_Op(jump, "CALLPRIVATE")),
  TAC_Block(jump, blk),
  LocalBlockEdge(blk, one),
  LocalBlockEdge(blk, two),
  one != two.

Analytics_JumpToMany(blk):-
  TAC_Op(jump, "JUMPI"),
  TAC_Block(jump, blk),
  LocalBlockEdge(blk, one),
  LocalBlockEdge(blk, two),
  LocalBlockEdge(blk, three),
  one != two,
  one != three,
  two != three.

JumpToMany_ImprecisionSource(reportBlock, sourceBlock):-
  Analytics_JumpToMany(reportBlock),
  IRFunctionCallReturn(reportBlock, irfunc, _),
  IRFunction_Return(irfunc, retir),
  Block_IRBlock(sourceBlock, _, retir).

JumpToMany_ImprecisionSource(reportBlock, sourceBlock):-
  Analytics_JumpToMany(reportBlock),
  Block_IRBlock(sourceBlock, _, reportBlock),
  !IRFunctionCallReturn(reportBlock, _, _).

Analytics_JumpToManyNonPopBlock(reportBlock):-
  Analytics_JumpToMany(reportBlock),
  JumpToMany_ImprecisionSource(reportBlock, sourceBlock),
  !postTrans.StackBalanceBlock(sourceBlock).

Analytics_JumpToManyWithoutGlobalImprecision(reportBlock):-
  Analytics_JumpToMany(reportBlock),
  JumpToMany_ImprecisionSource(reportBlock, sourceBlock),
  !Analytics_PolymorphicTargetSameCtx(sourceBlock).

// To be used by 2-phase decompilation strategies
.decl Analytics_NextRoundCloningCandidate(block: Block)
.output Analytics_NextRoundCloningCandidate

Analytics_NextRoundCloningCandidate(block):-
  JumpToMany_ImprecisionSource(_, block).

// TODO: Figure out if Analytics_UnknownOperand works better than Analytics_StmtMissingOperand, should delete otherwise
.decl Analytics_UnknownOperand(stmt: IRStatement)
.output Analytics_UnknownOperand

//TODO: make this stronger
Analytics_UnknownOperand(stmt) :-
   ReachableStatement(stmt),
   TAC_Op(stmt, opcode),
   OpcodePopWords(opcode, words),
   IsStackIndexLessThan(n, words),
   !FunctionalStatement_Uses_Local(stmt, _, n).

.decl ReachableStatement(stmt: IRStatement)
ReachableStatement(stmt) :-
   IRInFunction(block, _),
   IRStatement_Block(stmt, block).

// Missing operands for IR statements.
.decl Analytics_StmtMissingOperand(stmt:IRStatement)
.output Analytics_StmtMissingOperand

Analytics_StmtMissingOperand(stmt):-
  OpcodePopWords(op, 2),
  TAC_Op(stmt, op),
  !(TAC_Use(stmt, _, 0), TAC_Use(stmt, _, 1)).

Analytics_StmtMissingOperand(stmt):-
  OpcodePopWords(op, 1),
  TAC_Op(stmt, op),
  !TAC_Use(stmt, _, 0).


.decl Analytics_LocalBlockEdge(from: IRBlock, to: IRBlock)
.output Analytics_LocalBlockEdge

Analytics_LocalBlockEdge(from, to):-
  LocalBlockEdge(from, to).

/**
  Mostly obscure metrics after this point.
  Some are things that don't really matter,
  others have been fixed for years and are no longer relevant
*/

.decl Analytics_InitiallyMissedCycleEntry(blk: IRBlock)
.output Analytics_InitiallyMissedCycleEntry

Analytics_InitiallyMissedCycleEntry(block) :-
   PotentialCycleEntry(block),
   !PossibleFunctionalBlockPopAndStackDelta(_, block, _, _, _).

// Check if a variable is defined twice; this should always be empty.
.decl Analytics_DoubleDef(variable: TACVariable)
.output Analytics_DoubleDef

Analytics_DoubleDef(variable) :-
  TAC_Def(stmt1, variable, _),
  TAC_Def(stmt2, variable, _),
  stmt1 != stmt2.

.decl BlockIsNotEmpty(block: IRBlock)

BlockIsNotEmpty(block) :-
  TAC_Block(_, block).

.decl Analytics_BlockIsEmpty(block: IRBlock)
.output Analytics_BlockIsEmpty

Analytics_BlockIsEmpty(block) :-
  (LocalBlockEdge(_, block); LocalBlockEdge(block, _)),
  !BlockIsNotEmpty(block).

.decl Analytics_BlockInMultipleFunctions(block: IRBlock)
.output Analytics_BlockInMultipleFunctions

Analytics_BlockInMultipleFunctions(block) :-
   IRInFunction(block, func),
   IRInFunction(block, func2),
   func != func2.

.decl Analytics_BlockInNoFunctions(block: IRBlock)
.output Analytics_BlockInNoFunctions

Analytics_BlockInNoFunctions(block) :-
   IRStatement_Block(_, block),
   !IRInFunction(block, _).

.decl Analytics_BlocksLocalOrNot(block1: IRBlock, block2: IRBlock)
.output Analytics_BlocksLocalOrNot

Analytics_BlocksLocalOrNot(block1, block2) :-
   LocalBlockEdge(block1, block2),
   IRInFunction(block1, fun1),
   IRInFunction(block2, fun2),
   fun1 != fun2.


.decl Analytics_NeedToAddCtxAtEdge(from: Block, to: Block)
.output Analytics_NeedToAddCtxAtEdge

Analytics_NeedToAddCtxAtEdge(from, to):-
  global.NeedToAddCtxAtEdge(from, to).

.decl Analytics_MissingEdgeInTAC(irBlock: IRBlock)
.output Analytics_MissingEdgeInTAC
Analytics_MissingEdgeInTAC(irBlock):-
  Block_IRBlock(_, _, irBlock),
  TAC_Block(jump, irBlock),
  TAC_Op(jump, "JUMP"),
  !LocalBlockEdge(irBlock, _).
