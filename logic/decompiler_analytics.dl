// Outputs for Analytics purposes go here
// Every relation needs to start with 'Analytics_'
// in order to be considered by our scripts

.decl Analytics_Functions(func: IRFunction)
.output Analytics_Functions

Analytics_Functions(func) :-
  IRFunctionEntry(func).

.decl Analytics_Jumps(block: Block)
.output Analytics_Jumps

Analytics_Jumps(block) :-
  postTrans.BasicBlock_Tail(block, tail),
  postTrans.IsJump(tail).


.decl Analytics_ReachableBlocks(block: Block)
.output Analytics_ReachableBlocks

Analytics_ReachableBlocks(blk):-
  ReachableContext(_, blk).

.decl Analytics_Contexts(ctx: Context)
.output Analytics_Contexts

Analytics_Contexts(ctx):-
  ReachableContext(ctx, _).

.decl Analytics_ReachableUnderContext(ctx: Context, block: Block)
.output Analytics_ReachableUnderContext

Analytics_ReachableUnderContext(ctx, block):-
  ReachableContext(ctx, block).

.decl Analytics_ReachableBlocksInTAC(block: Block)
.output Analytics_ReachableBlocksInTAC

Analytics_ReachableBlocksInTAC(blk):-
  ReachableContext(_, blk),
  Block_IRBlock(blk, _, block),
  (TAC_Block(_, block); LocalBlockEdge(_, block); LocalBlockEdge(block, _)).

// Incompleteness metric: this can happen due to our precision-favoring heuristics
// or incompleteness due to the use of limitsize for scalability
.decl Analytics_BlockHasNoTACBlock(block: Block)
.output Analytics_BlockHasNoTACBlock

Analytics_BlockHasNoTACBlock(blk):-
  Analytics_ReachableBlocks(blk),
  !Analytics_ReachableBlocksInTAC(blk).

.decl Analytics_Blocks(block: IRBlock)
.output Analytics_Blocks

Analytics_Blocks(block) :-
  IRInFunction(block, _).

// This is a special metric
// Dead blocks are "declared dead" because they are most likely
// artifacts of imprecision but in cases they can also be a sign of incompleteness,
// given that we sometimes choose precision over completeness when going from Block to IRBlock
.decl Analytics_DeadBlocks(block: IRBlock)
.output Analytics_DeadBlocks

Analytics_DeadBlocks(irblk) :-
  DeadBlock(irblk).

// Sanity checking and analytics

.decl ReachableStatement(stmt: IRStatement)

ReachableStatement(stmt) :-
   IRInFunction(block, _),
   IRStatement_Block(stmt, block).

.decl Analytics_UnknownOperand(stmt: IRStatement)
.output Analytics_UnknownOperand

//TODO: make this stronger
Analytics_UnknownOperand(stmt) :-
   ReachableStatement(stmt),
   TAC_Op(stmt, opcode),
   OpcodePopWords(opcode, words),
   IsStackIndexLessThan(n, words),
   !FunctionalStatement_Uses_Local(stmt, _, n).

.decl Analytics_MissingImplementation(stmt: Statement, opcode: Opcode)
.output Analytics_MissingImplementation

Analytics_MissingImplementation(stmt, opcode) :-
   postTrans.ValidStatement(stmt),
   postTrans.Statement_Opcode(stmt, opcode),
   OpcodePushWords(opcode, n), n>0,
   !postTrans.LocalStackContents(stmt, 0, _),
   !OpcodePossiblyHalts(opcode).

// Except return statements
.decl Analytics_PolymorphicTarget(block: Block)
.output Analytics_PolymorphicTarget      

// Excludes function return blocks
Analytics_PolymorphicTarget(block) :-
  Analytics_Jumps(block),                                                          
  BlockJumpValidTarget(_, block, _, target1),
  BlockJumpValidTarget(_, block, _, target2),
  !IsReturn(_, block, _),
  target1 != target2.

.decl Analytics_PolymorphicTargetSameCtx(block: Block)
.output Analytics_PolymorphicTargetSameCtx

Analytics_PolymorphicTargetSameCtx(block) :-
  Analytics_Jumps(block),
  BlockJumpValidTarget(ctx, block, _, target1),
  BlockJumpValidTarget(ctx, block, _, target2),
  target1 != target2.

.decl Analytics_MissingJumpTarget(block: Block)
.output Analytics_MissingJumpTarget      

Analytics_MissingJumpTarget(block) :-
  Analytics_Jumps(block),
  !BlockJumpValidTarget(_, block, _, _),
  postTrans.JUMPDEST(_). // if there are not valid jumpdests then don't flag

// Missing operands for IR statements.

.decl Analytics_StmtMissingOperand(stmt:IRStatement)
.output Analytics_StmtMissingOperand

Analytics_StmtMissingOperand(stmt):-
  OpcodePopWords(op, 2),
  TAC_Op(stmt, op),
  !(TAC_Use(stmt, _, 0), TAC_Use(stmt, _, 1)).


Analytics_StmtMissingOperand(stmt):-
  OpcodePopWords(op, 1),
  TAC_Op(stmt, op),
  !TAC_Use(stmt, _, 0).

// Sanity checking for functions

.decl Analytics_InexactFunctionArguments(func: IRFunction)
.decl Analytics_InexactFunctionReturnArguments(func: IRFunction)
.decl Analytics_InexactFunctionCallArguments(call: IRStatement)

.output Analytics_InexactFunctionArguments
.output Analytics_InexactFunctionReturnArguments
.output Analytics_InexactFunctionCallArguments

Analytics_InexactFunctionArguments(func) :-
   NumberOfFunctionArguments(func, delta),
   NumberOfFunctionArguments(func, delta2),
   delta != delta2.

Analytics_InexactFunctionReturnArguments(func) :-
   NumberOfFunctionReturnArguments(func, delta),
   NumberOfFunctionReturnArguments(func, delta2),
   delta != delta2.

Analytics_InexactFunctionCallArguments(call):-
  IRFunctionCall(callblock, func),
  NumberOfFunctionArguments(func, n_args),
  TAC_Block(call, callblock),
  TAC_Op(call, "CALLPRIVATE"),
  IsStackIndexLessThan(n_arg, n_args),
  !TAC_Use(call, _, n_arg).

.decl Analytics_BlockInMultipleFunctions(block: IRBlock)
.output Analytics_BlockInMultipleFunctions

Analytics_BlockInMultipleFunctions(block) :-
   IRInFunction(block, func),
   IRInFunction(block, func2),
   func != func2.


.decl Analytics_BlockInNoFunctions(block: IRBlock)
.output Analytics_BlockInNoFunctions

Analytics_BlockInNoFunctions(block) :-
   IRStatement_Block(_, block),
   !IRInFunction(block, _).

.decl Analytics_BlocksLocalOrNot(block1: IRBlock, block2: IRBlock)
.output Analytics_BlocksLocalOrNot

Analytics_BlocksLocalOrNot(block1, block2) :-
   LocalBlockEdge(block1, block2),
   IRInFunction(block1, fun1),
   IRInFunction(block2, fun2),
   fun1 != fun2.


.decl Analytics_UnreachableBlock(block: Block)
.output Analytics_UnreachableBlock

Analytics_UnreachableBlock(block) :-
   postTrans.Statement_Block(_, block),
   !ReachableContext(_, block).

.decl Analytics_FunctionCall(block: IRBlock)
.output Analytics_FunctionCall

Analytics_FunctionCall(block) :-
   IRFunctionCall(block, _).

.decl Analytics_FunctionCallWithReturn(block: IRBlock)
.output Analytics_FunctionCallWithReturn

Analytics_FunctionCallWithReturn(block) :-
   IRFunctionCallReturn(block, _, _).

// functions with multiple return blocks
.decl Analytics_FunctionWithMultipleReturns(func: IRFunction)
.output Analytics_FunctionWithMultipleReturns

Analytics_FunctionWithMultipleReturns(func) :-
   IRFunction_Return(func, retBlock),
   IRFunction_Return(func, retBlock2),
   retBlock != retBlock2.

.decl Analytics_PublicFunction(func: IRFunction)
.output Analytics_PublicFunction

Analytics_PublicFunction(func) :-
   IRPublicFunction(func, _).

.decl Analytics_PublicFunctionNameResolved(func: IRFunction)
.output Analytics_PublicFunctionNameResolved

Analytics_PublicFunctionNameResolved(func) :-
   IRPublicFunction(func, sigHash),
   PublicFunctionSignature(sigHash, _).

// Check if a variable is defined twice; this should always be empty.
.decl Analytics_DoubleDef(variable: TACVariable)
.output Analytics_DoubleDef

Analytics_DoubleDef(variable) :-
  TAC_Def(stmt1, variable, _),
  TAC_Def(stmt2, variable, _),
  stmt1 != stmt2.

.decl BlockIsNotEmpty(block: IRBlock)

BlockIsNotEmpty(block) :-
  TAC_Block(_, block).

.decl Analytics_BlockIsEmpty(block: IRBlock)
.output Analytics_BlockIsEmpty

Analytics_BlockIsEmpty(block) :-
  (LocalBlockEdge(_, block); LocalBlockEdge(block, _)),
  !BlockIsNotEmpty(block).


.decl Analytics_JumpToMany(blk:IRBlock)
.output Analytics_JumpToMany

Analytics_JumpToMany(blk):-
  (TAC_Op(jump, "JUMP") ; TAC_Op(jump, "CALLPRIVATE")),
  TAC_Block(jump, blk),
  LocalBlockEdge(blk, one),
  LocalBlockEdge(blk, two),
  one != two.

Analytics_JumpToMany(blk):-
  TAC_Op(jump, "JUMPI"),
  TAC_Block(jump, blk),
  LocalBlockEdge(blk, one),
  LocalBlockEdge(blk, two),
  LocalBlockEdge(blk, three),
  one != two,
  one != three,
  two != three.


.decl JumpToMany_ImprecisionSource(reportBlock:IRBlock, sourceBlock:Block)
JumpToMany_ImprecisionSource(reportBlock, sourceBlock):-
  Analytics_JumpToMany(reportBlock),
  IRFunctionCallReturn(reportBlock, irfunc, _),
  IRFunction_Return(irfunc, retir),
  Block_IRBlock(sourceBlock, _, retir).

JumpToMany_ImprecisionSource(reportBlock, sourceBlock):-
  Analytics_JumpToMany(reportBlock),
  Block_IRBlock(sourceBlock, _, reportBlock),
  !IRFunctionCallReturn(reportBlock, _, _).


.decl Analytics_JumpToManyNonPopBlock(blk:IRBlock)
.output Analytics_JumpToManyNonPopBlock

Analytics_JumpToManyNonPopBlock(reportBlock):-
  Analytics_JumpToMany(reportBlock),
  JumpToMany_ImprecisionSource(reportBlock, sourceBlock),
  !postTrans.StackBalanceBlock(sourceBlock).

.decl Analytics_JumpToManyWithoutGlobalImprecision(blk:IRBlock)
.output Analytics_JumpToManyWithoutGlobalImprecision

Analytics_JumpToManyWithoutGlobalImprecision(reportBlock):-
  Analytics_JumpToMany(reportBlock),
  JumpToMany_ImprecisionSource(reportBlock, sourceBlock),
  !Analytics_PolymorphicTargetSameCtx(sourceBlock).


.decl Analytics_InitiallyMissedCycleEntry(blk: IRBlock)
.output Analytics_InitiallyMissedCycleEntry

Analytics_InitiallyMissedCycleEntry(block) :-
   PotentialCycleEntry(block),
   !PossibleFunctionalBlockPopAndStackDelta(_, block, _, _, _).

.decl Analytics_LocalBlockEdge(from: IRBlock, to: IRBlock)
.output Analytics_LocalBlockEdge

Analytics_LocalBlockEdge(from, to):-
  LocalBlockEdge(from, to).

.decl Analytics_MissingEdgeInTAC(irBlock: IRBlock)
.output Analytics_MissingEdgeInTAC
Analytics_MissingEdgeInTAC(irBlock):-
  Block_IRBlock(_, _, irBlock),
  TAC_Block(jump, irBlock),
  TAC_Op(jump, "JUMP"),
  !LocalBlockEdge(irBlock, _).
