// This is a client for the decompiler that is responsible
// for testing out the CFG construction by finding loops.
// It should be as simple as possible so that we can easily
// compare between distant versions of the decompiler
#include "../clientlib/decompiler_imports.dl"

.decl TransferOpcode(op: Opcode)
.decl Flows(from:Variable, to:Variable)
    
// Maps formals args (or locals) to formal return args
Flows(x, x) :- isVariable(x).
Flows(x, y) :- Flows(_, x), PHI(_, x, y).
  Flows(x, y) :-
  Flows(_, x),
  Statement_Uses(stmt, x, _),
  Statement_Defines(stmt, y, _),
  Statement_Opcode(stmt, op),
  TransferOpcode(op).

// Case: Flows from formal to formal return
Flows(actual, actualReturn) :-
   FunctionFlowSummary(fn, formal, m),
   FunctionCallReturn(block, fn, _),
   FormalArgs(fn, formal, n),
   ActualArgs(block, actual, n),
   ActualReturnArgs(block, actualReturn, m).

// Case: Flows from local variable to formal return
// Flows(variable, actualReturn) :-
//    FunctionFlowSummary(fn, variable, m),
//    FunctionCallReturn(block, fn, _),
//    !FormalArgs(fn, variable, _),
//    ActualReturnArgs(block, actualReturn, m).

// Recursive Case
Flows(x, z) :- Flows(x, y), Flows(y, z).

// Flows from variable to return argument
.decl FunctionFlowSummary(fn: Function, from:Variable, n:number)

// Flow from local or formal to formal return
FunctionFlowSummary(fn, from, n) :-
   Flows(from, to),
   FormalReturnArgs(fn, to, n).

// Case: flow within the same function, or back to local

.decl GlobalFlows(from:Variable, to:Variable)
GlobalFlows(x, y) :- Flows(x, y).

// Case: forward inter-procedural assignment only
GlobalFlows(x, y) :-
   GlobalFlows(x, actual),
   ActualArgs(caller, actual, n),
   CallGraphEdge(caller, fn),
   FormalArgs(fn, formal, n),
   Flows(formal, y).

TransferOpcode("AND").
TransferOpcode("OR").
TransferOpcode("XOR").
TransferOpcode("NOT").
TransferOpcode("PHI").
       
.decl Analytics_DataFlows(a: Variable, b: Variable)
.output Analytics_DataFlows

Analytics_DataFlows(a, b) :-
   GlobalFlows(a, b).

.decl Analytics_PolymorphicVariable(a: Variable)
.output Analytics_PolymorphicVariable

Analytics_PolymorphicVariable(v) :-
   GlobalFlows(a, v),
   GlobalFlows(b, v),
   a != b.


.decl Analytics_DataFlowsToSamePublicFunction(a: Variable, b: Variable)

Analytics_DataFlowsToSamePublicFunction(a, b) :-
   GlobalFlows(a, b),
   Variable_Function(a, f),
   Variable_Function(b, f),
   IsPublicFunction(f).

.decl StmtMissingOperand(s: Statement)
.input StmtMissingOperand(IO="file", filename="Analytics_StmtMissingOperand.csv", delimiter="\t")

.decl Analytics_MissingDataFlowsToSamePublicFunction(a: Variable, b: Variable)
.output Analytics_MissingDataFlowsToSamePublicFunction
       
Analytics_MissingDataFlowsToSamePublicFunction(a, b) :-
   StmtMissingOperand(s),
   Statement_Defines(s, a, _),
   Analytics_DataFlowsToSamePublicFunction(a, b).
       

.decl Analytics_DataFlowsToDifferentPublicFunction(a: Variable, b: Variable)
.output Analytics_DataFlowsToDifferentPublicFunction

Analytics_DataFlowsToDifferentPublicFunction(a, b) :-
   GlobalFlows(a, b),
   Variable_Function(a, fa), fa != "0x0",
   IsPublicFunction(fa),
   Variable_Function(b, fb), fb != "0x0",
   IsPublicFunction(fb),
   fa != fb.



.decl SizeOfFunction(f: Function, n: number)

SizeOfFunction(f, n) :-
  InFunction(_, f),
  n = count : InFunction(_, f).

.decl FunctionIsNotLargest(f: Function)

FunctionIsNotLargest(f) :-
  SizeOfFunction(f, n),
  SizeOfFunction(g, m), f != g,
  ((m > n) ; (m = n, ord(g) > ord(f))).

.decl Analytics_LargestFunction(f: Function, b: Block)
.output Analytics_LargestFunction

Analytics_LargestFunction(f, b) :- InFunction(b, f), !FunctionIsNotLargest(f).

.decl Analytics_Variables(a: Variable)
.output Analytics_Variables

Analytics_Variables(a) :-
   isVariable(a).



// Has many dependencies, incl memory modeling and data structures
#include "../clientlib/guards.dl"

/**
 * Memory Modeling
 */

.decl Analytics_CallToSignature(sigHashVal: Value)
.output Analytics_CallToSignature

.decl Analytics_ERC20TransferCall(call:Statement)
.output Analytics_ERC20TransferCall

.decl Analytics_ERC20TransferFromCall(call:Statement)
.output Analytics_ERC20TransferFromCall

.decl Analytics_ERC20ApproveCall(call:Statement)
.output Analytics_ERC20ApproveCall

.decl Analytics_ExternalCallActualReturn(call: Statement, actual: Variable, index: number)
.output Analytics_ExternalCallActualReturn

Analytics_CallToSignature(substr(sigHashVal, 0, 10)) :-
  CALLStatement(call, _),
  StatementUsesMemory_ActualMemoryArg(call, _, 0, actual),
  Variable_Value(actual, sigHashVal).

Analytics_ERC20TransferCall(call):-
  ERC20TransferCall(call, _, _).

Analytics_ERC20TransferFromCall(call):-
  ERC20TransferFromCall(call, _, _, _).

Analytics_ERC20ApproveCall(call):-
  ERC20ApproveCall(call, _, _).

Analytics_ExternalCallActualReturn(call, actual, index):-
  ExternalCall_ActualReturn(call, actual, index).


.decl Analytics_RevertSigUsed(sig: symbol)
.output Analytics_RevertSigUsed

Analytics_RevertSigUsed(sig):-
  RevertToSignature(_, sig).


.decl Analytics_EventSignature(sigHashVal: Value)
.output Analytics_EventSignature

Analytics_EventSignature(sigHashVal) :-
  LOGStatement(log, _),
  Statement_Uses(log, actual, 2),
  Variable_Value(actual, sigHashVal).

.decl Analytics_CREATE2WithInitCode(create2: Statement, initCode: symbol)
.output Analytics_CREATE2WithInitCode

Analytics_CREATE2WithInitCode(create2, initCode):-
  CREATE2WithInitCode(create2, initCode).

.decl Analytics_ConstArrayContents(contents: symbol)
.output Analytics_ConstArrayContents

Analytics_ConstArrayContents(contents):-
  ConstArray_Contents(_, contents).

/**
 * Guards
 */

.decl Analytics_SenderGuard(glovalVar: Value)
.output Analytics_SenderGuard

Analytics_SenderGuard(globalVar):-
  SenderGuard(globalVar, _).


/**
 * Storage Modeling
 */

.decl Analytics_GlobalVariable(globalVar: symbol)
.output Analytics_GlobalVariable

Analytics_GlobalVariable(globalVar):-
  GlobalVariable(globalVar).

.decl Analytics_Map(globalVar: symbol)
.output Analytics_Map

Analytics_Map(globalVar):-
  MapElementStmt(_, globalVar, _).

.decl Analytics_StorageArray(globalVar: symbol)
.output Analytics_StorageArray

Analytics_StorageArray(globalVar):-
  ArrayElementStmt(_, globalVar, _).

.decl Analytics_UselessSLOAD(stmt: Statement)
.output Analytics_UselessSLOAD

Analytics_UselessSLOAD(stmt):-
  UselessSLOAD(stmt).
/**
  New storage model analytics
*/
.decl Verbatim_StorageOffset_Type(offset: Value, type: symbol)
.output Verbatim_StorageOffset_Type

Verbatim_StorageOffset_Type(offset, type):-
  StorageOffset_Type(offset, type).

.decl Verbatim_StructToString(structID: symbol, stringStruct: symbol)
.output Verbatim_StructToString

Verbatim_StructToString(structID, stringStruct):-
  StructToString(structID, stringStruct).